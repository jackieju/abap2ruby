COMPILER C

CHARACTERS
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit    = "0123456789" .
  hexdigit = digit + "ABCDEFabcdef" .
  tab      = CHR(9) .
  eol      = CHR(10) .
  files    = letter + digit + ":\." .
  chars    = CHR(32) .. CHR(255) - '"' .
  strings  = CHR(32) .. CHR(255) - "'".
  strings1 = CHR(32) .. CHR(255) - '"' .	
  macros   = ANY - eol .
  space = CHR(32).

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "\"" TO eol

IGNORE
  tab + eol + CHR(13)

TOKENS
  identifier = ( "_" | letter) { "_" | "-" | letter | digit } .
  number     = digit { digit } [ "U" | "u" | "L" | "l" ] .
  hexnumber  = "0" ( "x" | "X" ) hexdigit { hexdigit } [ "U" | "u" | "L" | "l" ] .
  string1     = "'" { strings } "'" .
  char       = '"' [ "\\" ] chars '"' .
   Colon = ":" .
  space1 = space .

PRAGMAS

  PreProcessor = "#" ( letter ) .
		    

PRODUCTIONS

    Exps =  Expression{Expression} .
    
    NameOrRef = identifier|"("identifier")" .
    
    C                  =      (ReportDef | FunctionDef) .
    
    ReportDef          = "REPORT" (.  fn_name=curString() .) identifier  (. src("") .) 
    ["NO" "STANDARD" "PAGE" "HEADING"] 
               ["LINE-SIZE" number] 
               ["LINE-COUNT" number["("number")"]] 
               ["MESSAGE-ID" identifier] 
               ["DEFINING" "DATABASE" identifier] 
               ["REDUCED" "FUNCTIONALITY"] "."
    {Statement}
                       (.
                         @root_class.add_method(fn_name, "()", [], src, "")
                       .)
                    EOF .

    FunctionDef = "FUNCTION" (.  fn_name=curString() .) identifier "."  (. src("") .) 
                    {Statement}
                  (.
                             @root_class.add_method(fn_name, "()", [], src, "")
                  .)
                    "ENDFUNCTION" "." .

    Type = identifier .


  Statement            = 
  (. ps() .)
  
                         (
                              VariableDefineStatement
                             | WriteStatement 
                             | AssignmentStatement 
                             | BreakStatement
                             | ContinueStatement
                             | stDO
                             | ForStatement
                             | IfStatement  
                             | NullStatement
                             |  ReturnStatement 
                             |  stWHILE 
                             |  LoopStatement 
                             |  CaseStatement
                             |  stCALL
                             | (
                                  ClassStatement
                                  | ClassImplStatement
                                )
                             | MethodStatement
                             | MethodsStatement
                             | FunctionDef
                             /*| DescribeStatement*/
                             | MessasgeStatement
                            /* | RefreshStatement */
                             | SearchStatement
                             | stAPPEND
                             | stSPLIT
                             | stRAISE
                             | stCONSTANTS
                             | stMOVE
                             | stWITH
                             | stTABLES
                             | stAUTHORITY_CHECK
                             | stDELETE
                             | stEVENTS
                             | stMODIFY
                             | stON
                             | stOPEN
                             | stFETCH
                             | stPROVIDE
                             | stREAD
                             | stSORT
                             | stSUBMIT
                             | stTRY
                       /*    | STRUCTURE
                             | stTYPE
                             | stUPDATE*/
                             | stADD
                             | stADD_CORRESPONDING
                             | stALIASES
                             | stASSERT
                             | stASSIGN
                            /* |AT*/
                             | stBACK
                             | stBREAK_POINT
                             | stCATCH
                             | stCHECK
                             | stCLASS_DATA
                             | stCLASS_EVENTS
                             | stCLASS_POOL
                             | stCLEAR
                             | stCLOSE
                             | stCOLLECT
                             | stCOMMIT
                           /* | COMMUNICATION*/
                             | stCOMPUTE
                             | stCONCATENATE
                             | stCONDENSE
                             | stCONTROLS
                             | stCONVERT
                             | stCREATE
                             | stDEMAND
                             | stDESCRIBE
                             | stDETAIL
                             | stDIVIDE
                             | stDIVIDE_CORRESPONDING
                             | stEDITOR_CALL
                             | stEND_OF_PAGE
                             | stEND_OF_SELECTION
                             | stEXIT
                             | stEXPORT
                             | stEXTRACT
                             | stFIELD_GROUPS
                             | stFIELD_SYMBOLS
                             | stFIELDS
                             | stFIND
                             | stFORMAT
                             | stFREE
                             | stFUNCTION_POOL
                             | stGENERATE
                             | stGET
                             | stHIDE
                             | stIMPORT
                             | stINCLUDE
                             | stINFOTYPES
                             | stINITIALIZATION
                             | stINPUT
                             | stINSERT
                             | stINTERFACE
                             | stINTERFACE_POOL
                             | stINTERFACES
                             | stLEAVE
                             | stLOAD_OF_PROGRAM
                             | stLOCAL
                             | stLOG_POINT
                             | stMAXIMUM
                             | stMINIMUM
                             | stMODULE
                             | stMULTIPLY
                             | stMULTIPLY_CORRESPONDING
                             | stNEW_LINE
                             | stNEW_PAGE
                             | stNEW_SECTION
                             | stNODES
                             | stOVERLAY
                             | stPACK
                             | stPARAMETERS
                             | stPERFORM
                             | stPOSITION
                             | stPRINT_CONTROL
                             | stPROGRAM
                             | stRANGES
                             | stRECEIVE
                             | stREFRESH
                             | stREJECT
                             | stREPLACE
                             | stRESERVE
                             | stRESUME
                             | stRETRY
                             | stRETURN
                             | stROLLBACK
                             | stSCROLL
                             | stSELECT_OPTIONS
                             | stSELECTION_SCREEN
                             | stSET
                             | stSHIFT
                             | stSKIP
                             | stSTOP
                             | stSUBTRACT
                             | stSUBTRACT_CORRESPONDING
                             | stSUM
                             | stSUMMARY
                             | stSUMMING
                             | stSUPPLY
                             | stSUPPRESS
                             | stSYNTAX_CHECK
                             | stTEST_INJECTION
                             | stTEST_SEAM
                             | stTOP_OF_PAGE
                             | stTRANSFER
                             | stTRANSLATE
                             | stTRUNCATE
                             | stTYPE_POOL
                             | stTYPE_POOLS
                             | stTYPES
                             | stULINE
                             | stUNASSIGN
                             | stUNPACK
                             | stUPDATE
                             | stWAIT
                             | stWINDOW
                             | stSELECT
                         )
                           
 .
 
stSELECT = "SELECT" ".".

Withline =  "+" identifier [( identifier {"," identifier} )] "AS" identifier {"," "+" identifier [( identifier {"," identifier} )] "AS" identifier}
   stSELECT "." . 

stWITH = "WITH" 
  Withline { Withline }
 
"ENDWITH".
 
 
stTABLES = "TABLES" ["*"] identifier "." . 

 
stMOVE =  "MOVE" 
          ["EXACT"] Expression  ["TO"|"?TO"] Expression
     [  "PERCENTAGE" Expression ["LEFT"|"RIGHT"] ]
        
    . 
    

 
stAPPEND = "APPEND" ( 
         {"INITIAL" "LINE"} 
        | {"LINES" "OF" identifier ["FROM" identifier] ["TO" identifier] ["USING" "KEY" string1]}
        | identifier )
    "TO" identifier {"[""]"}
    ["SORTED" "BY" string1] 
    [ ("ASSIGNING" string1 ["CASTING"] | "REFERENCE" "INTO" identifier ) ] "." .
 
stCONCATENATE = "CONCATENATE" (identifier {identifier}
             | "LINES" "OF" identifier
             )
             "INTO" identifier 
             ["IN" ("CHARACTER"|"BYTE") "MODE"] 
             ["SEPARATED" "BY" string1] 
             ["RESPECTING" "BLANKS"] ".".
 
SearchStatement = "SEARCH" identifier "FOR" string1 
      ["IN" ("CHARACTER"|"BYTE") "MODE"] 
      ["STARTING" "AT" Expression] ["ENDING" "AT" Expression] 
      ["ABBREVIATED"] 
      ["AND" "MARK"] "." . 
/*
RefreshStatement = "REFRESH" ("CONTROL" identifier "FROM" "SCREEN" identifier
 | identifier["[""]"] ["FROM" "TABLE" identifier] ).
 


DescribeStatement = "DESCRIBE" (
          ( "FIELD" identifier 
          ["TYPE" identifier ["COMPONENTS" identifier]] 
          ["LENGTH" Expression "IN" {"BYTE"|"CHARACTER"} "MODE"] 
          ["DECIMALS" string1] 
          ["OUTPUT-LENGTH" number] 
          ["HELP-ID" identifier] 
          ["EDIT" "MASK" identifier]
          )
        | ("DISTANCE" "BETWEEN" identifier "AND" identifier "INTO" identifier 
                          "IN" {"BYTE"|"CHARACTER"} "MODE" )

        | ("LIST" { {"NUMBER" "OF" {"LINES"|"PAGES"} number} 
              | {"LINE" number "PAGE" number} 
              | {"PAGE" number ["LINE-SIZE" number] 
                            ["LINE-COUNT" number] 
                            ["LINES" number] 
                            ["FIRST-LINE" number] 
                            ["TOP-LINES" number] 
                            ["TITLE-LINES" number] 
                            ["HEAD-LINES" number] 
                            ["END-LINES" number]} } 
              ["INDEX" identifier]
              )
        | ( "TABLE" identifier ["KIND" identifier] ["LINES" number] ["OCCURS" number] )
        )
        "." . */

stRAISE = "RAISE" (
  "EVENT" identifier ["EXPORTING" Expression {Expression}]
| ["RESUMABLE"] "EXCEPTION" 
  [  
      ( "TYPE" identifier 
          [ 
              "MESSAGE" identifier "(" identifier ")" 
              | { "ID" identifier "TYPE" identifier "NUMBER" Expression }   ["WITH" identifier {identifier} ]
          ] 
         ["EXPORTING" Expression {Expression}] 
       
     | identifier
     )
 ]
 |identifier
)
.

MessasgeStatement = "MESSAGE"
         {(
         
         ( "ID" identifier "TYPE" identifier "NUMBER" number )
        
        | (string1 "TYPE" identifier)
        | ( identifier [ ( "(" identifier ")" | (  "TYPE" identifier) ) ] ))} 
         
        [(
        (["DISPLAY" "LIKE" identifier] 
            ["RAISING" identifier] )
        | ("INTO" string1)
        )]
        ["WITH" identifier {identifier}] "." . 


GroupBy = "GROUP" "BY" ( 
                        ( Expression {Expression} [ identifier "=" "GROUP" "SIZE"] [ identifier "=" "GROUP" "INDEX"]) 
                        |identifier
                       )
                            [("ASCENDING"|"DESCENDING") ["AS" "TEXT"]] 
                            ["WITHOUT" "MEMBERS"] 
                            [ 
                                "INTO" identifier 
                              | "ASSIGNING" identifier
                              | "REFERENCE" "INTO" identifier
                            ] .
                            
LoopStatement = "LOOP" [ 
            "AT" ( 
                  (
                     (
                       identifier ( 
                                   "INTO" identifier  
                                 |  "ASSIGNING" identifier ["CASTING"] 
                                 |  "REFERENCE" "INTO" identifier 
                                 |  "TRANSPORTING" "NO" "FIELDS" 
                                  )
                          [ "USING" "KEY" (identifier|"("identifier")" )] 
                          [ "FROM" identifier] ["TO" identifier] ["WHERE" Expression ] 
                          [ GroupBy
                         ]
                     )
                    | identifier ["VERSION" string1]  
                  )
                |
                 "GROUP" identifier ( 
                               "INTO" identifier  
                             |  "ASSIGNING" identifier ["CASTING"] 
                             |  "REFERENCE" "INTO" identifier 
                             |  "TRANSPORTING" "NO" "FIELDS" 
                              )
                                   ["WHERE" Expression] 
                                   [GroupBy]
                | "SCREEN" "INTO" identifier
               )
             ] "." 
            {Statement} 
        "ENDLOOP" "." .

TypeDes = "TYPE"    identifier (["LENGTH" number] ["DECIMALS" number] | { "READER"|"LOCATOR"|"LOB" "HANDLE" } )
                      | ["LINE" "OF"] identifier ["BOXED"]
                      | "REF" "TO" identifier 
                      | 
                          {
                              {["STANDARD"] "TABLE"} 
                              |{"SORTED" "TABLE"} 
                              |{"HASHED" "TABLE"}
                          } 
                          "OF" ["REF" "TO"] identifier 
                          [
                               {"WITH" ["UNIQUE"|"NON-UNIQUE"] 
                                   {
                                        {"KEY" [identifier ["ALIAS" identifier] "COMPONENTS"] {identifier}} 
                                        | {"DEFAULT" "KEY"} 
                                    }
                                } 
                                | {"WITH" "EMPTY" "KEY"}
                          ] 
                          { 
                              [ 
                                  "WITH" {"UNIQUE" "HASHED"}
                                  | { {"UNIQUE"|"NON-UNIQUE"} "SORTED"} "KEY" identifier "COMPONENTS" {identifier}
                              ] 
                               
                           } 
                          ["INITIAL" "SIZE" number] 
                          ["WITH" "HEADER" "LINE"]
                         
                       | "RANGE" "OF" Type ["INITIAL" "SIZE" number] ["WITH" "HEADER" "LINE"] 
                       | { "WRITER"|"LOCATOR" } "FOR" { "COLUMNS" {identifier} } 
                       |  "ALL" ["OTHER"] ["BLOB"|"CLOB"] "COLUMNS" 
                 .
                 
LikeDes =        "LIKE" 
                  (
                      ["LINE" "OF"] identifier
                     | "REF" "TO" identifier
                     |  
                         {
                              ["STANDARD"] "TABLE" 
                              |"SORTED" "TABLE"
                              |"HASHED" "TABLE"
                         } 
                         "OF" ["REF" "TO"] identifier
                         [
                          
                                  "WITH" ["UNIQUE"|"NON-UNIQUE"] 
                                   {
                                    "KEY" [identifier ["ALIAS" identifier] "COMPONENTS"] {identifier} 
                                   |
                                    "DEFAULT" "KEY"
                                   }
                          
                              | "WITH" "EMPTY" "KEY"
                         ] 
                         {
                              
                              "WITH" {"UNIQUE" "HASHED"}
                              |
                              {
                                  {"UNIQUE"|"NON-UNIQUE"} "SORTED"
                                }
                                "KEY" identifier "COMPONENTS" {identifier}
                            
                         } 
                         ["INITIAL" "SIZE" number] 
                         ["WITH" "HEADER" "LINE"]
                    
                      |  
                     "RANGE" "OF" identifier ["INITIAL" "SIZE" number] ["WITH" "HEADER" "LINE"]
                                         
                   ).
 
                 
VariableDefineStatement =  ("DATA"|"STATICS" ) 
            ( 
                "BEGIN" "OF" ( "COMMON" "PART" identifier| identifier ["READ-ONLY"] ["OCCURS" number] )
                |
                "END" "OF" ("COMMON" "PART" identifier | identifier ["VALID" "BETWEEN" Expression "AND" Expression] )
                | 
                identifier { "(" number  ")" }  ( TypeDes | LikeDes)
                                ["VALUE" { Expression | "IS" "INITIAL" }] 
                                ["READ-ONLY"]
            )
                    "." .
                    



stCONSTANTS = "CONSTANTS" identifier ( TypeDes | 
               LikeDes
                ) "VALUE" { Expression | "IS" "INITIAL" } "." .


WriteStatement =   (. param_hash = {} .) "WRITE" {["AT"] ["/"][number 
 (. param_hash["col"] = curString().to_i .)
 ][ "(" (number | "*" | "**") ")" ]} Expression 
 (.
     param_hash["s"] = popv
 .)
  ["UNDER" identifier] 
  ["NO-GAP"] 
  ["LEFT-JUSTIFIED"|"CENTERED"|"RIGHT-JUSTIFIED"] 
  { 
    
      ["EXPONENT" Expression] 
      ["NO-GROUPING"] 
      ["NO-SIGN"] 
      ["NO-ZERO"] 
      ["CURRENCY" string1] 
      { 
           ["DECIMALS" string1] ["ROUND" number]  
        | ["UNIT" string1] 
        } 
     
    | { ["ENVIRONMENT" "TIME" "FORMAT"] 
        ["TIME" "ZONE" string1] } 
    ["STYLE" string1] 
  } 
  ["USING" { "NO" "EDIT" "MASK"| "EDIT" "MASK" string1}] 
  ["DD/MM/YY"|"MM/DD/YY"|"DD/MM/YYYY"|"MM/DD/YYYY"|"DDMMYY"|"MMDDYY"|"YYMMDD"] 
  ["COLOR" 
      {
         ["="] 
            { { Primary } ["ON"] } 
            | "OFF"
              
        |
         "=" number
     }
  ] 
  ["INTENSIFIED" [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["INVERSE"     [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["HOTSPOT"     [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["INPUT"       [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["FRAMES"      [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["RESET"] 
  { 
      "AS" ("CHECKBOX" | "ICON" | "SYMBOL"  | "LINE")
  } 
  ["QUICKINFO" string1] 
  
  |
  
    (identifier|"("identifier")") "TO" identifier 
  ["LEFT-JUSTIFIED"|"CENTERED"|"RIGHT-JUSTIFIED"] 
  ( ( ["EXPONENT" Expression] 
      ["NO-GROUPING"] 
      ["NO-SIGN"] 
      ["NO-ZERO"] 
      ["CURRENCY" string1] 
      ( ( ["DECIMALS" number] 
          ["ROUND" number] ) 
        | ["UNIT" string1] ) ) 
    | ( ["ENVIRONMENT" "TIME" "FORMAT"] 
        ["TIME" "ZONE" string1] ) 
    ["STYLE" string1] ) 
  ["USING" ( ("NO" "EDIT" "MASK")|("EDIT" "MASK" identifier) )] 
  ["DD/MM/YY"|"MM/DD/YY"|"DD/MM/YYYY"|"MM/DD/YYYY"|"DDMMYY"|"MMDDYY"|"YYMMDD"] 
    "." 
  (.
  
  params = []
  param_hash.each{|k,v|
      params.push "#{k}: #{v}"
  }
  src("write(#{params.join(", ")})\n")
  .)
  . 

  AssignmentStatement =  Expression  .

  BreakStatement       = "break"   .


  Statements =  Statement { Statement } .

  ContinueStatement    = "CONTINUE"  "."  .

/*
  DoStatement          = "DO" [number "TIMES"] {"VARYING" identifier "FROM" identifier "NEXT" identifier ["RANGE" number] } "." 
  {Statement}
"ENDDO" "." .
*/

CaseStatement = 
    "CASE" Expression "." 
      {"WHEN" Expression {"OR" Expression } "." 
        {Statement}} 
      ["WHEN" "OTHERS" "." 
        {Statement}] 
    "ENDCASE" "." .

AUTHORITY_CHECK_ITEM = "ID" identifier ("FIELD" Expression|"DUMMY") .

stAUTHORITY_CHECK = "AUTHORITY-CHECK" "OBJECT" identifier ["FOR" "USER" string1] 
                     AUTHORITY_CHECK_ITEM { AUTHORITY_CHECK_ITEM }
                      "." .
                      
stDELETE = "DELETE"(  
                "DATASET" identifier 
                |
                ( 
                    ( 
                        "FROM" Expression ["USING" "CLIENT" identifier] 
                        | ["CLIENT" "SPECIFIED"] ["CONNECTION" (identifier|"("Expression")")] ["WHERE" Expression] ["ORDER" "BY" identifier{"," identifier} ["OFFSET" number]] ["UP" "TO" number "ROWS"] 
                    ) 
                   | "TABLE" identifier 
                   | ( ( identifier|"(" Expression ")") ["CLIENT" "SPECIFIED"] ["CONNECTION" (identifier|"("Expression")")] ) 
                       "FROM" identifier 
                ) 
                |  
                  ( 
                        ( ("TABLE" identifier 
                        (("FROM" identifier ["USING" "KEY" (identifier|"("identifier")")]) 
                        |("WITH" "TABLE" "KEY" [(identifier|"("identifier")")"COMPONENTS"] 
                                 ["("] identifier [")"] "=" identifier 
                                  ))) 
                                  | (identifier ["INDEX" identifier] ["USING" "KEY" ["("] identifier [")"]]) 
                        ) 
                    |
                        (    
                            ("ADJACENT" "DUPLICATES" "FROM" identifier [ "USING" "KEY" ["("] identifier [")"]] 
                                                   ["COMPARING" identifier |("ALL" "FIELDS")])
                            |
                            identifier ["USING" "KEY" ["("] identifier [")"]] ["FROM" identifier] ["TO" identifier] ["WHERE" ["("] Expression [")"]] 
                        )
                    |
                        "FROM" 
                           (
                            ("MEMORY" "ID" number) 
                            | ("DATABASE"      identifier"("identifier")" ["CLIENT" identifier] "ID" number) 
                            | "SHARED"(
                                 ( "MEMORY" identifier"("identifier")" ["CLIENT" identifier] "ID" number) 
                                 | ( "BUFFER" identifier"("identifier")" ["CLIENT" identifier] "ID" number)
                            )
                           )
                 )
                ) ".".

VARYING = "VARYING" identifier "FROM" identifier "NEXT" identifier ["RANGE" Expression] .

stDO = "DO" [number "TIMES"] {VARYING} "." 
  {Statement}
"ENDDO"".".

Event_exp_item = "VALUE"(Expression) Typing 
                         ["OPTIONAL"|("DEFAULT" Expression)] .
    
Event_options = "EXPORTING" Event_exp_item {Event_exp_item} .

stEVENTS = "EVENTS" identifier [ Event_options ]".".


stMODIFY = "MODIFY"( 
         ( ( ( ("TABLE" identifier)|(identifier "INDEX" identifier) 
             ["USING" "KEY" ["("] identifier [")"]] ) 
             | ( identifier ["USING" "KEY" identifier] ) 
           "FROM" identifier 
           ["TRANSPORTING" identifier ] 
           [("ASSIGNING" string1 ["CASTING"])|("REFERENCE" "INTO" identifier)] ) 
           | (identifier "FROM" identifier ["USING" "KEY" ["("] identifier [")"]] 
                       "TRANSPORTING" identifier  
                       "WHERE" "("Expression")") ) 
       |  
         ( 
             ("LINE" number ["OF" ("PAGE" number)|("CURRENT" "PAGE")] ["INDEX" identifier]) 
             |
            ("CURRENT" "LINE") ) 
           ["LINE" "VALUE" "FROM" identifier] 
           ["FIELD" "VALUE" identifier ["FROM" identifier] {identifier ["FROM" identifier]}] 
           ["LINE" "FORMAT" Format_options] 
           ["FIELD" "FORMAT" identifier Format_options {identifier Format_options} ] 
       |
         "SCREEN" "FROM" identifier 
       |
           identifier|"("Expression")" 
                 ["USING" "CLIENT" identifier] | ["CLIENT" "SPECIFIED"] 
                 ["CONNECTION" (identifier|"("Expression")")] 
                 "FROM" ( identifier|("TABLE" identifier) ) 
         ) ".".

stON = "ON" "CHANGE" "OF" identifier {"OR" identifier }"." 
  Statements 
"ENDON"".".

SQLCondition = Expression .

stOPEN = "OPEN" ( 
     "CURSOR" ["WITH" "HOLD"] "@"identifier "FOR" 
      [ "WITH"    ("+" identifier "AS" identifier) {"," "+" identifier "AS" identifier} ]
  "SELECT" (
           Expression{"," Expression} "FROM" identifier{"," identifier} 
           | 
           "FROM" identifier{"," identifier} "FIELDS"  Expression{"," Expression}
          ) 
         [["FOR" "ALL" "ENTRIES" "IN" identifier] "WHERE" SQLCondition] 
         [GroupBy] ["HAVING" SQLCondition] 
         ["ORDER" "BY" identifier{","identifier} ] 
         ["OFFSET" number] 
         ["UP" "TO" number "ROWS"] 
         ["BYPASSING" "BUFFER"] 
         ["CONNECTION" identifier|"(" Expression ")"]
          | 
         
         "DATASET" identifier 
  "FOR" ( "INPUT" | "OUTPUT" | "APPENDING" | "UPDATE" ) 
  "IN" ( ( "BINARY" "MODE" ) 
     | ( "TEXT" "MODE" "ENCODING" ( "DEFAULT" 
                            | ("UTF-8" ["SKIPPING"|"WITH" "BYTE-ORDER" "MARK"]) 
                            | "NON-UNICODE" ) 
                   ["WITH" ("NATIVE"|"SMART"|"UNIX"|"WINDOWS") "LINEFEED"]  ) 

     | "LEGACY" 
         ( ( "BINARY" "MODE" [("BIG"|"LITTLE") "ENDIAN"] 
                                ["CODE" "PAGE" identifier] ) 
         | (  "TEXT" "MODE" [("BIG"|"LITTLE") "ENDIAN"] 
                              ["CODE" "PAGE" identifier] 
                              ["WITH" ("NATIVE"|"SMART"|"UNIX"|"WINDOWS") "LINEFEED"] ) 
          )                    
    ) 
  ["AT" "POSITION" number] 
  ["TYPE" identifier] 
  ["FILTER" identifier] 
  ["MESSAGE" string1] 
  ["IGNORING" "CONVERSION" "ERRORS"] 
  ["REPLACEMENT" "CHARACTER" char] ) ".".

stFETCH = "FETCH" "NEXT" "CURSOR" identifier 
    ( ( "INTO" ( (["CORRESPONDING" "FIELDS" "OF"] identifier) | identifier{"," identifier} ) ) 
    | ( "INTO"|"APPENDING" ["CORRESPONDING" "FIELDS" "OF"] "TABLE" identifier 
                       ["PACKAGE" "SIZE" number] ) ) 
      [ "EXTENDED" "RESULT" "@"identifier ]".".

ProvideFields = "FIELDS" ("*"| identifier {identifier}) 
               "FROM" identifier "INTO" identifier "VALID" identifier  
               "BOUNDS" number "AND" number 
               ["WHERE" Expression] .


               
stPROVIDE = "PROVIDE" ProvideFields {ProvideFields}
       
        "BETWEEN" number "AND" number 
        ["INCLUDING" "GAPS"]"." 
  Statements 
"ENDPROVIDE"".".
                       
stREAD = "READ" (
      "DATASET" identifier "INTO" identifier ["MAXIMUM" "LENGTH" number] 
                            [["ACTUAL"] "LENGTH" number] 
    
     |  /* READ LINE */
     ( ("LINE" number [("OF" "PAGE" number)|("OF" "CURRENT" "PAGE")] ["INDEX" identifier]) 
                                                            | ("CURRENT" "LINE") ) 
                                                                    ["LINE" "VALUE" "INTO" identifier] 
     ["FIELD" "VALUE" identifier ["INTO" identifier] {identifier ["INTO" identifier] }]
      |  /* READ REPORT */
      "REPORT" identifier "INTO" identifier ["MAXIMUM" "WIDTH" "INTO" number]
       | /* READ TABLE /
       "TABLE" identifier(
           ["WITH" "KEY" identifier] 
                 ["SEARCH" ("FKEQ"|"FKGE"|"GKEQ"|"GKGE")] 
                 ["VERSION" string1]
       |
         
           (
            (
                ("FROM" identifier ["USING" "KEY" ["("] identifier [")"]]) 
             |
              "WITH"
             (
                 ( "TABLE" "KEY" [identifier|"("identifier")" "COMPONENTS"] 
                                  ["("]identifier[")"] "=" identifier { ["("]identifier[")"] "=" identifier }
                              
                                  ) 
                 | ("KEY" identifier "=" identifier {identifier "=" identifier} ["BINARY" "SEARCH"]) 
                 | ("KEY" ["("] identifier [")"] 
                             "COMPONENTS" identifier "=" identifier {identifier "=" identifier } )
                 | ("KEY" ["="]identifier ["BINARY" "SEARCH"]) 
             ) 
             | ("INDEX" identifier ["USING" "KEY" ["("]identifier[")"] ]) 
            ) 
             
          
          ) 
           ( ("INTO" identifier 
              ["COMPARING" (  "ALL" "FIELDS" | "NO" "FIELDS" |identifier{identifier} )] 
              ["TRANSPORTING" ( "ALL" "FIELDS"  | identifier{identifier} )]) 
           | ( "ASSIGNING" identifier ["CASTING"] ) 
           | ( "REFERENCE" "INTO" identifier ) 
           | ("TRANSPORTING" "NO" "FIELDS") )
    )*/
    |/* READ TEXTPOOL */
     "TEXTPOOL" identifier "INTO" identifier "LANGUAGE" identifier ) ".".
       

stSORT = "SORT" identifier ["STABLE"] 
          ( ( ["ASCENDING"|"DESCENDING"] 
              ["AS" "TEXT"] 
              ["BY" (identifier ["ASCENDING"|"DESCENDING"] ["AS" "TEXT"]) {identifier ["ASCENDING"|"DESCENDING"] ["AS" "TEXT"]}] ) 
          | ( ["BY" (identifier)] ) 
          | ( ["BY" Expression] ) )".".

stSUBMIT = "SUBMIT" (identifier|"("identifier")") 
  ["USING" "SELECTION-SCREEN" identifier] 
  ["VIA" "SELECTION-SCREEN"] 
  ["USING" "SELECTION-SET" identifier] 
  ["USING" "SELECTION-SETS" "OF" "PROGRAM" identifier] 
  ["WITH" "SELECTION-TABLE" identifier] 
  {
      "WITH" identifier ( (("EQ"|"NE"|"CP"|"NP"|"GE"|"LT"|"LE"|"GT") identifier ["SIGN" string1]) 
              | (["NOT"] "BETWEEN" identifier "AND" identifier ["SIGN" string1]) 
              | ("IN" identifier) )
  }
  ["WITH" "FREE" "SELECTIONS" string1] 
  ["LINE-SIZE" number] 
  ["LINE-COUNT" number] 
  ( ["EXPORTING" "LIST" "TO" "MEMORY"] 
  | ["TO" "SAP-SPOOL" "SPOOL" "PARAMETERS" identifier 
                  ["ARCHIVE" "PARAMETERS" identifier] 
                  "WITHOUT" "SPOOL" "DYNPRO"] ) 
  [["USER" string1] "VIA" "JOB" identifier "NUMBER" number ["LANGUAGE" identifier]] 
  ["AND" "RETURN"]".".
  
stTRY = "TRY""." 
    {Statement}
  {
      "CATCH" ["BEFORE" "UNWIND"] identifier  ["INTO" identifier]"." 
        {Statement}
  }
  
  ["CLEANUP" ["INTO" identifier]"." 
    {Statement}] 
"ENDTRY"".".

/*
Lob_handle_type =  ( "READER"|"LOCATOR"|"LOB" "HANDLE"|"WRITER" ) 
                   "FOR" 
                   ( "COLUMNS" identifier {identifier}  |  "ALL" ["OTHER"] ["BLOB"|"CLOB"] "COLUMNS" ) .
  */
                               
Association = "ASSOCIATION" identifier "TO" identifier "ON" identifier "=" identifier 
                                          { "AND" identifier "=" identifier }
                                          ["USING" "KEY" identifier] .

Types_mesh_stmt =   "TYPES"  identifier ( 
                  "TYPE" ["REF" "TO"] identifier 
                  | 
                  "LIKE" ["REF" "TO"] identifier    ) 
               {Association} 
               "." .
                                                         
stTYPES = "TYPES"( 
          "BEGIN" "OF"(
              "ENUM" identifier  ["STRUCTURE" identifier] 
                            ["BASE" "TYPE" identifier] "." 
                "TYPES" identifier "VALUE" (Expression |"IS" "INITIAL"){"," "TYPES" identifier "VALUE" (Expression |"IS" "INITIAL")} 
              "TYPES" "END" "OF" "ENUM" identifier ["STRUCTURE" identifier]
            | 
              "MESH" identifier"." 
                       {Types_mesh_stmt}
                       "DATA" "END" "OF" "MESH" identifier
            | 
                identifier "." 
                                { "TYPES" identifier["("number")"] (TypeDes|LikeDes) ["BOXED"]  "." }
                                    {stINCLUDE}
                                "TYPES" "END" "OF" identifier
          )  
       |
       identifier["("number")"] /*("TYPE" ( (identifier ["LENGTH" number] 
                                             ["DECIMALS" number]) 
                                | (["LINE" "OF"] identifier) 
                                | ("REF" "TO" identifier) 
                                | ( ((["STANDARD"] "TABLE") 
                                    | ("SORTED" "TABLE") 
                                    |("HASHED" "TABLE")) 
                                    "OF" ["REF" "TO"] identifier 
                                    [ ("WITH" ["UNIQUE"|"NON-UNIQUE"] 
                                         ( ("KEY" [identifier ["ALIAS" identifier] 
                                              "COMPONENTS"] identifier ) 
                                         | ("DEFAULT" "KEY") )  ) 
                                    | ("WITH" "EMPTY" "KEY") ] 
                                    ({"WITH" ("UNIQUE" "HASHED")|(("UNIQUE"|"NON-UNIQUE") "SORTED") 
                                       "KEY" identifier "COMPONENTS" identifier } 
                                     ) 
                                    [("WITH"|"WITHOUT") "FURTHER" "SECONDARY" "KEYS"] 
                                    ["INITIAL" "SIZE" number]) 
                                  | ("RANGE" "OF" identifier ["INITIAL" "SIZE" number]) ) 
                                  | identifier Lob_handle_type {Lob_handle_type}
                               
                                   ) 
                        | ("LIKE" ( (["LINE" "OF"] identifier) 
                                | ("REF" "TO" identifier) 
                                | ( ((["STANDARD"] "TABLE") 
                                    |("SORTED" "TABLE") 
                                    |("HASHED" "TABLE") 
                                    |("ANY" "TABLE") 
                                    |("INDEX" "TABLE")) 
                                    "OF" ["REF" "TO"] identifier 
                                    [ ("WITH" ["UNIQUE"|"NON-UNIQUE"] 
                                         ( ("KEY" [identifier ["ALIAS" identifier] 
                                              "COMPONENTS"] identifier ) 
                                         | ("DEFAULT" "KEY") )) 
                                    | ("WITH" "EMPTY" "KEY") ] 
                                    {"WITH" ("UNIQUE" "HASHED")|(("UNIQUE"|"NON-UNIQUE") "SORTED") 
                                       "KEY" identifier "COMPONENTS" identifier }  
                                    [("WITH"|"WITHOUT") "FURTHER" "SECONDARY" "KEYS"] 
                                    ["INITIAL" "SIZE" number]) 
                                  | ("RANGE" "OF" identifier ["INITIAL" "SIZE" number]) ))*/ 
                           (TypeDes|LikeDes)
         
         )       
      "." .
            
                 
  ForStatement         = "for"  "(" [ Expression ] ";"   [ Expression ]   ";"  [ Expression  ] ")" Statement .


stUPDATE = "UPDATE" Expression
       ["USING" "CLIENT" identifier] | ["CLIENT" "SPECIFIED"] 
       ["CONNECTION" Expression] 
       ( 
            "SET" identifier "=" Expression {"," identifier "=" Expression}
               ["WHERE" Expression]  
       | 
           ( "FROM" identifier|("TABLE" identifier) )
       )".".
       
stWHILE = "WHILE" Expression 
      {
          "VARY" identifier "FROM" identifier "NEXT" identifier ["RANGE" Expression] 
      }"." 
  {Statement} 
"ENDWHILE"".".

       
  CallFunction = "FUNCTION" identifier 
              [ {"IN" "UPDATE" "TASK"} 
               | 
                   {
                    [ 
                        {"STARTING" "NEW" "TASK" identifier} 
                       |
                        {"IN" "BACKGROUND" "TASK" ["AS" "SEPARATE" "UNIT"]}
                    ] 
                    ["DESTINATION" identifier]
                   } 
               | {"IN" "BACKGROUND" "UNIT"} 
              ] 
              [{"CALLING" identifier}|{"PERFORMING" identifier} "ON" "END" "OF" "TASK"] 
              { ["EXPORTING"  {identifier "=" Expression }] 
                ["IMPORTING" {identifier "=" Expression }] 
                ["TABLES" {identifier "=" identifier }] 
                ["CHANGING"   {identifier "=" Expression }] 
                ["EXCEPTIONS" {identifier "=" Expression } 
                            ["error_message" "=" string1] 
                            ["system_failure" "=" string1  ["MESSAGE" string1]] 
                            ["communication_failure" "=" string1 ["MESSAGE" string1]] 
                            ["resource_failure" "=" string1] 
                            ["OTHERS" "=" string1]
                ]
              } 
              | {["PARAMETER-TABLE" identifier] 
                  ["EXCEPTION-TABLE" identifier] } "." . 
                       
                       
  IfStatement          = (. 
                          ret = ""
                          stmts = "" 
                          
                          .)
                      "IF" Expression (. exp = lus .)  "."
                              [{Statement} (. stmts = lus .)] 
                              (.  ret += "if #{exp}\n#{stmts}\n" .)
                             { "ELSEIF" Expression (. exp = lus .) "."
                              [{Statement} (. stmts = lus .) ]
                              (.  ret += "elsif #{exp}\n#{stmts}\n" .)
                              }
                              [ "ELSE" "."   [{Statement}(. stmts = lus .)]   (.  ret += "else #{exp}\n#{stmts}\n" .) ]
                              "ENDIF"
                               (. 
                                ret += "\nend" 
                                  src(ret)
                               .)
                                "." 
                              .

  NullStatement        = "." . 

  ReturnStatement      = "return" [ Expression ]   ";"   .
                         
/*
WhileStatement = "WHILE" Expression 
      {["VARY" identifier "FROM" identifier "NEXT" identifier ["RANGE" identifier] ]}"." 
      {Statement}
      "ENDWHILE" "."
. 
*/

ClassStatement = "CLASS" identifier "DEFINITION" 
                    ( 
                       "DEFERRED" ["PUBLIC"]
                      |
                       ["INHERITING" "FROM" identifier] 
                       ["ABSTRACT"] 
                       ["FINAL"] 
                       ["CREATE" {"PUBLIC"|"PROTECTED"|"PRIVATE"}] 
                       ["SHARED" "MEMORY" "ENABLED"] 
                       ["FOR" "TESTING" 
                         ["RISK" "LEVEL" {"CRITICAL"|"DANGEROUS"|"HARMLESS"}] 
                         ["DURATION"   {"SHORT"|"MEDIUM"|"LONG"}] ] 
                       [
                           ["GLOBAL"] "FRIENDS" identifier {identifier}

                        ]
                    ) "." 
                        
                
  ["PUBLIC" "SECTION" "." 
    {Statement}
  ] 
  ["PROTECTED" "SECTION" "." 
    {Statement}
  ] 
  ["PRIVATE" "SECTION" "." 
    {Statement}
  ] 
"ENDCLASS" "." .


ClassImplStatement = "CLASS" identifier "IMPLEMENTATION" "." 
   {Statement} 
"ENDCLASS" "." .

MethodStatement = "METHOD" identifier "." 
  {Statement} 
"ENDMETHOD" ".".

Typing = (
        "TYPE"    (  ["LINE" "OF"] identifier | "REF" "TO" identifier  |identifier) 
        | "LIKE" [( ["LINE" "OF"] | "REF" "TO" )] identifier 
      
         )
 "." .
         
          
MethodsStatement =  (("METHODS" | "CLASS-METHODS") identifier ( ["ABSTRACT"|"FINAL"] 
            | "FOR" "TESTING" 
            | ["FINAL"] "REDEFINITION"
            |["DEFAULT" ("IGNORE"|"FAIL")] 
             ["FOR" "EVENT" identifier "OF" identifier] 
  [ "IMPORTING" {
                  ("VALUE" "(" identifier ")" | "REFERENCE" "(" identifier ")" | identifier )
                   Typing [("OPTIONAL"|"DEFAULT") identifier] 
                 } 
              ["PREFERRED" "PARAMETER" identifier] ] 
  [ "EXPORTING" {
                  {"VALUE"(identifier)|"REFERENCE"(identifier)|identifier} Typing 
                 }
                  ] 
  [ "CHANGING"  {
              ("VALUE" "(" identifier ")" | "REFERENCE" "(" identifier ")" | identifier )
               Typing [("OPTIONAL"|"DEFAULT") identifier]
               } ] 
  [ "RETURNING" {"VALUE"(identifier)} Typing ] 
  [
       {"RAISING" ("RESUMABLE" "(" identifier ")" | identifier) { ("RESUMABLE" "(" identifier ")" | identifier)}} 
           | 
       {"EXCEPTIONS" identifier {identifier} }
  ]
  )
  | 
  "FOR" "TESTING"
  |
  ["FINAL"] "REDEFINITION"
  )
  "." . 
  
  /*** copy from convert_result ***/
stADD = "ADD"(  identifier "TO" identifier |  ( ( identifier "THEN" identifier "UNTIL" identifier 
      ( ("TO" identifier) | ("GIVING" identifier ["ACCORDING" "TO" identifier]) ) ) 
    | ( identifier "FROM" number "TO" number "GIVING" identifier ) ) 
    ["RANGE" Expression] ) ".".

stADD_CORRESPONDING = "ADD-CORRESPONDING" identifier "TO" identifier".".

stALIASES = "ALIASES" identifier "FOR" identifier"~"identifier".".

stASSERT = "ASSERT" [ ["ID" identifier ["SUBKEY" identifier]] 
         ["FIELDS" identifier ] 
         "CONDITION" ] Expression ".".

stASSIGN = "ASSIGN" ( 
       ["TABLE" "FIELD"] "("identifier")" 
       | ("COMPONENT" identifier "OF" "STRUCTURE" identifier) 
       | Expression 
       |        NameOrRef (
            ["+" number]["("number")"] 
            | ("->"|"=>") ["*"|NameOrRef]
            | "INCREMENT" number
        )) 
  "TO" identifier 
  [ ( "CASTING" [ 
  
              ["TYPE" ["HANDLE"] NameOrRef] ["DECIMALS" number ]
              | ("LIKE" identifier) 
              
              ] ) 
  |  (["TYPE" identifier] ["DECIMALS" number]) ] 
  ["RANGE" Expression]".".

/*AT = "AT"(  "LINE-SELECTION"  |  "SELECTION-SCREEN" [ "OUTPUT" 
                    | ("ON" (par|selcrit)) 
                    | ("ON" "END" "OF" selcrit) 
                    | ("ON" "BLOCK" block) 
                    | ("ON" "RADIOBUTTON" "GROUP" identifier) 
                    | ("ON" ("HELP-REQUEST"|"VALUE-REQUEST") 
                       "FOR" (par|selcrit-low|selcrit-high)) 
                    | ("ON" "EXIT-COMMAND") ] |  "USER-COMMAND" ) ".".*/

stBACK = "BACK"".".

stBREAK_POINT = "BREAK-POINT" [ ("ID" identifier) | "("string1")" ]".".

stCALL = "CALL" (CallFunction | CallBadi | CallDialog | CallCustomerFunction | CallDatabaseProcedure | CallMethod | CallScreen
            | CallSelectionScreen
            | CallTransation
            | CallTransformation
            ) .

CallCustomerFunction = "CUSTOMER-FUNCTION" identifier 
                       ["EXPORTING"  Expression{Expression} ] 
                       ["IMPORTING" Expression{Expression}] 
                       ["CHANGING"  Expression{Expression}] 
                       ["TABLES" Expression{Expression}] 
                       ["EXCEPTIONS" {Expression}
                                   [string1 "=" identifier] 
                                   ["OTHERS" "=" Expression]]   .

CallDialog =  "DIALOG" identifier [ ("AND" "SKIP" "FIRST" "SCREEN") 
                   | ("USING" identifier ["MODE" identifier]) ] 
                   ["EXPORTING" identifier "FROM" identifier  { identifier "FROM" identifier}] 
                   ["IMPORTING"  identifier "TO" identifier { identifier "TO" identifier}] .

CallDatabaseProcedure =  "DATABASE" "PROCEDURE" "("identifier")" 
            ["CONNECTION" (identifier|"("Expression")")] 
              (   ["EXPORTING"  {Expression} ] 
                    ["IMPORTING"  {Expression}  ] 
        |  ["PARAMETER-TABLE" identifier]  ) .
        
CallMethod =  "METHOD" ( 
            (
                ["("]identifier[")" ] ("->"|"=>") ["("]identifier[")" ]
          
             ) 
            ["PARAMETER-TABLE" identifier] 
            ["EXCEPTION-TABLE" identifier] 
            |"OF" identifier identifier ["=" identifier] 
               ["EXPORTING" {Expression} ] 
               ["NO" "FLUSH"] ["QUEUE-ONLY"] ).
CallScreen =       "SCREEN" identifier 
            ["STARTING" "AT" string1 number 
            ["ENDING"   "AT" string1 number]] .
            
CallSelectionScreen = "SELECTION-SCREEN" identifier 
                                    ["STARTING" "AT" string1 number 
                                    ["ENDING"   "AT" string1 number]] 
                                    ["USING" "SELECTION-SET" identifier] .
CallTransation =  "TRANSACTION" identifier "WITH"|"WITHOUT" "AUTHORITY-CHECK" 
                    ( ["AND" "SKIP" "FIRST" "SCREEN"] 
                    | ["USING" identifier 
                             ((["MODE" string1] 
                               ["UPDATE" identifier]) 
                              |["OPTIONS" "FROM" identifier]) 
                             ["MESSAGES" "INTO" identifier]] ).

CallTransformation = "TRANSFORMATION" (NameOrRef) 
                    ["PARAMETERS" ({Expression} |"("identifier")") ] 
                    ["OBJECTS"    ({Expression} |"("identifier")") ] 
                    ["OPTIONS"    {Expression} ] 
                    "SOURCE" ("XML" identifier) 
                         | (({Expression} |"("identifier")")) 
                    "RESULT" ("XML" identifier) 
                         | ( ({Expression} |"("identifier")")) 
                             ["AREA" "HANDLE" identifier ] .
                                                                             
CallBadi = (  "BADI" identifier"->" "(" identifier ")"
          ( ["EXPORTING"  Expression{Expression}] 
            ["IMPORTING" Expression{Expression} ] 
            ["CHANGING"   Expression{Expression} ] 
            ["RECEIVING" Expression ] 
            ["EXCEPTIONS" {Expression}
            ["OTHERS" "=" Expression]]) 
        | (["PARAMETER-TABLE" identifier] 
            ["EXCEPTION-TABLE" identifier] ) 
         ) ".".

stCATCH = "CATCH" "SYSTEM-EXCEPTIONS" {Expression}
                        ["OTHERS" "=" identifier]"." 
  [Statements]
"ENDCATCH"".".

stCHECK = "CHECK" Expression /*|"SELECT-OPTIONS" */ ".".

stCLASS_DATA = "CLASS-DATA" identifier Event_options ".".

stCLASS_EVENTS = "CLASS-EVENTS" identifier Event_options ".".

stCLASS_POOL = "CLASS-POOL" ["MESSAGE-ID" identifier]".".

stCLEAR = "CLEAR" identifier [ ("WITH" identifier ["IN" ("CHARACTER"|"BYTE" ) "MODE"]) 
           | ("WITH" "NULL") ]".".

stCLOSE = "CLOSE"(  "CURSOR" "@"identifier |  "DATASET" identifier ) ".".

stCOLLECT = "COLLECT" identifier "INTO" identifier ( ["ASSIGNING" identifier ["CASTING"]] 
                     | ["REFERENCE" "INTO" identifier] )".".

stCOMMIT = "COMMIT"(  "WORK" ["AND" "WAIT"] |  "CONNECTION" identifier ) ".".

/*COMMUNICATION = "COMMUNICATION" ( ("INIT" "DESTINATION" identifier) 
              | ("ALLOCATE") 
              | ("ACCEPT") 
              | ("SEND" "BUFFER" buf) 
              | ("RECEIVE" "BUFFER" identifier "DATAINFO" identifier "STATUSINFO" identifier) 
              | ("DEALLOCATE") ) "ID" identifier 
              ["RETURNCODE" identifier] 
              ["LENGTH" leng] 
              ["RECEIVED" identifier] 
              ["HOLD"]".".
*/
stCOMPUTE = "COMPUTE" ["EXACT"] identifier ["?"] "=" identifier".".

/*CONCATENATE = "CONCATENATE" ( identifier{identifier} |"LINES" "OF" identifier) 
            "INTO" identifier 
            ["IN" ("CHARACTER"|"BYTE") "MODE"] 
            ["SEPARATED" "BY" sep] 
            ["RESPECTING" "BLANKS"]".".*/

stCONDENSE = "CONDENSE" string1 ["NO-GAPS"]".".

/*CONSTANTS = "CONSTANTS" const options".".*/

stCONTROLS = "CONTROLS" identifier "TYPE" ( "TABLEVIEW" "USING" "SCREEN" identifier ) 
                   | ( "TABSTRIP" )".".

stCONVERT = "CONVERT"(
  
      |  "TEXT" string1 "INTO" "SORTABLE" "CODE" string1 
      |  ( "TIME" "STAMP" string1 "TIME" "ZONE" string1 
          "INTO" ["DATE" string1] ["TIME" string1] ["DAYLIGHT" "SAVING" "TIME" string1] ) 
      | ( "DATE" string1 ["TIME" string1 ["DAYLIGHT" "SAVING" "TIME" string1]] 
          "INTO" "TIME" "STAMP" string1 "TIME" "ZONE" string1 ) ) ".".

stCREATE = "CREATE"(  "DATA" identifier [ "AREA" "HANDLE" identifier ] 
                 [ "TYPE" ( 
                         (["LINE" "OF"] NameOrRef) 
                        | ("REF" "TO" NameOrRef) 
                        | ( ((["STANDARD"] "TABLE") 
                           |("SORTED" "TABLE") 
                           |("HASHED" "TABLE")) 
                           "OF" ["REF" "TO"] NameOrRef
                           [ ("WITH" ["UNIQUE"|"NON-UNIQUE"] 
                                ("KEY" (identifier )|"("identifier")")|("DEFAULT" "KEY")) 
                           | ("WITH" "EMPTY" "KEY") ] 
                           ["INITIAL" "SIZE" number]) 
                        | ("HANDLE" identifier) 
                        (NameOrRef
                                                   ["LENGTH" number] ["DECIMALS" number]) 
                        ) ] 
               | [ "LIKE" ( (["LINE" "OF"] identifier) 
                        | ("REF" "TO" identifier) 
                        | ( ((["STANDARD"] "TABLE") 
                           |("SORTED" "TABLE") 
                           |("HASHED" "TABLE")) 
                           "OF" identifier 
                           [ ("WITH" ["UNIQUE"|"NON-UNIQUE"] 
                                ("KEY" (identifier )|"("identifier")")|("DEFAULT" "KEY")) 
                           | ("WITH" "EMPTY" "KEY") ] 
                           ["INITIAL" "SIZE" number]) ) ] |  "OBJECT" identifier ["AREA" "HANDLE" identifier] 
                   [ ["TYPE" identifier] 
                      ["EXPORTING"  Expression{Expression} ] 
                      ["EXCEPTIONS" Expression{Expression}  ["OTHERS" "=" identifier]] ] 
                 | [ "TYPE" "("identifier")" 
                     ( ["EXPORTING"  Expression{Expression}  ] 
                      ["EXCEPTIONS" Expression{Expression}   ["OTHERS" "=" identifier]]) 
                   | (["PARAMETER-TABLE" identifier] 
                      ["EXCEPTION-TABLE" identifier]) ] |  "OBJECT" identifier identifier ["NO" "FLUSH"] ["QUEUE-ONLY"] ) ".".

/*DELETE = "DELETE" "DATASET" identifier".".*/

stDEMAND = "DEMAND" Expression{Expression}  
       "FROM" "CONTEXT" identifier 
       ["MESSAGES" "INTO" identifier]".".

stDESCRIBE = "DESCRIBE"(  "DISTANCE" "BETWEEN" identifier "AND" identifier "INTO" identifier 
                          "IN" ("BYTE"|"CHARACTER") "MODE" |  "FIELD" identifier 
  ["TYPE" identifier ["COMPONENTS" identifier]] 
  ["LENGTH" number "IN" ("BYTE"|"CHARACTER") "MODE"] 
  ["DECIMALS" number] 
  ["OUTPUT-LENGTH" number] 
  ["HELP-ID" identifier] 
  ["EDIT" "MASK" identifier] |  "LIST" ( ("NUMBER" "OF" ("LINES"|"PAGES") number) 
              | ("LINE" number "PAGE" number) 
              | ("PAGE" number ["LINE-SIZE" number] 
                            ["LINE-COUNT" number] 
                            ["LINES" number] 
                            ["FIRST-LINE" number] 
                            ["TOP-LINES" number] 
                            ["TITLE-LINES" number] 
                            ["HEAD-LINES" number] 
                            ["END-LINES" number]) ) 
              ["INDEX" identifier] |  "TABLE" identifier ["KIND" identifier] ["LINES" number] ["OCCURS" number] ) ".".

stDETAIL = "DETAIL"".".

stDIVIDE = "DIVIDE" identifier "BY" identifier".".

stDIVIDE_CORRESPONDING = "DIVIDE-CORRESPONDING" identifier "BY" identifier ".".

stEDITOR_CALL = "EDITOR-CALL" "FOR" ( ("REPORT" identifier ["DISPLAY-MODE"]) 
                | (identifier ["TITLE" string1] 
                        [("DISPLAY-MODE")|("BACKUP" "INTO" identifier)]) )".".

stEND_OF_PAGE = "END-OF-PAGE"".".

stEND_OF_SELECTION = "END-OF-SELECTION"".".

stEXIT = "EXIT"(  "FROM" "SQL" |  "FROM" "STEP-LOOP" ) ".".

stEXPORT = "EXPORT" ( 
            Expression{Expression}
       | identifier "FROM" identifier {identifier "FROM" identifier }
       | "("identifier")" 
       ) 
            "TO" (
              ( "DATA" "BUFFER" identifier ) 
           | ( "INTERNAL" "TABLE" identifier ) 
           | ( "MEMORY" "ID" identifier ) 
           | ( "DATABASE"      identifier"("identifier")" ["FROM" identifier] identifier "ID" identifier ) 
           | ( ("SHARED" "MEMORY"|"BUFFER") identifier"("identifier")" ["FROM" identifier] ["CLIENT" identifier] "ID" identifier ) 
          ) 
           [ "COMPRESSION" ( "ON" | "OFF" ) ]".".

stEXTRACT = "EXTRACT" identifier ".".

stFIELD_GROUPS = "FIELD-GROUPS" identifier   ".".

stFIELD_SYMBOLS = "FIELD-SYMBOLS" identifier ( Typing | ( "STRUCTURE" identifier "DEFAULT" identifier ) )".".

stFIELDS = "FIELDS" identifier".".

stFIND = "FIND" [("FIRST" "OCCURRENCE")|("ALL" "OCCURRENCES") "OF"] 
     (["SUBSTRING"] string1) | ("REGEX" string1) "IN" 
     ( (["SECTION" ["OFFSET" number] ["LENGTH" number] "OF"] identifier) 
     | ("TABLE" identifier ["FROM" number ["OFFSET" number]] 
                   ["TO"   number ["OFFSET" number]]) ) 
     ["IN" ("CHARACTER"|"BYTE") "MODE"] 
     [("RESPECTING"|"IGNORING") "CASE"] 
     ["MATCH" "COUNT"  number] 
     ( (["MATCH" "LINE"   number] 
        ["MATCH" "OFFSET" number] 
        ["MATCH" "LENGTH" number]) 
     | ["RESULTS" identifier] ) 
     ["SUBMATCHES" string1 ]".".

Format_options = ["COLOR" 
        ( 
            ( ["="] 
                ( 
                    ( "COL_BACKGROUND" 
                    /*    | ("1" | "COL_HEADING" ) 
                        | ("2" | "COL_NORMAL" ) 
                        | ("3" | "COL_TOTAL" ) 
                        | ("4" | "COL_KEY" ) 
                        | ("5" | "COL_POSITIVE" ) 
                        | ("6" | "COL_NEGATIVE" ) 
                        | ("7" | "COL_GROUP" ) */
                        "COL_HEADING" | "COL_NORMAL" | "COL_TOTAL" | "COL_KEY"  | "COL_POSITIVE" | "COL_NEGATIVE" | "COL_GROUP" |number
                    ) ["ON"] 
                ) 
                | "OFF"
            ) 
            | "=" string1
         )] 
       ["INTENSIFIED" [ ("ON"|"OFF")|("=" identifier) ] ] 
       ["INVERSE"     [("ON"|"OFF")|("=" identifier)]] 
       ["HOTSPOT"     [("ON"|"OFF")|("=" identifier)]] 
       ["INPUT"       [("ON"|"OFF")|("=" identifier)]] 
       ["FRAMES"      [("ON"|"OFF")|("=" identifier)]] 
       ["RESET"]
       .

stFORMAT = "FORMAT" Format_options ".".

stFREE = "FREE"(  identifier |  "MEMORY" "ID" identifier |  "OBJECT" identifier ["NO" "FLUSH"] ) ".".

stFUNCTION_POOL = "FUNCTION-POOL" identifier ["NO" "STANDARD" "PAGE" "HEADING"] 
                    ["LINE-SIZE" number] 
                    ["LINE-COUNT" number["("number")"]] 
                    ["MESSAGE-ID" identifier]".".

stGENERATE = "GENERATE" "SUBROUTINE" "POOL" identifier "NAME" identifier 
  ["MESSAGE" string1] 
  ["INCLUDE" string1] 
  ["LINE" number] 
  ["WORD" string1] 
  ["OFFSET" Expression] 
  ["MESSAGE-ID" identifier] 
  ["SHORTDUMP-ID" identifier]".".



stGET = "GET"( 
   "BADI" ( identifier ["FILTERS" Expression{Expression} ] ) 
       | ( identifier "TYPE" "("identifier")" 
              [ ("FILTERS" Exps ) 
              | ("FILTER-TABLE" identifier)] ) 
              ["CONTEXT" identifier] |  "BIT" number "OF" string1 "INTO" identifier |  "CURSOR" ( ( "FIELD" identifier 
                ["VALUE" string1] 
                ["LENGTH" number] 
                [["DISPLAY"|"MEMORY"] "OFFSET" number] 
                ["LINE" number] 
                ["AREA" identifier] ) 
           | ( "LINE" number 
                ["VALUE" string1] 
                ["LENGTH" number] 
                [["DISPLAY"|"MEMORY"] "OFFSET" number] ) ) |  "DATASET" identifier ["POSITION" number] ["ATTRIBUTES" identifier] |  "LOCALE" "LANGUAGE" identifier "COUNTRY" string1 "MODIFIER" string1 |  "PARAMETER" "ID" identifier "FIELD" identifier |  "PF-STATUS" string1 ["PROGRAM" identifier] ["EXCLUDING" identifier] |  "PROPERTY" "OF" identifier identifier "=" identifier ["NO" "FLUSH"] ["QUEUE-ONLY"] 
                                ["EXPORTING" Exps ] |  "REFERENCE" "OF" identifier "INTO" identifier |  "RUN" "TIME" "FIELD" identifier |  ("TIME" (["FIELD" identifier] |   "STAMP" "FIELD" identifier) )) ".".

stHIDE = "HIDE" identifier".".

stIMPORT = "IMPORT"(  ( Exps 
       | ( identifier "TO" identifier  {identifier "TO" identifier} ) 
       | (identifier) ) 
  "FROM" ( ( "DATA" "BUFFER" identifier ) 
       | ( "INTERNAL" "TABLE" identifier ) 
       | ( "MEMORY" "ID" identifier ) 
       | ( "DATABASE"      identifier "(" identifier ")" ["TO" identifier] ["CLIENT" identifier] 
                                   ("ID" identifier)|("MAJOR-ID" identifier ["MINOR-ID" identifier]) ) 
       | ( "SHARED" ("BUFFER" |"MEMORY") identifier"("identifier")" ["TO" identifier] ["CLIENT" identifier] "ID" identifier ) 
       
        ) 
       [ ( ( ( (["ACCEPTING" "PADDING"] ["ACCEPTING" "TRUNCATION"]) 
             |  ["IGNORING" "STRUCTURE" "BOUNDARIES"] ) 
             [ "IGNORING" "CONVERSION" "ERRORS" 
               ["REPLACEMENT" "CHARACTER" identifier] ] ) 
         | ["IN" "CHAR-TO-HEX" "MODE"] ) ] 
       ["CODE" "PAGE" "INTO" identifier] 
       ["ENDIAN" "INTO" identifier] |  "DIRECTORY" "INTO" identifier 
  "FROM" "DATABASE" identifier"("identifier")" ["TO" identifier] ["CLIENT" identifier] "ID" identifier ) ".".

stINCLUDE = "INCLUDE"(  identifier ["IF" "FOUND"] |  ( ("TYPE" identifier) | ("STRUCTURE" identifier) ) 
        ["AS" identifier ["RENAMING" "WITH" "SUFFIX" string1]] ) ".".

stINFOTYPES = "INFOTYPES" identifier ["NAME" identifier] 
               ["OCCURS" number] 
               ["MODE" identifier] 
               ["VALID" "FROM" Expression "TO" Expression] 
               ["AS" "PERSON" "TABLE"]".".

stINITIALIZATION = "INITIALIZATION"".".

stINPUT = "INPUT"".".

stINSERT = "INSERT"(  
/* INSERT dbtab */
        ( ("INTO" (identifier|"("Expression")")
          ["USING" "CLIENT" identifier] | ["CLIENT" "SPECIFIED"] 
          ["CONNECTION" (identifier|"("Expression")")] 
          "VALUES" identifier) 
           | 
           ( (identifier|"("Expression")")
           ["USING" "CLIENT" identifier] | ["CLIENT" "SPECIFIED"] 
           ["CONNECTION" (identifier|"("Expression")")] 
           "FROM" identifier|("TABLE" identifier ["ACCEPTING" "DUPLICATE" "KEYS"])|( stSELECT ) )
       )
       |  ( identifier 
           | ("INITIAL" "LINE") 
           | ("LINES" "OF" identifier ["FROM" identifier] ["TO" identifier] ["USING" "KEY" NameOrRef]) 
          ) 
          "INTO" ( ("TABLE" identifier) 
                   | (identifier "INDEX" identifier) 
                   | (identifier) 
                 ) 
       [ ("ASSIGNING" identifier ["CASTING"]) | ("REFERENCE" "INTO" identifier ) ] |  "REPORT" identifier "FROM" identifier 
              ["MAXIMUM" "WIDTH" "INTO" identifier] 
              ( ["KEEPING" "DIRECTORY" "ENTRY"] 
              | ( ["PROGRAM" "TYPE" identifier] 
                  ["FIXED-POINT" "ARITHMETIC" identifier] 
                  ["VERSION"|("UNICODE" "ENABLING") identifier ] ) 
              | ["DIRECTORY" "ENTRY" string1] ) |  "TEXTPOOL" identifier "FROM" identifier "LANGUAGE" identifier ) ".".

stINTERFACE = "INTERFACE"(  identifier"." 
  [identifier] 
"ENDINTERFACE" | "LOAD" |  identifier ("DEFERRED" ["PUBLIC"])  ) ".".

stINTERFACE_POOL = "INTERFACE-POOL"".".

stINTERFACES = "INTERFACES" identifier 
  ["PARTIALLY" "IMPLEMENTED"] 
  ( ( ["ABSTRACT" "METHODS" identifier ] 
      ["FINAL" "METHODS" identifier ] ) 
    | ["ALL" "METHODS" ("ABSTRACT"|"FINAL")] ) 
  ["DATA" "VALUES" Exps ]".".

stLEAVE = "LEAVE" (  
            "LIST-PROCESSING"
             |  "PROGRAM" 
             |  "SCREEN"  
             |  "TO" ( "TRANSACTION" identifier | "CURRENT" "TRANSACTION" | "LIST-PROCESSING" ["AND" "RETURN" "TO" "SCREEN" identifier] | "SCREEN" identifier ) 
         ["AND" "SKIP" "FIRST" "SCREEN"] 
         ) ".".

stLOAD_OF_PROGRAM = "LOAD-OF-PROGRAM"".".

stLOCAL = "LOCAL" identifier".".

stLOG_POINT = "LOG-POINT" "ID" identifier 
          ["SUBKEY" identifier] 
          ["FIELDS" identifier ]".".

stMAXIMUM = "MAXIMUM" identifier".".

stMINIMUM = "MINIMUM" identifier".".

stMODULE = "MODULE" string1 ("OUTPUT"|["INPUT"])"." 
  (Statements)
"ENDMODULE"".".

stMULTIPLY = "MULTIPLY" identifier "BY" identifier".".

stMULTIPLY_CORRESPONDING = "MULTIPLY-CORRESPONDING" identifier "BY" identifier".".

stNEW_LINE = "NEW-LINE" ["NO-SCROLLING"|"SCROLLING"]".".

stNEW_PAGE = "NEW-PAGE" ["WITH-TITLE"|"NO-TITLE"] 
         ["WITH-HEADING"|"NO-HEADING"] 
         ["LINE-COUNT" number] 
         ["LINE-SIZE" number] 
         ["NO-TOPOFPAGE"] 
         [ ( "PRINT" "ON" ["NEW-SECTION"] 
                       "PARAMETERS" identifier 
                      ["ARCHIVE" "PARAMETERS" identifier] 
                       "NO" "DIALOG" ) 
         | ( "PRINT" "OFF" ) ]".".

stNEW_SECTION = "NEW-SECTION"".".

stNODES = "NODES" identifier ["TYPE" identifier]".".

stOVERLAY = "OVERLAY" string1 "WITH" string1 ["ONLY" string1]".".

stPACK = "PACK" identifier "TO" identifier ".".

stPARAMETERS = "PARAMETERS" ( identifier [("("number")" |  "LENGTH" number)] ) 
           [ ("TYPE" identifier ["DECIMALS" number]) 
                   | ("LIKE" ["("]identifier[")"]) 
           ] 
           [ 
               (["OBLIGATORY"|"NO-DISPLAY"] ["VISIBLE" "LENGTH" number]) 
               | ("AS"  (
                       "CHECKBOX" ["USER-COMMAND" identifier] 
                       |
                       "LISTBOX" "VISIBLE" "LENGTH" number 
                                       ["USER-COMMAND" identifier] ["OBLIGATORY"]
                        )
                    ) 
               | ("RADIOBUTTON" "GROUP" identifier ["USER-COMMAND" identifier ]) 
             
           ] 
           ["MODIF" "ID" identifier] 
           ["DEFAULT" string1] 
           ["LOWER" "CASE"] 
           ["MATCHCODE" "OBJECT" identifier] 
           ["MEMORY" "ID" identifier] 
           ["VALUE" "CHECK"] 
           ["FOR" ("TABLE"|"NODE") identifier 
              ["HELP-REQUEST"] 
              ["VALUE-REQUEST"] 
              ["AS" "SEARCH" "PATTERN"]]".".

stPERFORM = "PERFORM" ( ( ( identifier 
            | Expression ("IN" "PROGRAM" [NameOrRef] ["IF" "FOUND"] | ["IF" "FOUND"])
            | (number "OF" identifier ) 
            
         ) 
            ["TABLES" identifier ] 
            ["USING" identifier ] 
            ["CHANGING" identifier ] ) 
        | ( "ON" ( ("COMMIT" ["LEVEL" identifier]) 
               | "ROLLBACK" ) ) )".".

stPOSITION = "POSITION" number".".

stPRINT_CONTROL = "PRINT-CONTROL"   ( "INDEX-LINE" number ) ".".

stPROGRAM = "PROGRAM" identifier ["NO" "STANDARD" "PAGE" "HEADING"] 
             ["LINE-SIZE" number] 
             ["LINE-COUNT" number["("number")"]] 
             ["MESSAGE-ID" identifier] 
             ["REDUCED" "FUNCTIONALITY"]".".

stRANGES = "RANGES" identifier "FOR" identifier ["OCCURS" number]".".

stRECEIVE = "RECEIVE" "RESULTS" "FROM" "FUNCTION" identifier 
                ["KEEPING" "TASK"] 
                ["IMPORTING" Exps ] 
                ["TABLES" Exps ] 
                ["EXCEPTIONS" {Expression} 
                            [identifier "=" identifier ["MESSAGE" string1]] 
                            [identifier "=" identifier ["MESSAGE" string1]] 
                            ["OTHERS" "=" identifier]]  ".".

stREFRESH = "REFRESH"(  identifier |  "CONTROL" identifier "FROM" "SCREEN" identifier |  identifier "FROM" "TABLE" identifier ) ".".

stREJECT = "REJECT" "["identifier"]" ".".

stREPLACE = "REPLACE"(  ( ( [("FIRST" "OCCURRENCE")|("ALL" "OCCURRENCES" "OF")] 
            (["SUBSTRING"] string1) | ("REGEX" string1) "IN" 
            ( (["SECTION" ["OFFSET" number] ["LENGTH" number] "OF"] identifier) 
            | ("TABLE" identifier ["FROM" number ["OFFSET" number]] 
                          ["TO"   number ["OFFSET" number]]) ) 
            "WITH" identifier 
            ["IN" ("CHARACTER"|"BYTE") "MODE"] 
            [("RESPECTING"|"IGNORING") "CASE"] 
            ["REPLACEMENT" "COUNT"  number] 
            ( (["REPLACEMENT" "OFFSET" number] 
               ["REPLACEMENT" "LENGTH" number] 
               ["REPLACEMENT" "LINE"   number]) 
            | ["RESULTS" identifier] ) ) 
        | ( "SECTION" ["OFFSET" number] ["LENGTH" number] "OF" identifier 
            "WITH" identifier 
            ["IN" ("CHARACTER"|"BYTE") "MODE"] ) ) |  string1 "WITH" identifier "INTO" identifier 
        ["IN" ("BYTE"|"CHARACTER") "MODE"] 
        ["LENGTH" number] ) ".".

stRESERVE = "RESERVE" number "LINES"".".

stRESUME = "RESUME"".".

stRETRY = "RETRY"".".

stRETURN = "RETURN"".".

stROLLBACK = "ROLLBACK"(  "WORK" |  "CONNECTION" identifier ) ".".

stSCROLL = "SCROLL" "LIST" [ ( "TO" "COLUMN" string1 ) 
            | ( ("LEFT"|"RIGHT") ["BY" number "PLACES"] ) ] 
            [ ( "TO" ( ("FIRST" "PAGE") 
                   | ("LAST" "PAGE") 
                   | ("PAGE" number) ) 
                   ["LINE" number ] ) 
              | ( ("FORWARD"|"BACKWARD") [number "PAGES"] ) ] 
            ["INDEX" identifier]".".

stSELECT_OPTIONS = "SELECT-OPTIONS" identifier "FOR" NameOrRef
              ["OBLIGATORY"|"NO-DISPLAY"] 
              ["VISIBLE" "LENGTH" number] 
              ["NO-EXTENSION"] 
              ["NO" "INTERVALS"] 
              ["MODIF" "ID" identifier] 
              ["DEFAULT" string1 ["TO" identifier] ["OPTION" Expression] ["SIGN" identifier]] 
              ["LOWER" "CASE"] 
              ["MATCHCODE" "OBJECT" identifier] 
              ["MEMORY" "ID" identifier] 
              ["NO" "DATABASE" "SELECTION"] 
              ["HELP-REQUEST"  ["FOR" ("LOW"|"HIGH")]] 
              ["VALUE-REQUEST" ["FOR" ("LOW"|"HIGH")]]".".

stSELECTION_SCREEN = "SELECTION-SCREEN" "TAB" (number) identifier "USER-COMMAND" identifier 
                ["DEFAULT" ["PROGRAM" identifier] "SCREEN" identifier] 
                ["MODIF" "ID" identifier] 
                ["FOR" ("TABLE"|"NODE") identifier ["ID" identifier]]".".

stSET = "SET"(  "ASSOCIATION" identifier ( "=" identifier ) 
                        | ( "LIKE" identifier    ) 
                        | ( "INITIAL" ) |  "BIT" number "OF" string1 ["TO" identifier] |  "BLANK" "LINES" ("ON"|"OFF") |  "COUNTRY" string1 |  "CURSOR" ( ( "FIELD" identifier ["LINE" number] 
                     [["DISPLAY"|"MEMORY"] "OFFSET" identifier] ) 
           | ( "LINE" number 
                    [["DISPLAY"|"MEMORY"] "OFFSET" identifier] ) 
           | ( string1 number ) ) |  "DATASET" identifier ["POSITION" (number|("END" "OF" "FILE"))] 
                 ["ATTRIBUTES" identifier] |  "EXTENDED" "CHECK" ("ON"|"OFF") |  "HANDLER" identifier  
            ["FOR" identifier|("ALL" "INSTANCES")] 
            ["ACTIVATION" identifier] |  "HOLD" "DATA" ("ON"|"OFF") |  "LANGUAGE" identifier |  "LEFT" "SCROLL-BOUNDARY" ["COLUMN" string1] |  "LOCALE" "LANGUAGE" identifier ["COUNTRY" string1] ["MODIFIER" string1] |  "MARGIN" number [number] |  "PARAMETER" "ID" identifier "FIELD" identifier |  "PF-STATUS" string1 ["OF" "PROGRAM" identifier] 
                     ["EXCLUDING" identifier] 
                     ["IMMEDIATELY"] |  "PROPERTY" "OF" identifier identifier "=" identifier ["NO" "FLUSH"] 
                                ["EXPORTING" Exps ]
                                |
                                  "RUN" "TIME" ("ANALYZER" ("ON"|"OFF") 
                                  |   "CLOCK" "RESOLUTION" ("HIGH"|"LOW") )
                                |  "SCREEN" identifier |  "TITLEBAR" string1 ["OF" "PROGRAM" identifier] 
                   ["WITH" string1  string1] |  "UPDATE" "TASK" "LOCAL" |  "USER-COMMAND" identifier ) ".".

stSHIFT = "SHIFT" identifier [ ( [ ("BY" number "PLACES") | ("UP" "TO" string1) ] 
                 ["LEFT"|"RIGHT"] ["CIRCULAR"] ) 
           | ( ("LEFT" "DELETING" "LEADING") 
             | ("RIGHT" "DELETING" "TRAILING") string1) ] 
           ["IN" ("CHARACTER"|"BYTE") "MODE"]".".

stSKIP = "SKIP" ( [number] 
     | ("TO" "LINE" number) )".".


stSTOP = "STOP"".".

stSUBTRACT = "SUBTRACT" identifier "FROM" identifier".".

stSUBTRACT_CORRESPONDING = "SUBTRACT-CORRESPONDING" identifier "FROM" identifier".".

stSUM = "SUM"".".

stSUMMARY = "SUMMARY"".".

stSUMMING = "SUMMING" identifier".".

stSUPPLY = "SUPPLY" Exps  "TO" "CONTEXT" identifier ".".

stSUPPRESS = "SUPPRESS" "DIALOG"".".

stSYNTAX_CHECK = "SYNTAX-CHECK" "FOR" identifier "MESSAGE" string1 "LINE" number "WORD" string1 
                 ["PROGRAM" identifier] ["DIRECTORY" "ENTRY" string1] 
                 ["WITH" "CURRENT" "SWITCHSTATES"] 
                 ["INCLUDE" string1] 
                 ["OFFSET" number] 
                 ["MESSAGE-ID" identifier]".".

stTEST_INJECTION = "TEST-INJECTION" identifier "." 
  [Statements] 
"END-TEST-INJECTION"".".

stTEST_SEAM = "TEST-SEAM" identifier"." 
  [Statements] 
"END-TEST-SEAM"".".

stTOP_OF_PAGE = "TOP-OF-PAGE" ["DURING" "LINE-SELECTION"]".".

stTRANSFER = "TRANSFER" identifier "TO" identifier ["LENGTH" number] 
                      ["NO" "END" "OF" "LINE"]".".

stTRANSLATE = "TRANSLATE" identifier ("TO" ("UPPER"|"LOWER") "CASE") 
             | ("USING" string1)".".

stTRUNCATE = "TRUNCATE" "DATASET" identifier "AT" ("CURRENT" "POSITION")|("POSITION" number)".".

stTYPE_POOL = "TYPE-POOL" identifier ".".

stTYPE_POOLS = "TYPE-POOLS" identifier ".".

stULINE = "ULINE" (["AT"] ["/"] [number] [ "("number")"]) ["NO-GAP"]".".

stUNASSIGN = "UNASSIGN"".".

stUNPACK = "UNPACK" identifier "TO" identifier ".".

stWAIT = "WAIT" ("UP" "TO" number "SECONDS") 
   | ("FOR" ["ASYNCHRONOUS" "TASKS" "UNTIL" Expression ["UP" "TO" number "SECONDS"]] 
          ["MESSAGING" "CHANNELS" "UNTIL" Expression ["UP" "TO" number "SECONDS"]] 
          ["PUSH" "CHANNELS" "UNTIL" Expression ["UP" "TO" number "SECONDS"]])".".

stWINDOW = "WINDOW" "STARTING" "AT" string1 number 
       ["ENDING"  "AT" string1 number]".".  
  

  
  /********************************/

stSPLIT = "SPLIT" identifier "AT" Expression "INTO" 
      ( identifier{identifier } | "TABLE" identifier )
      ["IN" {"CHARACTER"|"BYTE"} "MODE"] . 
      
  Expression           =  Conditional { AssignmentOperator Expression   }  .

  Conditional          =  LogORExp  .

  LogORExp             =  LogANDExp   { ("||" | "OR" | "EQUIV") LogANDExp }  .

  LogANDExp            =  InclORExp   { ("&&" | "AND") InclORExp }
 
.

  InclORExp            =  ExclORExp   { "|" ExclORExp }   .

  ExclORExp            =  ANDExp      { "^" ANDExp }    .

  ANDExp               =  EqualExp    { "&" EqualExp }    .

  EqualExp             =    RelationExp { ( "="| "EQ"| "<>" | "NE" | "IS" ["NOT"] ) RelationExp } |
  RelationExp ["NOT"] "BETWEEN" RelationExp "AND" RelationExp  
  .

  RelationExp          =    ShiftExp    { 
                              ( "<" | "LT"  | ">" | "GT" | "<=" | "LE" | ">=" | "GE" | "CO" | "CN" | "CA" | "NA" | "CS" | "NS" | "CP" | "NP" |"BYTE-CO" | "BYTE-CN" | "BYTE-CA" | "BYTE-NA" | "BYTE-CS" | "BYTE-NS" )  
                               ShiftExp   }   .

  ShiftExp             =  AddExp      { ( "<<" | ">>" ) AddExp }       .
              
                
                
  AddExp               =  MultExp     { ( "+"  | "-"  ) MultExp }    .

  MultExp              =   CastExp  
 { ( "*"   | "/" | "DIV"  | "%"  | "MOD" | "**" ) CastExp }    .

  CastExp              =   UnaryExp     .



  UnaryExp             =  PostFixExp
                         | ( "++" | "--" ) UnaryExp
                         | UnaryOperator CastExp 	
                            
					.



  PostFixExp           =  Primary
                         { "[" Expression "]"
                          | FunctionCall
                          | "->" identifier
                          | "=>" identifier
                          | "++"
                          | "--"
                         }    .   
  
  Primary              =  ( identifier | string1 | char | number | "(" Expression ")" |PredefinedConstant )   .

  FunctionCall        =  "("   [ ActualParameters] ")"      .

  ActualParameters    =    Expression   { "," Expression   }      .

  AssignmentOperator   =    "="  | "*=" | "/=" | "%=" | "+=" | "-=" | "&="
                         | "^=" | "|=" | "<<=" | ">>="    .

  UnaryOperator        =  "+" | MinusOperator | "*" | "!" | "&" | "~" | "NOT" |  "INSTANCE" "OF" | "IN"    .

  MinusOperator = space1 "-" | "-" space1 .

  PredefinedConstant = "INITIAL" | "BOUND" | "ASSIGNED" | "SUPPLIED" | "REQUESTED" .

END C.




abap
