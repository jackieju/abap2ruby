COMPILER C

CHARACTERS
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit    = "0123456789" .
  hexdigit = digit + "ABCDEFabcdef" .
  tab      = CHR(9) .
  eol      = CHR(10) .
  files    = letter + digit + ":\." .
  chars    = CHR(32) .. CHR(255) - '"' .
  strings  = CHR(32) .. CHR(255) - "'".
  strings1 = CHR(32) .. CHR(255) - '"' - "#{" .	
  macros   = ANY - eol .
  space = CHR(32).

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "\"" TO eol

IGNORE
  tab + eol + CHR(13)

TOKENS
  identifier = ( "_" | letter) { "_" | "-" | letter | digit } .
  number     = digit { digit } [ "." { digit }] [ "U" | "u" | "L" | "l" ] .
  hexnumber  = "0" ( "x" | "X" ) hexdigit { hexdigit } [ "U" | "u" | "L" | "l" ] .
  string1     = "'" { strings } "'" .
  char       = '"' [ "\\" ] chars '"' .
   Colon = ":" .
  space1 = space .

PRAGMAS

  PreProcessor = "#" ( letter ) .
		    

PRODUCTIONS


    C                    =     "REPORT"  identifier "."

    { Statements } EOF .

    Type = identifier .


  Statement            = (. ret = "" .)
                         ( 
                         (. ret += .) VariableDefineStatement|
                         (. ret += .) WriteStatement |
						 (. ret += .) AssignmentStatement | (. ret += .) BreakStatement
                           | (. ret += .) ContinueStatement
                           | (. ret += .) DoStatement | (. ret += .) ForStatement
                           | (. ret += .) IfStatement  | NullStatement
                           | (. ret += .) ReturnStatement 
                           | (. ret += .) WhileStatement 
                           | (. ret += .) LoopStatement 
                           | (. ret += .) CaseStatement
                           | (. ret += .) CallFunctionStatement
                           | ClassStatement
                           | ClassImplStatement
                           | MethodStatement
                           | MethodsStatement
                         ) 
                           (. return ret .)
 .

LoopStatement = "LOOP" "." Statements "ENDLOOP" "." .

VariableDefineStatement =  "DATA" identifier[(number)] 
            (
                "TYPE"    
                ( 
                      identifier (["LENGTH" number] ["DECIMALS" string1] | { "READER"|"LOCATOR"|"LOB" "HANDLE" } )
                      | ["LINE" "OF"] identifier ["BOXED"]
                      | "REF" "TO" identifier 
                      | 
                          {
                              {["STANDARD"] "TABLE"} 
                              |{"SORTED" "TABLE"} 
                              |{"HASHED" "TABLE"}
                          } 
                          "OF" ["REF" "TO"] identifier 
                          [
                               {"WITH" ["UNIQUE"|"NON-UNIQUE"] 
                                   {
                                        {"KEY" [identifier ["ALIAS" identifier] "COMPONENTS"] {identifier}} 
                                        | {"DEFAULT" "KEY"} 
                                    }
                                } 
                                | {"WITH" "EMPTY" "KEY"}
                          ] 
                          { 
                              [ 
                                  "WITH" {"UNIQUE" "HASHED"}
                                  | { {"UNIQUE"|"NON-UNIQUE"} "SORTED"} "KEY" identifier "COMPONENTS" {identifier}
                              ] 
                               
                           } 
                          ["INITIAL" "SIZE" number] 
                          ["WITH" "HEADER" "LINE"]
                         
                       | "RANGE" "OF" Type ["INITIAL" "SIZE" number] ["WITH" "HEADER" "LINE"] 
                       | { "WRITER"|"LOCATOR" } "FOR" { "COLUMNS" {identifier} } 
                       |  "ALL" ["OTHER"] ["BLOB"|"CLOB"] "COLUMNS" 
                 
                          
                ) 
            
              | 
              [
                  "LIKE" 
                  {
                 
                      ["LINE" "OF"] identifier
                     | "REF" "TO" identifier
                     |  
                         {
                              ["STANDARD"] "TABLE" 
                              |"SORTED" "TABLE"
                              |"HASHED" "TABLE"
                         } 
                         "OF" ["REF" "TO"] identifier
                         [
                          
                                  "WITH" ["UNIQUE"|"NON-UNIQUE"] 
                                   {
                                    "KEY" [identifier ["ALIAS" identifier] "COMPONENTS"] {identifier} 
                                   |
                                    "DEFAULT" "KEY"
                                   }
                          
                              | "WITH" "EMPTY" "KEY"
                         ] 
                         {
                              
                              "WITH" {"UNIQUE" "HASHED"}
                              |
                              {
                                  {"UNIQUE"|"NON-UNIQUE"} "SORTED"
                                }
                                "KEY" identifier "COMPONENTS" {identifier}
                            
                         } 
                         ["INITIAL" "SIZE" number] 
                         ["WITH" "HEADER" "LINE"]
                    
                      |  
                     "RANGE" "OF" identifier ["INITIAL" "SIZE" number] ["WITH" "HEADER" "LINE"]
                                         
                   }
             ] ["VALUE" { Expression | "IS" "INITIAL" }] 
                ["READ-ONLY"] 
            )
                "." .



WriteStatement =  "WRITE" {["AT"] ["/"][number][ "(" (number | "*" | "**") ")" ]} Expression 
  ["UNDER" identifier] 
  ["NO-GAP"] 
  ["LEFT-JUSTIFIED"|"CENTERED"|"RIGHT-JUSTIFIED"] 
  { 
    
      ["EXPONENT" Expression] 
      ["NO-GROUPING"] 
      ["NO-SIGN"] 
      ["NO-ZERO"] 
      ["CURRENCY" string1] 
      { 
           ["DECIMALS" string1] ["ROUND" number]  
        | ["UNIT" string1] 
        } 
     
    | { ["ENVIRONMENT" "TIME" "FORMAT"] 
        ["TIME" "ZONE" string1] } 
    ["STYLE" string1] 
  } 
  ["USING" { "NO" "EDIT" "MASK"| "EDIT" "MASK" string1}] 
  ["DD/MM/YY"|"MM/DD/YY"|"DD/MM/YYYY"|"MM/DD/YYYY"|"DDMMYY"|"MMDDYY"|"YYMMDD"] 
  ["COLOR" 
      {
         ["="] 
            { { Primary } ["ON"] } 
            | "OFF"
              
        |
         "=" number
     }
  ] 
  ["INTENSIFIED" [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["INVERSE"     [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["HOTSPOT"     [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["INPUT"       [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["FRAMES"      [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["RESET"] 
  { 
      "AS" ("CHECKBOX" | "ICON" | "SYMBOL"  | "LINE")
  } 
  ["QUICKINFO" string1] "." . 

  AssignmentStatement =  Expression ";" .

  BreakStatement       = "break"  ";" .


  Statements = (. s = "" .){ (.s += .) Statement } (. return s .).

  ContinueStatement    = "CONTINUE"  "."  .

  DoStatement          = "DO" [number "TIMES"] {"VARYING" identifier "FROM" identifier "NEXT" identifier ["RANGE" number] } "." 
  Statements
"ENDDO" "." .

CaseStatement = 
    "CASE" Expression "." 
      {"WHEN" Expression {"OR" Expression } "." 
        Statements} 
      ["WHEN" "OTHERS" "." 
        Statements] 
    "ENDCASE" "." .

  ForStatement         = "for"  "(" [ Expression ] ";"   [ Expression ]   ";"  [ Expression  ] ")" Statement .

  CallFunctionStatement = "CALL" "FUNCTION" identifier 
              [ {"IN" "UPDATE" "TASK"} 
               | 
                   {
                    [ 
                        {"STARTING" "NEW" "TASK" identifier} 
                       |
                        {"IN" "BACKGROUND" "TASK" ["AS" "SEPARATE" "UNIT"]}
                    ] 
                    ["DESTINATION" identifier]
                   } 
               | {"IN" "BACKGROUND" "UNIT"} 
              ] 
              [{"CALLING" identifier}|{"PERFORMING" identifier} "ON" "END" "OF" "TASK"] 
              { ["EXPORTING"  {identifier "=" Expression }] 
                ["IMPORTING" {identifier "=" Expression }] 
                ["TABLES" {identifier "=" identifier }] 
                ["CHANGING"   {identifier "=" Expression }] 
                ["EXCEPTIONS" {identifier "=" Expression } 
                            ["error_message" "=" string1] 
                            ["system_failure" "=" string1  ["MESSAGE" string1]] 
                            ["communication_failure" "=" string1 ["MESSAGE" string1]] 
                            ["resource_failure" "=" string1] 
                            ["OTHERS" "=" string1]
                ]
              } 
              | {["PARAMETER-TABLE" identifier] 
                  ["EXCEPTION-TABLE" identifier] } "." . 
                       
                       
  IfStatement          = "IF" Expression "."
                              [Statements] 
                             { "ELSEIF" Expression "."
                              [Statements]
                              }
                              [ "ELSE" "."   [Statements]   ]
                              "ENDIF" "." 
                              .

  NullStatement        = "." . 

  ReturnStatement      = "return" [ Expression ]   ";"   .
                         

  WhileStatement = "WHILE" Expression 
      {["VARY" identifier "FROM" identifier "NEXT" identifier ["RANGE" identifier] ]}"." 
      [Statements] 
      "ENDWHILE" "."
. 

ClassStatement = "CLASS" identifier "DEFINITION" ["INHERITING" "FROM" identifier] 
                       ["ABSTRACT"] 
                       ["FINAL"] 
                       ["CREATE" {"PUBLIC"|"PROTECTED"|"PRIVATE"}] 
                       ["SHARED" "MEMORY" "ENABLED"] 
                       ["FOR" "TESTING" 
                         ["RISK" "LEVEL" {"CRITICAL"|"DANGEROUS"|"HARMLESS"}] 
                         ["DURATION"   {"SHORT"|"MEDIUM"|"LONG"}] ] 
                       [
                           ["GLOBAL"] "FRIENDS" identifier {identifier}

                        ] "." 
  ["PUBLIC" "SECTION" "." 
    Statements
  ] 
  ["PROTECTED" "SECTION" "." 
    Statements
  ] 
  ["PRIVATE" "SECTION" "." 
    Statements
  ] 
"ENDCLASS" "." .


ClassImplStatement = "CLASS" identifier "IMPLEMENTATION" "." 
   Statements 
"ENDCLASS" "." .

MethodStatement = "METHOD" identifier "." 
  Statements 
"ENDMETHOD" ".".

Typing = (
        "TYPE" identifier  
        | "LIKE" identifier 
        |  "TYPE" ( ["LINE" "OF"] identifier | "REF" "TO" identifier ) 
        |  "LIKE" ( ["LINE" "OF"] identifier 
         | "REF" "TO" identifier) 
         )
 "." .
         
          
MethodsStatement = "METHODS" identifier ["ABSTRACT"|"FINAL"] 
            |["DEFAULT" ("IGNORE"|"FAIL")] 
             ["FOR" "EVENT" identifier "OF" identifier] 
  [ "IMPORTING" {
                  ("VALUE" "(" identifier ")" | "REFERENCE" "(" identifier ")" | identifier )
                   Typing [("OPTIONAL"|"DEFAULT") identifier] 
                 } 
              ["PREFERRED" "PARAMETER" identifier] ] 
  [ "EXPORTING" {
                  {"VALUE"(identifier)|"REFERENCE"(identifier)|identifier} Typing 
                 }
                  ] 
  [ "CHANGING"  {
              ("VALUE" "(" identifier ")" | "REFERENCE" "(" identifier ")" | identifier )
               Typing [("OPTIONAL"|"DEFAULT") identifier]
               } ] 
  [ "RETURNING" {"VALUE"(identifier)} Typing ] 
  [
       {"RAISING" (identifier| "RESUMABLE" "(" identifier ")" ) } 
           | 
       {"EXCEPTIONS" identifier {identifier} }
  ] "." . 


  Expression           = Conditional { AssignmentOperator Expression   }.

  Conditional          = LogORExp .

  LogORExp             = LogANDExp   { ("||" | "OR" | "EQUIV") LogANDExp } .

  LogANDExp            = InclORExp   { ("&&" | "AND") InclORExp }

.

  InclORExp            = ExclORExp   { "|" ExclORExp } .

  ExclORExp            = ANDExp      { "^" ANDExp } .

  ANDExp               = EqualExp    { "&" EqualExp } .

  EqualExp             =   RelationExp { ( "="| "EQ"| "<>" | "NE"  ) RelationExp } .

  RelationExp          =   ShiftExp    { ( "<" | "LT"  | ">" | "GT" | "<=" | "LE" | ">=" | "GE"|"CO"|"CN"|"CA"|"NA"|"CS"|"NS"|"CP"|"NP" 
                |"BYTE-CO"|"BYTE-CN"|"BYTE-CA"|"BYTE-NA"|"BYTE-CS"|"BYTE-NS"
                )   ShiftExp   }
  .

  ShiftExp             = AddExp      { ( "<<" | ">>" ) AddExp } .
              
                
                
  AddExp               = MultExp     { ( "+"  | "-"  ) MultExp } .

  MultExp              =   CastExp  
 { ( "*"   | "/" | "DIV"  | "%"  | "MOD" | "**" ) CastExp } .

  CastExp              =  UnaryExp  .



  UnaryExp             = PostFixExp
                         | ( "++" | "--" ) UnaryExp
                         | UnaryOperator CastExp 	
					.



  PostFixExp           = Primary
                         { "[" Expression "]"
                          | FunctionCall
                          | "->" identifier
                          | "++"
                          | "--"
                         } .   
  
  Primary              = identifier | string1 | char | number | "(" Expression ")" .

  FunctionCall        = "("   [ ActualParameters] ")"   .

  ActualParameters    =   Expression   { "," Expression   }   .

  AssignmentOperator   =   "="  | "*=" | "/=" | "%=" | "+=" | "-=" | "&="
                         | "^=" | "|=" | "<<=" | ">>=" .

  UnaryOperator        = "+" | MinusOperator | "*" | "!" | "&" | "~" | "NOT".

  MinusOperator = space1 "-" | "-" space1 .


END C.




