COMPILER C

CHARACTERS
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit    = "0123456789" .
  hexdigit = digit + "ABCDEFabcdef" .
  tab      = CHR(9) .
  eol      = CHR(10) .
  files    = letter + digit + ":\." .
  chars    = CHR(32) .. CHR(255) - '"' .
  strings  = CHR(32) .. CHR(255) - "'".
  strings1 = CHR(32) .. CHR(255) - '"' .	
  macros   = ANY - eol .
  space = CHR(32).

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "\"" TO eol

IGNORE
  tab + eol + CHR(13)

TOKENS
  identifier = ( "_" | letter) { "_" | "-" | letter | digit } .
  number     = digit { digit } [ "U" | "u" | "L" | "l" ] .
  hexnumber  = "0" ( "x" | "X" ) hexdigit { hexdigit } [ "U" | "u" | "L" | "l" ] .
  string1     = "'" { strings } "'" .
  char       = '"' [ "\\" ] chars '"' .
   Colon = ":" .
  space1 = space .

PRAGMAS

  PreProcessor = "#" ( letter ) .
		    

PRODUCTIONS



    C                  =      (ReportDef | FunctionDef) .
    
    ReportDef          = "REPORT" (.  fn_name=curString() .) identifier  (. src("") .) 
    ["NO" "STANDARD" "PAGE" "HEADING"] 
               ["LINE-SIZE" number] 
               ["LINE-COUNT" number["("number")"]] 
               ["MESSAGE-ID" identifier] 
               ["DEFINING" "DATABASE" identifier] 
               ["REDUCED" "FUNCTIONALITY"] "."
    {Statement}
                       (.
                         @root_class.add_method(fn_name, "()", [], src, "")
                       .)
                    EOF .

    FunctionDef = "FUNCTION" (.  fn_name=curString() .) identifier "."  (. src("") .) 
                    {Statement}
                  (.
                             @root_class.add_method(fn_name, "()", [], src, "")
                  .)
                    "ENDFUNCTION" "." .

    Type = identifier .


  Statement            = 
  (. ps() .)
  
                         (
                              VariableDefineStatement
                             |  WriteStatement 
                             | AssignmentStatement 
                             | BreakStatement
                             | ContinueStatement
                             | DO
                             | ForStatement
                             | IfStatement  
                             | NullStatement
                             |  ReturnStatement 
                             |  WHILE 
                             |  LoopStatement 
                             |  CaseStatement
                             |  CallFunctionStatement
                             | (
                                  ClassStatement
                                  | ClassImplStatement
                                )
                             | MethodStatement
                             | MethodsStatement
                             | FunctionDef
                             | DescribeStatement
                             | MessasgeStatement
                             | RefreshStatement
                             | SearchStatement
                             | CONCATENATE
                             | APPEND
                             | SPLIT
                             | RAISE
                             | CONSTANTS
                             | NN
                             | MOVE
                             | WITH
                             | TABLES
                             | AUTHORITY_CHECK
                             | DELETE
                             | EVENTS
                             | MODIFY
                             | ON
                             | OPEN
                             | FETCH
                             | PROVIDE
                             | READ
                             | SORT
                             | SUBMIT
                             | INCLUDE
                             | TRY
                       /*      | STRUCTURE
                             | BASE
                             | TYPE
                             | UPDATE*/
                         )
                           
 .
 
SELECT = "SELECT" ".".

WITHLINE =  "+" identifier [( identifier {"," identifier} )] "AS" identifier {"," "+" identifier [( identifier {"," identifier} )] "AS" identifier}
   SELECT "." . 

WITH = "WITH" 
  WITHLINE { WITHLINE }
 
"ENDWITH".
 
 
TABLES = "TABLES" ["*"] identifier "." . 

 
MOVE =  "MOVE" 
          ["EXACT"] Expression  ["TO"|"?TO"] Expression
     [  "PERCENTAGE" Expression ["LEFT"|"RIGHT"] ]
        
    . 
    
    
NN = "AA" "at" (["PPP"] number ["LEFT"|"CENTER"] string1  | CC ).
CC =  identifier ["RIGHT"] .
 
APPEND = "APPEND" (identifier 
        | {"INITIAL" "LINE"} 
        | {"LINES" "OF" identifier ["FROM" identifier] ["TO" identifier] ["USING" "KEY" string1]}
         )
    "TO" identifier {"[""]"}
    ["SORTED" "BY" string1] 
    [ ("ASSIGNING" string1 ["CASTING"] | "REFERENCE" "INTO" identifier ) ] "." .
 
 CONCATENATE = "CONCATENATE" (identifier {identifier}
             | "LINES" "OF" identifier
             )
             "INTO" identifier 
             ["IN" ("CHARACTER"|"BYTE") "MODE"] 
             ["SEPARATED" "BY" string1] 
             ["RESPECTING" "BLANKS"] ".".
 
 SearchStatement = "SEARCH" identifier "FOR" string1 
      ["IN" ("CHARACTER"|"BYTE") "MODE"] 
      ["STARTING" "AT" Expression] ["ENDING" "AT" Expression] 
      ["ABBREVIATED"] 
      ["AND" "MARK"] "." . 

RefreshStatement = "REFRESH" ("CONTROL" identifier "FROM" "SCREEN" identifier
 | identifier["[""]"] ["FROM" "TABLE" identifier] ).
 


DescribeStatement = "DESCRIBE" (
          ( "FIELD" identifier 
          ["TYPE" identifier ["COMPONENTS" identifier]] 
          ["LENGTH" Expression "IN" {"BYTE"|"CHARACTER"} "MODE"] 
          ["DECIMALS" string1] 
          ["OUTPUT-LENGTH" number] 
          ["HELP-ID" identifier] 
          ["EDIT" "MASK" identifier]
          )
        | ("DISTANCE" "BETWEEN" identifier "AND" identifier "INTO" identifier 
                          "IN" {"BYTE"|"CHARACTER"} "MODE" )

        | ("LIST" { {"NUMBER" "OF" {"LINES"|"PAGES"} number} 
              | {"LINE" number "PAGE" number} 
              | {"PAGE" number ["LINE-SIZE" number] 
                            ["LINE-COUNT" number] 
                            ["LINES" number] 
                            ["FIRST-LINE" number] 
                            ["TOP-LINES" number] 
                            ["TITLE-LINES" number] 
                            ["HEAD-LINES" number] 
                            ["END-LINES" number]} } 
              ["INDEX" identifier]
              )
        | ( "TABLE" identifier ["KIND" identifier] ["LINES" number] ["OCCURS" number] )
        )
        "." .

RAISE = "RAISE" (identifier
|  "EVENT" identifier ["EXPORTING" Expression {Expression}]
| ["RESUMABLE"] "EXCEPTION" 
  [  
      ( "TYPE" identifier 
          [ 
              "MESSAGE" identifier "(" identifier ")" 
              | { "ID" identifier "TYPE" identifier "NUMBER" Expression }   ["WITH" identifier {identifier} ]
          ] 
         ["EXPORTING" Expression {Expression}] 
       
     | identifier
     )
 ]
)
.

MessasgeStatement = "MESSAGE"
         {(
         ( identifier [ ( "(" identifier ")" | (  "TYPE" identifier) ) ] )
        | ( "ID" identifier "TYPE" identifier "NUMBER" number )
        
        | (string1 "TYPE" identifier)
         )} 
         
        [(
        (["DISPLAY" "LIKE" identifier] 
            ["RAISING" identifier] )
        | ("INTO" string1)
        )]
        ["WITH" identifier {identifier}] "." . 


GroupBy = "GROUP" "BY" (identifier 
                        | ( Expression {Expression} [ identifier "=" "GROUP" "SIZE"] [ identifier "=" "GROUP" "INDEX"]) 
                        )
                            [("ASCENDING"|"DESCENDING") ["AS" "TEXT"]] 
                            ["WITHOUT" "MEMBERS"] 
                            [ 
                                "INTO" identifier 
                              | "ASSIGNING" identifier
                              | "REFERENCE" "INTO" identifier
                            ] .
                            
LoopStatement = "LOOP" [ 
            "AT" ( 
                  ( identifier ["VERSION" string1]
                    | (
                       identifier ( 
                                   "INTO" identifier  
                                 |  "ASSIGNING" identifier ["CASTING"] 
                                 |  "REFERENCE" "INTO" identifier 
                                 |  "TRANSPORTING" "NO" "FIELDS" 
                                  )
                          [ "USING" "KEY" (identifier|"("identifier")" )] 
                          [ "FROM" identifier] ["TO" identifier] ["WHERE" Expression ] 
                          [ GroupBy
                         ]
                      )
                  )
                |
                 "GROUP" identifier ( 
                               "INTO" identifier  
                             |  "ASSIGNING" identifier ["CASTING"] 
                             |  "REFERENCE" "INTO" identifier 
                             |  "TRANSPORTING" "NO" "FIELDS" 
                              )
                                   ["WHERE" Expression] 
                                   [GroupBy]
                | "SCREEN" "INTO" identifier
               )
             ] "." 
            {Statement} 
        "ENDLOOP" "." .

TypeDes = "TYPE"    identifier (["LENGTH" number] ["DECIMALS" number] | { "READER"|"LOCATOR"|"LOB" "HANDLE" } )
                      | ["LINE" "OF"] identifier ["BOXED"]
                      | "REF" "TO" identifier 
                      | 
                          {
                              {["STANDARD"] "TABLE"} 
                              |{"SORTED" "TABLE"} 
                              |{"HASHED" "TABLE"}
                          } 
                          "OF" ["REF" "TO"] identifier 
                          [
                               {"WITH" ["UNIQUE"|"NON-UNIQUE"] 
                                   {
                                        {"KEY" [identifier ["ALIAS" identifier] "COMPONENTS"] {identifier}} 
                                        | {"DEFAULT" "KEY"} 
                                    }
                                } 
                                | {"WITH" "EMPTY" "KEY"}
                          ] 
                          { 
                              [ 
                                  "WITH" {"UNIQUE" "HASHED"}
                                  | { {"UNIQUE"|"NON-UNIQUE"} "SORTED"} "KEY" identifier "COMPONENTS" {identifier}
                              ] 
                               
                           } 
                          ["INITIAL" "SIZE" number] 
                          ["WITH" "HEADER" "LINE"]
                         
                       | "RANGE" "OF" Type ["INITIAL" "SIZE" number] ["WITH" "HEADER" "LINE"] 
                       | { "WRITER"|"LOCATOR" } "FOR" { "COLUMNS" {identifier} } 
                       |  "ALL" ["OTHER"] ["BLOB"|"CLOB"] "COLUMNS" 
                 .
                 
LikeDes =        "LIKE" 
                  (
                      ["LINE" "OF"] identifier
                     | "REF" "TO" identifier
                     |  
                         {
                              ["STANDARD"] "TABLE" 
                              |"SORTED" "TABLE"
                              |"HASHED" "TABLE"
                         } 
                         "OF" ["REF" "TO"] identifier
                         [
                          
                                  "WITH" ["UNIQUE"|"NON-UNIQUE"] 
                                   {
                                    "KEY" [identifier ["ALIAS" identifier] "COMPONENTS"] {identifier} 
                                   |
                                    "DEFAULT" "KEY"
                                   }
                          
                              | "WITH" "EMPTY" "KEY"
                         ] 
                         {
                              
                              "WITH" {"UNIQUE" "HASHED"}
                              |
                              {
                                  {"UNIQUE"|"NON-UNIQUE"} "SORTED"
                                }
                                "KEY" identifier "COMPONENTS" {identifier}
                            
                         } 
                         ["INITIAL" "SIZE" number] 
                         ["WITH" "HEADER" "LINE"]
                    
                      |  
                     "RANGE" "OF" identifier ["INITIAL" "SIZE" number] ["WITH" "HEADER" "LINE"]
                                         
                   ).
 
                 
VariableDefineStatement =  "DATA" ( identifier { "(" number  ")" }
                ( TypeDes | LikeDes)
                ["VALUE" { Expression | "IS" "INITIAL" }] 
                ["READ-ONLY"] 
                |
                "BEGIN" "OF" ( identifier ["READ-ONLY"] ["OCCURS" number] | "COMMON" "PART" identifier)
                |
                "END" "OF" (identifier ["VALID" "BETWEEN" Expression "AND" Expression] | "COMMON" "PART" identifier )
                )
                    "." .
                    



CONSTANTS = "CONSTANTS" identifier ( TypeDes | 
               LikeDes
                ) "VALUE" { Expression | "IS" "INITIAL" } "." .


WriteStatement =   (. param_hash = {} .) "WRITE" {["AT"] ["/"][number 
 (. param_hash["col"] = curString().to_i .)
 ][ "(" (number | "*" | "**") ")" ]} Expression 
 (.
     param_hash["s"] = popv
 .)
  ["UNDER" identifier] 
  ["NO-GAP"] 
  ["LEFT-JUSTIFIED"|"CENTERED"|"RIGHT-JUSTIFIED"] 
  { 
    
      ["EXPONENT" Expression] 
      ["NO-GROUPING"] 
      ["NO-SIGN"] 
      ["NO-ZERO"] 
      ["CURRENCY" string1] 
      { 
           ["DECIMALS" string1] ["ROUND" number]  
        | ["UNIT" string1] 
        } 
     
    | { ["ENVIRONMENT" "TIME" "FORMAT"] 
        ["TIME" "ZONE" string1] } 
    ["STYLE" string1] 
  } 
  ["USING" { "NO" "EDIT" "MASK"| "EDIT" "MASK" string1}] 
  ["DD/MM/YY"|"MM/DD/YY"|"DD/MM/YYYY"|"MM/DD/YYYY"|"DDMMYY"|"MMDDYY"|"YYMMDD"] 
  ["COLOR" 
      {
         ["="] 
            { { Primary } ["ON"] } 
            | "OFF"
              
        |
         "=" number
     }
  ] 
  ["INTENSIFIED" [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["INVERSE"     [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["HOTSPOT"     [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["INPUT"       [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["FRAMES"      [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["RESET"] 
  { 
      "AS" ("CHECKBOX" | "ICON" | "SYMBOL"  | "LINE")
  } 
  ["QUICKINFO" string1] 
  
  |
  
    (identifier|"("identifier")") "TO" identifier 
  ["LEFT-JUSTIFIED"|"CENTERED"|"RIGHT-JUSTIFIED"] 
  ( ( ["EXPONENT" Expression] 
      ["NO-GROUPING"] 
      ["NO-SIGN"] 
      ["NO-ZERO"] 
      ["CURRENCY" string1] 
      ( ( ["DECIMALS" number] 
          ["ROUND" number] ) 
        | ["UNIT" string1] ) ) 
    | ( ["ENVIRONMENT" "TIME" "FORMAT"] 
        ["TIME" "ZONE" string1] ) 
    ["STYLE" string1] ) 
  ["USING" ( ("NO" "EDIT" "MASK")|("EDIT" "MASK" identifier) )] 
  ["DD/MM/YY"|"MM/DD/YY"|"DD/MM/YYYY"|"MM/DD/YYYY"|"DDMMYY"|"MMDDYY"|"YYMMDD"] 
    "." 
  (.
  
  params = []
  param_hash.each{|k,v|
      params.push "#{k}: #{v}"
  }
  src("write(#{params.join(", ")})\n")
  .)
  . 

  AssignmentStatement =  Expression  .

  BreakStatement       = "break"   .


  Statements =  Statement { Statement } .

  ContinueStatement    = "CONTINUE"  "."  .

/*
  DoStatement          = "DO" [number "TIMES"] {"VARYING" identifier "FROM" identifier "NEXT" identifier ["RANGE" number] } "." 
  {Statement}
"ENDDO" "." .
*/

CaseStatement = 
    "CASE" Expression "." 
      {"WHEN" Expression {"OR" Expression } "." 
        {Statement}} 
      ["WHEN" "OTHERS" "." 
        {Statement}] 
    "ENDCASE" "." .

AUTHORITY_CHECK_ITEM = "ID" identifier ("FIELD" Expression|"DUMMY") .

AUTHORITY_CHECK = "AUTHORITY-CHECK" "OBJECT" identifier ["FOR" "USER" string1] 
                     AUTHORITY_CHECK_ITEM { AUTHORITY_CHECK_ITEM }
                      "." .
                      
DELETE = "DELETE"(  "DATASET" identifier |  ( ( "FROM" Expression
           ["USING" "CLIENT" identifier] | ["CLIENT" "SPECIFIED"] 
           ["CONNECTION" (identifier|"("Expression")")] 
           ["WHERE" Expression] ["ORDER" "BY" identifier{"," identifier} ["OFFSET" number]] ["UP" "TO" number "ROWS"] ) 
       | ( ( identifier|"(" Expression ")") ["CLIENT" "SPECIFIED"] 
                                      ["CONNECTION" (identifier|"("Expression")")] ) 
           "FROM" identifier |("TABLE" identifier) ) |  ( ( ("TABLE" identifier 
            (("FROM" identifier ["USING" "KEY" (identifier|"("identifier")")]) 
            |("WITH" "TABLE" "KEY" [(identifier|"("identifier")")"COMPONENTS"] 
                             ["("] identifier [")"] "=" identifier 
                              ))) 
         | (identifier "INDEX" identifier ["USING" "KEY" ["("] identifier [")"]]) 
         | (identifier ["USING" "KEY" identifier]) ) 
       | (identifier ["USING" "KEY" ["("] identifier [")"]] 
               ["FROM" identifier] ["TO" identifier] ["WHERE" ["("] Expression [")"]] 
       | ("ADJACENT" "DUPLICATES" "FROM" identifier 
           [ "USING" "KEY" ["("] identifier [")"]] 
           ["COMPARING" identifier |("ALL" "FIELDS")]) ) |  "FROM" ( ("MEMORY" "ID" number) 
            | ("DATABASE"      identifier"("identifier")" ["CLIENT" identifier] "ID" number) 
            | ("SHARED" "MEMORY" identifier"("identifier")" ["CLIENT" identifier] "ID" number) 
            | ("SHARED" "BUFFER" identifier"("identifier")" ["CLIENT" identifier] "ID" number) ) ) ) ".".

VARYING = "VARYING" identifier "FROM" identifier "NEXT" identifier ["RANGE" Expression] .

DO = "DO" [number "TIMES"] {VARYING} "." 
  {Statement}
"ENDDO"".".

EVENT_EXP_ITEM = "VALUE"(Expression) Typing 
                         ["OPTIONAL"|("DEFAULT" Expression)] .
                         
EVENTS = "EVENTS" identifier [ "EXPORTING" EVENT_EXP_ITEM {EVENT_EXP_ITEM}
                       ]".".


MODIFY = "MODIFY"(  identifier|"("Expression")" 
       ["USING" "CLIENT" identifier] | ["CLIENT" "SPECIFIED"] 
       ["CONNECTION" (identifier|"("Expression")")] 
       "FROM" ( identifier|("TABLE" identifier) ) 
       |
         ( ( ( ("TABLE" identifier)|(identifier "INDEX" identifier) 
             ["USING" "KEY" ["("] identifier [")"]] ) 
             | ( identifier ["USING" "KEY" identifier] ) 
           "FROM" identifier 
           ["TRANSPORTING" identifier ] 
           [("ASSIGNING" string1 ["CASTING"])|("REFERENCE" "INTO" identifier)] ) 
           | (identifier "FROM" identifier ["USING" "KEY" ["("] identifier [")"]] 
                       "TRANSPORTING" identifier  
                       "WHERE" "("Expression")") ) 
       |  
         ( 
             ("LINE" number ["OF" ("PAGE" number)|("CURRENT" "PAGE")] ["INDEX" identifier]) 
             |
            ("CURRENT" "LINE") ) 
           ["LINE" "VALUE" "FROM" identifier] 
           ["FIELD" "VALUE" identifier ["FROM" identifier] {identifier ["FROM" identifier]}] 
           ["LINE" "FORMAT" Format_options] 
           ["FIELD" "FORMAT" identifier Format_options {identifier Format_options} ] 
       |
         "SCREEN" "FROM" identifier ) ".".

ON = "ON" "CHANGE" "OF" identifier {"OR" identifier }"." 
  Statements 
"ENDON"".".

SQLCondition = Expression .

OPEN = "OPEN" ( 
     "CURSOR" ["WITH" "HOLD"] "@"identifier "FOR" 
      [ "WITH"    ("+" identifier "AS" identifier) {"," "+" identifier "AS" identifier} ]
  "SELECT" (
           Expression{"," Expression} "FROM" identifier{"," identifier} 
           | 
           "FROM" identifier{"," identifier} "FIELDS"  Expression{"," Expression}
          ) 
         [["FOR" "ALL" "ENTRIES" "IN" identifier] "WHERE" SQLCondition] 
         [GroupBy] ["HAVING" SQLCondition] 
         ["ORDER" "BY" identifier{","identifier} ] 
         ["OFFSET" number] 
         ["UP" "TO" number "ROWS"] 
         ["BYPASSING" "BUFFER"] 
         ["CONNECTION" identifier|"(" Expression ")"]
          | 
         
         "DATASET" identifier 
  "FOR" ( "INPUT" | "OUTPUT" | "APPENDING" | "UPDATE" ) 
  "IN" ( ( "BINARY" "MODE" ) 
     | ( "TEXT" "MODE" "ENCODING" ( "DEFAULT" 
                            | ("UTF-8" ["SKIPPING"|"WITH" "BYTE-ORDER" "MARK"]) 
                            | "NON-UNICODE" ) 
                   ["WITH" ("NATIVE"|"SMART"|"UNIX"|"WINDOWS") "LINEFEED"]  ) 
     | ( "LEGACY" "BINARY" "MODE" [("BIG"|"LITTLE") "ENDIAN"] 
                            ["CODE" "PAGE" identifier] ) 
     | ( "LEGACY" "TEXT" "MODE" [("BIG"|"LITTLE") "ENDIAN"] 
                          ["CODE" "PAGE" identifier] 
                          ["WITH" ("NATIVE"|"SMART"|"UNIX"|"WINDOWS") "LINEFEED"] ) ) 
  ["AT" "POSITION" number] 
  ["TYPE" identifier] 
  ["FILTER" identifier] 
  ["MESSAGE" string1] 
  ["IGNORING" "CONVERSION" "ERRORS"] 
  ["REPLACEMENT" "CHARACTER" char] ) ".".

FETCH = "FETCH" "NEXT" "CURSOR" identifier 
    ( ( "INTO" ( (["CORRESPONDING" "FIELDS" "OF"] identifier) | identifier{"," identifier} ) ) 
    | ( "INTO"|"APPENDING" ["CORRESPONDING" "FIELDS" "OF"] "TABLE" identifier 
                       ["PACKAGE" "SIZE" number] ) ) 
      [ "EXTENDED" "RESULT" "@"identifier ]".".

ProvideFields = "FIELDS" ("*"| identifier {identifier}) 
               "FROM" identifier "INTO" identifier "VALID" identifier  
               "BOUNDS" number "AND" number 
               ["WHERE" Expression] .


               
PROVIDE = "PROVIDE" ProvideFields {ProvideFields}
       
        "BETWEEN" number "AND" number 
        ["INCLUDING" "GAPS"]"." 
  Statements 
"ENDPROVIDE"".".
                       
READ = "READ" (
      "DATASET" identifier "INTO" identifier ["MAXIMUM" "LENGTH" number] 
                            [["ACTUAL"] "LENGTH" number] |  ( ("LINE" number [("OF" "PAGE" number)|("OF" "CURRENT" "PAGE")] ["INDEX" identifier]) 
                                                            | ("CURRENT" "LINE") ) 
                                                                    ["LINE" "VALUE" "INTO" identifier] 
     ["FIELD" "VALUE" identifier ["INTO" identifier] {identifier ["INTO" identifier] }]
      |  "REPORT" identifier "INTO" identifier ["MAXIMUM" "WIDTH" "INTO" number]
       |
         "TABLE" identifier ["WITH" "KEY" identifier] 
                 ["SEARCH" ("FKEQ"|"FKGE"|"GKEQ"|"GKGE")] 
                 ["VERSION" string1]
       |
        "TABLE" identifier 
           ( (("FROM" identifier ["USING" "KEY" ["("] identifier [")"]]) 
             |("WITH" "TABLE" "KEY" [identifier|"("identifier")" "COMPONENTS"] 
                              ["("]identifier[")"] "=" identifier { ["("]identifier[")"] "=" identifier }
                              
                              ) 
             | ("WITH" "KEY" identifier "=" identifier {identifier "=" identifier} ["BINARY" "SEARCH"]) 
             | ("WITH" "KEY" ["("] identifier [")"] 
                         "COMPONENTS" identifier "=" identifier {identifier "=" identifier } ) 
             | ("INDEX" identifier ["USING" "KEY" ["("]identifier[")"] ]) ) 
             | ("WITH" "KEY" ["="]identifier ["BINARY" "SEARCH"]) 
            ) 
           ( ("INTO" identifier 
              ["COMPARING" ( (identifier{identifier} )|("ALL" "FIELDS")|("NO" "FIELDS") )] 
              ["TRANSPORTING" ( (identifier{identifier} )|("ALL" "FIELDS") )]) 
           | ( "ASSIGNING" identifier ["CASTING"] ) 
           | ( "REFERENCE" "INTO" identifier ) 
           | ("TRANSPORTING" "NO" "FIELDS") )
    |
     "TEXTPOOL" identifier "INTO" identifier "LANGUAGE" identifier ) ".".
       

SORT = "SORT" identifier ["STABLE"] 
          ( ( ["ASCENDING"|"DESCENDING"] 
              ["AS" "TEXT"] 
              ["BY" (identifier ["ASCENDING"|"DESCENDING"] ["AS" "TEXT"]) {identifier ["ASCENDING"|"DESCENDING"] ["AS" "TEXT"]}] ) 
          | ( ["BY" (identifier)] ) 
          | ( ["BY" Expression] ) )".".

SUBMIT = "SUBMIT" (identifier|"("identifier")") 
  ["USING" "SELECTION-SCREEN" identifier] 
  ["VIA" "SELECTION-SCREEN"] 
  ["USING" "SELECTION-SET" identifier] 
  ["USING" "SELECTION-SETS" "OF" "PROGRAM" identifier] 
  ["WITH" "SELECTION-TABLE" identifier] 
  {
      "WITH" identifier ( (("EQ"|"NE"|"CP"|"NP"|"GE"|"LT"|"LE"|"GT") identifier ["SIGN" string1]) 
              | (["NOT"] "BETWEEN" identifier "AND" identifier ["SIGN" string1]) 
              | ("IN" identifier) )
  }
  ["WITH" "FREE" "SELECTIONS" string1] 
  ["LINE-SIZE" number] 
  ["LINE-COUNT" number] 
  ( ["EXPORTING" "LIST" "TO" "MEMORY"] 
  | ["TO" "SAP-SPOOL" "SPOOL" "PARAMETERS" identifier 
                  ["ARCHIVE" "PARAMETERS" identifier] 
                  "WITHOUT" "SPOOL" "DYNPRO"] ) 
  [["USER" string1] "VIA" "JOB" identifier "NUMBER" number ["LANGUAGE" identifier]] 
  ["AND" "RETURN"]".".
  
TRY = "TRY""." 
    {Statement}
  {
      "CATCH" ["BEFORE" "UNWIND"] identifier  ["INTO" identifier]"." 
        {Statement}
  }
  
  ["CLEANUP" ["INTO" identifier]"." 
    {Statement}] 
"ENDTRY"".".

Lob_handle_type =  ( "READER"|"LOCATOR"|"LOB" "HANDLE"|"WRITER" ) 
                   "FOR" 
                   ( "COLUMNS" identifier {identifier}  |  "ALL" ["OTHER"] ["BLOB"|"CLOB"] "COLUMNS" ) .
                               
ASSOCIATION = "ASSOCIATION" identifier "TO" identifier "ON" identifier "=" identifier 
                                          { "AND" identifier "=" identifier }
                                          ["USING" "KEY" identifier] .
Types_mesh_stmt =   "TYPES"  identifier ( 
                  "TYPE" (["REF" "TO"] identifier)|identifier 
                  | 
                  "LIKE" (["REF" "TO"] identifier      )|identifier     ) 
               {ASSOCIATION} 
               "." .
                                                         
TYPES = "TYPES"(  identifier[(number)] ("TYPE" ( (identifier ["LENGTH" number] 
                                      ["DECIMALS" number]) 
                         | (["LINE" "OF"] identifier) 
                         | ("REF" "TO" identifier) 
                         | ( ((["STANDARD"] "TABLE") 
                             | ("SORTED" "TABLE") 
                             |("HASHED" "TABLE")) 
                             "OF" ["REF" "TO"] identifier 
                             [ ("WITH" ["UNIQUE"|"NON-UNIQUE"] 
                                  ( ("KEY" [identifier ["ALIAS" identifier] 
                                       "COMPONENTS"] identifier ) 
                                  | ("DEFAULT" "KEY") )  ) 
                             | ("WITH" "EMPTY" "KEY") ] 
                             ({"WITH" ("UNIQUE" "HASHED")|(("UNIQUE"|"NON-UNIQUE") "SORTED") 
                                "KEY" identifier "COMPONENTS" identifier } 
                              ) 
                             [("WITH"|"WITHOUT") "FURTHER" "SECONDARY" "KEYS"] 
                             ["INITIAL" "SIZE" number]) 
                           | ("RANGE" "OF" identifier ["INITIAL" "SIZE" number]) ) 
                           | identifier Lob_handle_type {Lob_handle_type}
                               
                            ) 
                 | ("LIKE" ( (["LINE" "OF"] identifier) 
                         | ("REF" "TO" identifier) 
                         | ( ((["STANDARD"] "TABLE") 
                             |("SORTED" "TABLE") 
                             |("HASHED" "TABLE") 
                             |("ANY" "TABLE") 
                             |("INDEX" "TABLE")) 
                             "OF" ["REF" "TO"] identifier 
                             [ ("WITH" ["UNIQUE"|"NON-UNIQUE"] 
                                  ( ("KEY" [identifier ["ALIAS" identifier] 
                                       "COMPONENTS"] identifier ) 
                                  | ("DEFAULT" "KEY") )) 
                             | ("WITH" "EMPTY" "KEY") ] 
                             {"WITH" ("UNIQUE" "HASHED")|(("UNIQUE"|"NON-UNIQUE") "SORTED") 
                                "KEY" identifier "COMPONENTS" identifier }  
                             [("WITH"|"WITHOUT") "FURTHER" "SECONDARY" "KEYS"] 
                             ["INITIAL" "SIZE" number]) 
                           | ("RANGE" "OF" identifier ["INITIAL" "SIZE" number]) )) |  "BEGIN" "OF" identifier "." 
  {TYPES|INCLUDE}
 
 
"DATA" "END" "OF" identifier
         |
          "BEGIN" "OF" "ENUM" identifier  [STRUCTURE identifier] 
              [BASE TYPE identifier] "." 
  "TYPES" identifier "VALUE" (Expression |"IS" "INITIAL"){"," "TYPES" identifier "VALUE" (Expression |"IS" "INITIAL")} 
"TYPES" "END" "OF" "ENUM" identifier [STRUCTURE identifier] 
        | 
         "BEGIN" "OF" "MESH" identifier"." 
         {Types_mesh_stmt}
         "DATA" "END" "OF" "MESH" identifier 
        |  identifier ( ("TYPE" ["REF" "TO"] identifier) 
            | ("LIKE" ["REF" "TO"] identifier) ) "OCCURS" number ) "." .
            
                 
  ForStatement         = "for"  "(" [ Expression ] ";"   [ Expression ]   ";"  [ Expression  ] ")" Statement .


UPDATE = "UPDATE" Expression
       ["USING" "CLIENT" identifier] | ["CLIENT" "SPECIFIED"] 
       ["CONNECTION" Expression] 
       ( 
            "SET" identifier "=" Expression {"," identifier "=" Expression}
               ["WHERE" Expression]  
       | 
           ( "FROM" identifier|("TABLE" identifier) )
       )".".
       
WHILE = "WHILE" Expression 
      {
          "VARY" identifier "FROM" identifier "NEXT" identifier ["RANGE" Expression] 
      }"." 
  {Statement} 
"ENDWHILE"".".

       
  CallFunctionStatement = "CALL" "FUNCTION" identifier 
              [ {"IN" "UPDATE" "TASK"} 
               | 
                   {
                    [ 
                        {"STARTING" "NEW" "TASK" identifier} 
                       |
                        {"IN" "BACKGROUND" "TASK" ["AS" "SEPARATE" "UNIT"]}
                    ] 
                    ["DESTINATION" identifier]
                   } 
               | {"IN" "BACKGROUND" "UNIT"} 
              ] 
              [{"CALLING" identifier}|{"PERFORMING" identifier} "ON" "END" "OF" "TASK"] 
              { ["EXPORTING"  {identifier "=" Expression }] 
                ["IMPORTING" {identifier "=" Expression }] 
                ["TABLES" {identifier "=" identifier }] 
                ["CHANGING"   {identifier "=" Expression }] 
                ["EXCEPTIONS" {identifier "=" Expression } 
                            ["error_message" "=" string1] 
                            ["system_failure" "=" string1  ["MESSAGE" string1]] 
                            ["communication_failure" "=" string1 ["MESSAGE" string1]] 
                            ["resource_failure" "=" string1] 
                            ["OTHERS" "=" string1]
                ]
              } 
              | {["PARAMETER-TABLE" identifier] 
                  ["EXCEPTION-TABLE" identifier] } "." . 
                       
                       
  IfStatement          = (. 
                          ret = ""
                          stmts = "" 
                          
                          .)
                      "IF" Expression (. exp = lus .)  "."
                              [{Statement} (. stmts = lus .)] 
                              (.  ret += "if #{exp}\n#{stmts}\n" .)
                             { "ELSEIF" Expression (. exp = lus .) "."
                              [{Statement} (. stmts = lus .) ]
                              (.  ret += "elsif #{exp}\n#{stmts}\n" .)
                              }
                              [ "ELSE" "."   [{Statement}(. stmts = lus .)]   (.  ret += "else #{exp}\n#{stmts}\n" .) ]
                              "ENDIF"
                               (. 
                                ret += "\nend" 
                                  src(ret)
                               .)
                                "." 
                              .

  NullStatement        = "." . 

  ReturnStatement      = "return" [ Expression ]   ";"   .
                         
/*
WhileStatement = "WHILE" Expression 
      {["VARY" identifier "FROM" identifier "NEXT" identifier ["RANGE" identifier] ]}"." 
      {Statement}
      "ENDWHILE" "."
. 
*/

ClassStatement = "CLASS" identifier "DEFINITION" 
                    ( 
                       "DEFERRED" ["PUBLIC"]
                      |
                       ["INHERITING" "FROM" identifier] 
                       ["ABSTRACT"] 
                       ["FINAL"] 
                       ["CREATE" {"PUBLIC"|"PROTECTED"|"PRIVATE"}] 
                       ["SHARED" "MEMORY" "ENABLED"] 
                       ["FOR" "TESTING" 
                         ["RISK" "LEVEL" {"CRITICAL"|"DANGEROUS"|"HARMLESS"}] 
                         ["DURATION"   {"SHORT"|"MEDIUM"|"LONG"}] ] 
                       [
                           ["GLOBAL"] "FRIENDS" identifier {identifier}

                        ]
                    ) "." 
                        
                
  ["PUBLIC" "SECTION" "." 
    {Statement}
  ] 
  ["PROTECTED" "SECTION" "." 
    {Statement}
  ] 
  ["PRIVATE" "SECTION" "." 
    {Statement}
  ] 
"ENDCLASS" "." .


ClassImplStatement = "CLASS" identifier "IMPLEMENTATION" "." 
   {Statement} 
"ENDCLASS" "." .

MethodStatement = "METHOD" identifier "." 
  {Statement} 
"ENDMETHOD" ".".

Typing = (
        "TYPE"    ( identifier | ["LINE" "OF"] identifier | "REF" "TO" identifier ) 
        | "LIKE" [( ["LINE" "OF"] | "REF" "TO" )] identifier 
      
         )
 "." .
         
          
MethodsStatement = ("METHODS" | "CLASS-METHODS") identifier ( ["ABSTRACT"|"FINAL"] 
            | "FOR" "TESTING" 
            | ["FINAL"] "REDEFINITION"
            |["DEFAULT" ("IGNORE"|"FAIL")] 
             ["FOR" "EVENT" identifier "OF" identifier] 
  [ "IMPORTING" {
                  ("VALUE" "(" identifier ")" | "REFERENCE" "(" identifier ")" | identifier )
                   Typing [("OPTIONAL"|"DEFAULT") identifier] 
                 } 
              ["PREFERRED" "PARAMETER" identifier] ] 
  [ "EXPORTING" {
                  {"VALUE"(identifier)|"REFERENCE"(identifier)|identifier} Typing 
                 }
                  ] 
  [ "CHANGING"  {
              ("VALUE" "(" identifier ")" | "REFERENCE" "(" identifier ")" | identifier )
               Typing [("OPTIONAL"|"DEFAULT") identifier]
               } ] 
  [ "RETURNING" {"VALUE"(identifier)} Typing ] 
  [
       {"RAISING" (identifier| "RESUMABLE" "(" identifier ")" ) { (identifier| "RESUMABLE" "(" identifier ")" )}} 
           | 
       {"EXCEPTIONS" identifier {identifier} }
  ]
  | 
  "FOR" "TESTING"
  |
  ["FINAL"] "REDEFINITION"
  )
  "." . 

SPLIT = "SPLIT" identifier "AT" Expression "INTO" 
      ( identifier{identifier } | "TABLE" identifier )
      ["IN" {"CHARACTER"|"BYTE"} "MODE"] . 
      
  Expression           =  Conditional { AssignmentOperator Expression   }  .

  Conditional          =  LogORExp  .

  LogORExp             =  LogANDExp   { ("||" | "OR" | "EQUIV") LogANDExp }  .

  LogANDExp            =  InclORExp   { ("&&" | "AND") InclORExp }
 
.

  InclORExp            =  ExclORExp   { "|" ExclORExp }   .

  ExclORExp            =  ANDExp      { "^" ANDExp }    .

  ANDExp               =  EqualExp    { "&" EqualExp }    .

  EqualExp             =    RelationExp { ( "="| "EQ"| "<>" | "NE" | "IS" ["NOT"] ) RelationExp } |
  RelationExp ["NOT"] "BETWEEN" RelationExp "AND" RelationExp  
  .

  RelationExp          =    ShiftExp    { 
                              ( "<" | "LT"  | ">" | "GT" | "<=" | "LE" | ">=" | "GE" | "CO" | "CN" | "CA" | "NA" | "CS" | "NS" | "CP" | "NP" |"BYTE-CO" | "BYTE-CN" | "BYTE-CA" | "BYTE-NA" | "BYTE-CS" | "BYTE-NS" )  
                               ShiftExp   }   .

  ShiftExp             =  AddExp      { ( "<<" | ">>" ) AddExp }       .
              
                
                
  AddExp               =  MultExp     { ( "+"  | "-"  ) MultExp }    .

  MultExp              =   CastExp  
 { ( "*"   | "/" | "DIV"  | "%"  | "MOD" | "**" ) CastExp }    .

  CastExp              =   UnaryExp     .



  UnaryExp             =  PostFixExp
                         | ( "++" | "--" ) UnaryExp
                         | UnaryOperator CastExp 	
                            
					.



  PostFixExp           =  Primary
                         { "[" Expression "]"
                          | FunctionCall
                          | "->" identifier
                          | "=>" identifier
                          | "++"
                          | "--"
                         }    .   
  
  Primary              =  ( identifier | string1 | char | number | "(" Expression ")" |PredefinedConstant )   .

  FunctionCall        =  "("   [ ActualParameters] ")"      .

  ActualParameters    =    Expression   { "," Expression   }      .

  AssignmentOperator   =    "="  | "*=" | "/=" | "%=" | "+=" | "-=" | "&="
                         | "^=" | "|=" | "<<=" | ">>="    .

  UnaryOperator        =  "+" | MinusOperator | "*" | "!" | "&" | "~" | "NOT" |  "INSTANCE" "OF" | "IN"    .

  MinusOperator = space1 "-" | "-" space1 .

  PredefinedConstant = "INITIAL" | "BOUND" | "ASSIGNED" | "SUPPLIED" | "REQUESTED" .
END C.




