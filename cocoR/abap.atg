COMPILER C

CHARACTERS
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit    = "0123456789" .
  hexdigit = digit + "ABCDEFabcdef" .
  tab      = CHR(9) .
  eol      = CHR(10) .
  files    = letter + digit + ":\." .
  chars    = CHR(32) .. CHR(255) - '"' .
  strings  = CHR(32) .. CHR(255) - "'".
  strings1 = CHR(32) .. CHR(255) - '"' - "#{" .	
  macros   = ANY - eol .
  space = CHR(32).

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "\"" TO eol

IGNORE
  tab + eol + CHR(13)

TOKENS
  identifier = ( "_" | letter) { "_" | "-" | letter | digit } .
  number     = digit { digit } [ "." { digit }] [ "U" | "u" | "L" | "l" ] .
  hexnumber  = "0" ( "x" | "X" ) hexdigit { hexdigit } [ "U" | "u" | "L" | "l" ] .
  string1     = "'" { strings } "'" .
  char       = '"' [ "\\" ] chars '"' .
   Colon = ":" .
  space1 = space .

PRAGMAS

  PreProcessor = "#" ( letter ) .
		    

PRODUCTIONS


    C                    =     "REPORT"  identifier "."

    { Statements } EOF .

  Type               = 

( "var" | "mixed" )
	|
	 "short" [ "int" ]
    | "long"  [ "int" | "float" ] 
	| "unsigned" [ "char" | "int" | "long" ]
	| "char"

	| "int" 
	
	| "float"		


	| "double" | "void"  | "string"

	.









   
  


  Statement            = 
                         ( 
                         VariableDefineStatement|
                         WriteStatement |
						 AssignmentStatement | BreakStatement
                           | ContinueStatement
                           | DoStatement | ForStatement
                           | IfStatement  | NullStatement
                           | ReturnStatement 
                           | WhileStatement ) 
 .

VariableDefineStatement = "DATA" identifier ( "TYPE" Type "VALUE" Expression |
"LIKE" Expression) "." .

WriteStatement = "WRITE" {["AT"] ["/"][number][(number|"*"|"**")]} identifier 
  ["UNDER" identifier] 
  ["NO-GAP"] 
  ["LEFT-JUSTIFIED"|"CENTERED"|"RIGHT-JUSTIFIED"] 
  { { ["EXPONENT" Expression] 
      ["NO-GROUPING"] 
      ["NO-SIGN"] 
      ["NO-ZERO"] 
      ["CURRENCY" string1] 
      { { ["DECIMALS" string1] 
          ["ROUND" number] } 
        | ["UNIT" string1] } } 
    | { ["ENVIRONMENT" "TIME" "FORMAT"] 
        ["TIME" "ZONE" string1] } 
    ["STYLE" string1] } 
  ["USING" { "NO" "EDIT" "MASK"| "EDIT" "MASK" string1}] 
  ["DD/MM/YY"|"MM/DD/YY"|"DD/MM/YYYY"|"MM/DD/YYYY"|"DDMMYY"|"MMDDYY"|"YYMMDD"] 
  ["COLOR" { { ["="] { { Primary
                   } ["ON"] } 
                 | "OFF"} 
                 
         | {"=" number} }] 
  ["INTENSIFIED" [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["INVERSE"     [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["HOTSPOT"     [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["INPUT"       [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["FRAMES"      [ {"ON"|"OFF"} | {"=" string1} ]] 
  ["RESET"] 
  { ["AS" "CHECKBOX"] 
  | ["AS" "ICON"] 
  | ["AS" "SYMBOL"] 
  | ["AS" "LINE"] } 
  ["QUICKINFO" string1]".". 

  AssignmentStatement =  Expression ";" .

  BreakStatement       = "break"  ";" .


  Statements = { Statement } .

  ContinueStatement    = "CONTINUE"  "."  .

  DoStatement          = "do" Statement "while" "(" Expression ")" ";"  .

  ForStatement         = "for"  "(" [ Expression ] ";"   [ Expression ]   ";"  [ Expression  ] ")" Statement .

  
  IfStatement          = "IF" Expression "."
                              [Statements] 
                             { "ELSEIF" Expression "."
                              [Statements]
                              }
                              [ "ELSE" "."   [Statements]   ]
                              "ENDIF" "." 
                              .

  NullStatement        = ";"   . 

  ReturnStatement      = "return" [ Expression ]   ";"   .
                         

  WhileStatement = "WHILE" Expression 
      {["VARY" identifier "FROM" identifier "NEXT" identifier ["RANGE" identifier] ]}"." 
      [Statements] 
      "ENDWHILE" "."
. 

  Expression           = Conditional { AssignmentOperator Expression   }.

  Conditional          = LogORExp .

  LogORExp             = LogANDExp   { ("||" | "OR" | "EQUIV") LogANDExp } .

  LogANDExp            = InclORExp   { ("&&" | "AND") InclORExp }

.

  InclORExp            = ExclORExp   { "|" ExclORExp } .

  ExclORExp            = ANDExp      { "^" ANDExp } .

  ANDExp               = EqualExp    { "&" EqualExp } .

  EqualExp             =   RelationExp { ( "="| "EQ"| "<>" | "NE"  ) RelationExp } .

  RelationExp          =   ShiftExp    { ( "<" | "LT"  | ">" | "GT" | "<=" | "LE" | ">=" | "GE"|"CO"|"CN"|"CA"|"NA"|"CS"|"NS"|"CP"|"NP" 
                |"BYTE-CO"|"BYTE-CN"|"BYTE-CA"|"BYTE-NA"|"BYTE-CS"|"BYTE-NS"
                )   ShiftExp   }
  .

  ShiftExp             = AddExp      { ( "<<" | ">>" ) AddExp } .
              
                
                
  AddExp               = MultExp     { ( "+"  | "-"  ) MultExp 
} .

  MultExp              =   CastExp  
 { ( "*"   | "/" | "DIV"  | "%"  | "MOD" | "**" ) CastExp 

} .

  CastExp              =  UnaryExp  .



  UnaryExp             = PostFixExp
                         | ( "++" | "--" ) UnaryExp
                         | UnaryOperator CastExp 	
					.



  PostFixExp           = Primary
                         { "[" Expression "]"
                          | FunctionCall
                          | "." identifier
                          | "->" identifier
                          | "++"
                          | "--"
                         } .   
  
  Primary              = identifier | string1 | char | number | "(" Expression ")" .

  FunctionCall        = "("   [ ActualParameters] ")"   .

  ActualParameters    =   Expression   { "," Expression   }   .

  AssignmentOperator   =   "="  | "*=" | "/=" | "%=" | "+=" | "-=" | "&="
                         | "^=" | "|=" | "<<=" | ">>=" .

  UnaryOperator        = "+" | MinusOperator | "*" | "!" | "&" | "~" | "NOT".

  MinusOperator = space1 "-" | "-" space1 .


END C.




