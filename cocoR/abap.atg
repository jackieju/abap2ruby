COMPILER C

CHARACTERS
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit    = "0123456789" .
  hexdigit = digit + "ABCDEFabcdef" .
  tab      = CHR(9) .
  eol      = CHR(10) .
  files    = letter + digit + ":\." .
  chars    = CHR(32) .. CHR(255) - "'" .
  strings  = CHR(32) .. CHR(255) - '"' .
  strings1 = CHR(32) .. CHR(255) - '"' - "#{" .	
  macros   = ANY - eol .

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO eol

IGNORE
  tab + eol + CHR(13)

TOKENS
  identifier = ( "_" | letter) { "_" | letter | digit } .
  number     = digit { digit } [ "." { digit }] [ "U" | "u" | "L" | "l" ] .
  hexnumber  = "0" ( "x" | "X" ) hexdigit { hexdigit } [ "U" | "u" | "L" | "l" ] .
  string1     = '"' { strings } '"' .
 
  char1       = "'" [ "\\" ] chars "'" .
  library    = "<" files { files } ">" .
  
  

PRAGMAS

  PreProcessor = "#" ( letter ) .
		    





PRODUCTIONS


    C                    =      
   [ Package ] { Import | LoadLib } [ Inheritance ] 

    { Definition } EOF .

  Import = "use" ClassFullName
  ";" .
  
  LoadLib = "load" identifier 
  
   ";" .
  

	
	
 
  Definition           = 
 ClassDef | Statements .
	
               
  
  
  Package = "package" identifier 

		{"/"identifier
	  }";" .
 
  Inheritance              = ("inherit"|"<") identifier 
   ";" .
  

	ClassDef			= "class" identifier  
 
{Inheritance}
ClassBody	";" .
	ClassBody			 = 
	

	"{" { Definition} "}" 
	
	
	.


  StorageClass         = 
   "static" 
   | "my" 
   | "function"
   .

  Type               = 


( "var" | "mixed" )

	|
	 "short" [ "int" ]

    | "long"  [ "int" | "float" ]
 
	| "unsigned" [ "char" | "int" | "long" ]
	| "char"

	| "int" 
	
	| "float"		


	| "double" | "void"  | "string"

	.

  VarList = 
  ArraySize
    [ "=" Expression ] 
{ ","  identifier


ArraySize

 [  "=" Expression ] 
  } .

  ArraySize            = { "[" [ ConstExpression ] "]" } .



  FunctionDefinition   = 
  
  FunctionHeader FunctionBody  
  
  .
  FunctionHeader       = 
  


							"(" [ FormalParamList ] ")" 
  .
  FunctionBody         = CompoundStatement
   .
  FormalParamList      = FormalParameter { "," FormalParameter } .
  FormalParameter      =  { 
  	Type {  "*" 			 }  
  }identifier  
  
  { ArraySize 
  }

  .



  Statement            = 
{ Label }
                         ( 
                         
						 AssignmentStatement | BreakStatement
                           | ContinueStatement
                           | DoStatement | ForStatement
                           | IfStatement  | NullStatement
                           | ReturnStatement | SwitchStatement
                           | WhileStatement ) 
 .

  Label                = ("case" ConstExpression ":")  | ( "default" ":") .



  AssignmentStatement =  Expression ";" .

  BreakStatement       = "break"  
  
	";"
 .
 LocalDeclaration     = 
							
 ( Type |  StorageClass  [Type] )
  
							
  { "*"						
  } 
  
  identifier				
 (FunctionDefinition | VarList";" ) 
 . 

  CompoundStatement    = "{" Statements "}" .

  Statements = { LocalDeclaration | Statement } .

  ContinueStatement    = "continue"  
  
	";" 
  .

  DoStatement          = "do" Statement "while" "(" Expression ")" ";"  .

  ForStatement         = "for"  "(" [ Expression ] ";" 
  
   
  [ Expression ] 
  
  ";"  
  
  [ 

	Expression 

  ] ")" Statement
   .

  IfStatement          = "if" "(" Expression ")" 
  
  Statement   [
 
   "else" 
  
  Statement
  
   ]
   
 .

  NullStatement        = ";"   . 

  ReturnStatement      = "return" [ Expression ] 
  
  ";"   .
                         

  SwitchStatement      = "switch" "("

   Expression 

   
   ")" Statement 

	.

  WhileStatement       = "while" "(" 
    
	Expression 
	   
   ")" Statement 
   
     .







  ConstExpression      = Expression .

  Expression           = Conditional { AssignmentOperator Expression
  
   }.

  Conditional          = LogORExp .

  LogORExp             = LogANDExp   { "||"
  
  
LogANDExp 

} 


.

  LogANDExp            =
 

InclORExp   { "&&" 



InclORExp 


}

.

  InclORExp            = ExclORExp   { "|" ExclORExp } .

  ExclORExp            = ANDExp      { "^" ANDExp } .

  ANDExp               = EqualExp    { "&" EqualExp } .

  EqualExp             = 
  

  RelationExp { ( "=="
   
| "!="
 ) RelationExp 


} 


.

  RelationExp          = 
  
  ShiftExp    { ( "<"  | ">" | "<=" | ">=" ) 
  ShiftExp
  
   }
  
  
  
  .

  ShiftExp             = AddExp      { ( "<<" | ">>" ) AddExp } .

  AddExp               = 
MultExp     { ( "+"  | "-"  ) MultExp 



} .

  MultExp              = 
  CastExp  
 { ( "*"   | "/"   | "%"   ) CastExp 

} .

  CastExp              = 
  
  UnaryExp 
  
  
  .



  UnaryExp             = PostFixExp
                         | ( "++" | "--" ) UnaryExp
                         | UnaryOperator CastExp 	
					.



  PostFixExp           = 
	Primary
                         { "[" Expression "]"

                          | 
FunctionCall

                          | 

"." 
( 



identifier
 | "{" Expression 

"}"

)				


		{ 
	
						FunctionCall
						}
					          
                         
                         
                          | (  "->" {"{"} identifier {"}"} 

			)			  
		
						  
						  
                          | "++"


                          | "--"

						  
                         } .
                         



  Creator = 
  
  ClassFullName
  

 {FunctionCall} 

   .
   
  ClassFullName= 
  identifier 
  {"::" 
   identifier 
   }  .
  
  Primary              = 

 identifier 

 	{	("##" identifier
				
			) | ("::" identifier
			
			)
			
	}
			
			
  | "new" Creator
   
	| "$"
	
  
  | string1
  

| char1
  
  | number 
 
  | "(" Expression ")" 
  
  .

  FunctionCall        = "("  
 


 [ ActualParameters] ")" 
  .

  ActualParameters    = 
  Expression 
  
  { "," Expression 
  
  
  } 
  
  .

  AssignmentOperator   =   "="  | "*=" | "/=" | "%=" | "+=" | "-=" | "&="
                         | "^=" | "|=" | "<<=" | ">>=" .

  UnaryOperator        = "+" | "-" | "*" | "!" | "&" | "~" .


END C.




