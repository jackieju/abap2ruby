require_relative "@crr_scan.rb@"
load "rubyutility.rb"
load "log.rb"


#




           MAX_IDENTIFIER_LENGTH = 1000
class @Scanner@ <  @CRRScanner@
    
    attr_accessor :currLine, :currCol, :include_stack
  
   
   
  public
    # def initialize( srcFile,  ignoreCase) 
    #     super(srcFile, ignoreCase)
    # end
    def initialize( str="",  ignoreCase=true) 
        super(str, ignoreCase)
    end

    def Comment()
        p "===>Comment1:#{@ch}"
       level=1
       startLine=@currLine
       oldLineStart=@lineStart
       oldCol=@currCol
      
      
       if @ch=='*'
           _pos = @buffPos-1
           _ch = @buffer[_pos]
           isStart = true
           while (_pos>=0 && _ch.to_byte != EOF_CHAR && _ch.to_byte != LF_CHAR)
               if !isWhitespace?(_ch)
                   p "===>Comment3:#{_ch}, #{_pos}"
                   isStart = false
                   break
               end
               _pos -=1
               _ch = @buffer[_pos]
           end
           p "===>Comment2:#{isStart}, #{@ch}"
           if isStart
               while (@ch && @ch.to_byte != EOF_CHAR && @ch.to_byte != LF_CHAR && @ch.to_byte != 13)
                   NextCh()
                   p "===>Comment4:#{@ch} #{@ch.to_byte} #{@ch.to_byte != LF_CHAR}"
                  
               end
              
              p "===>Comment5:#{@ch} #{@ch.to_byte} "
               return 1
           end
         
      end
     
       if @ch=='"'
          NextCh()
          while (@ch!=nil)
             if @ch==10
                (level-=1;level+2)
                NextCh()
                @comEols=@currLine-startLine
                if level==0
                   return 1
                end

             else
                if @ch.to_byte==EOF_CHAR
                   return 0
                else
                   NextCh()
                end

             end

          end

       end

       return 0
    end
   
  protected


public
 

  
   def skip(ignore_crlf)
       
       return C_EOF_Sym if @ch == nil
       
        # filter white space and comments
        begin
           return C_EOF_Sym if @ch == nil

           p "===>Get2:#{@ch} #{@ch.to_byte}"
           # filter white space
           while (@ch.to_byte >= 9 && # TAB
                   @ch.to_byte <= 10 || # LF
                  @ch.to_byte == 13 || # CR
                  @ch == ' ') # space
                   # p "get30:#{@ch}, #{@buffPos}"
                   if !ignore_crlf && ( @ch.to_byte == 13|| ch.to_byte == 10)
                       p "crlf:#{@ch.to_byte}, pos #{@buffPos}"
                        Scan_NextCh()
                       return C_CRLF_Sym
                   end
                   Scan_NextCh()
                    p "get31:#{@ch}, #{@buffPos}"
                   return C_EOF_Sym if @ch == nil 
           end
           p "get32:#{@ch}, #{@buffPos}"
           
         end while ((@ch == '*' || @ch == '"') && Comment()==1) 
          
         if (@ch == nil || @ch.to_byte == EOF_CHAR  ) 
             return C_EOF_Sym
         end
         p "Get5:#{@ch}, #{@ch.to_byte}"
         if !ignore_crlf &&  ( @ch.to_byte == 13|| ch.to_byte == 10)
             return C_CRLF_Sym
         end
         return nil
          
   end
   
   def Get(ignore_crlf=true)
       # int state, ctx
       r = skip(ignore_crlf)
       return r if r
 

          @currSym = nextSym.clone
         
          nextSym.init(0, @currLine, @currCol - 1, @buffPos, 0)
          nextSym.len  = 0
           ctx = 0
    
            return UpdateState()


   end
   



end
