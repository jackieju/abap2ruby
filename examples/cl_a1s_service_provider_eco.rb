# Generated by Abap2Ruby(https://github.com/jackieju/abap2ruby)
require_relative "cl_bsa_service_provider_co.rb"
require_relative "if_msgm_message_manager.rb"
require_relative "abap.rb"

class Cl_a1s_service_provider_eco < Cl_bsa_service_provider_co

   # methods IF_ESF_PROVIDER_ACCESS~CHECK
   #     redefinition .
   #

   def if_esf_provider_access_i_check(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lt_messages = nil # if_esf_types = ty_messages.new

      lt_node_ids = nil # sesf_bo_node_id_tab.new

      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      lt_node_ids = in_node_ids

      SORT lt_node_ids stable
      abap("DELETE ADJACENT DUPLICATES FROM lt_node_ids")
      begin
         @mo_adaptation_handler.check(_i:{
            "in_bo_node_name" => in_bo_node_name,
            "in_node_ids" => lt_node_ids,
            "in_check_scope" => in_check_scope,
         }, _e:{
            "out_messages" => lt_messages,
         }, _b:binding)

         put_messages(io_message_handler:in_message_handler, it_messages:lt_messages, iv_ignore_wrong_orig_location:abap_true)

         #"XRG: ignore wrong (non ECO) origin location as otherwise we would break the lifetime handling mechanism or handler would dump

      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_ACCESS~MODIFY
   #     redefinition .
   #

   def if_esf_provider_access_i_modify(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      @mv_notify_trans_error = abap_true

      super.if_esf_provider_access_i_modify(_i:{
         "in_change_handler" => in_change_handler,
         "in_message_handler" => in_message_handler,
      }, _b:binding)

      @mv_notify_trans_error = abap_false

      @mo_rnid_manager.sync_changes(_i:{
         "io_change_handler" => in_change_handler,
      }, _b:binding)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_ACCESS~RETRIEVE
   #     redefinition .
   #

   def if_esf_provider_access_i_retrieve(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lt_messages = nil # if_esf_types = ty_messages.new

      lt_sync_notifications = nil # if_esf_types = tt_sync_notifications.new

      #"#EC NEEDED
      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      begin
         @mo_adaptation_handler.retrieve(_i:{
            "in_bo_node_name" => in_bo_node_name,
            "in_node_ids" => in_node_ids,
            "in_requested_image" => in_requested_image,
            "in_edit_mode" => in_edit_mode,
            "in_requested_attributes" => in_requested_attributes,
         }, _e:{
            "out_data" => out_data,
            "out_messages" => lt_messages,
            "out_failed_node_ids" => out_failed_node_ids,
            "out_sync_notifications" => lt_sync_notifications,
         }, _b:binding)

         #*/    Use Message Handler (if provided)

         put_messages(io_message_handler:in_message_handler, it_messages:lt_messages)

         if in_buffer_sync_handler.isBOUND() && lines(lt_sync_notifications).isNotINITIAL()
            in_buffer_sync_handler.notify_buffer_syncs(_i:{
               "in_sync_notifications" => lt_sync_notifications,
            }, _b:binding)





         end

         @mo_rnid_manager.sync_data(_i:{
            "iv_node_name" => in_bo_node_name,
            "it_data" => out_data,
         }, _b:binding)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_ACCESS~RETRIEVE_BY_ASSOCIATION
   #     redefinition .
   #

   def if_esf_provider_access_i_retrieve_by_association(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lt_sync_notifications = nil # if_esf_types = tt_sync_notifications.new

      #"#EC NEEDED
      lt_messages = nil # if_esf_types = ty_messages.new

      lt_node_id_for_task_search = nil # sesf_bo_node_id_tab.new

      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      lt_existing_node_id = nil # sesf_bo_node_id_tab.new

      lt_failed_node_id = nil # sesf_bo_node_id_tab.new

      lrt_out_data = nil # data.new

      lt_requested_attributes = nil # sesf_string_tab.new

      if @mv_has_task_region == abap_true && in_association_name == @gc_task_association_name && in_bo_node_name == @mv_bo_root_node_name && in_bo_name == @mv_bo_name
         begin
            lt_existing_node_id = in_node_ids

            lrt_out_data = @mo_provider_context.get_lcp_facade(_b:binding).get_bo_node_table_container(in_bo_name:@mv_bo_name, in_bo_node_name:@mv_bo_root_node_name)

            assign(to:lt_out_data)
            abap("INSERT if_esf_types => co_node_id_proxy_name INTO TABLE lt_requested_attributes")
            @mo_adaptation_handler.if_esf_lcp_i_retrieve(_i:{
               "in_bo_node_name" => in_bo_node_name,
               "in_node_ids" => in_node_ids,
               "in_edit_mode" => If_esf_types::co_read_only,
               "in_requested_image" => in_requested_image,
               "in_requested_attributes" => lt_requested_attributes,
            }, _e:{
               "out_failed_node_ids" => lt_failed_node_id,
               "out_data" => lt_out_data,
            }, _b:binding)

            out_failed_source_node_ids = lt_failed_node_id

            loop(at:lt_failed_node_id){
               abap("DELETE TABLE lt_existing_node_id FROM ls_node_id")

               #"#EC CI_STDSEQ

            }
            if lines(lt_existing_node_id) > 0
               @mt_task_region_node_id = lt_existing_node_id



               lt_node_id_for_task_search = get_node_id_for_task_region(lt_existing_node_id)



               @mo_task_region_helper.retrieve_by_association(_i:{
                  "in_source_node_ids" => lt_node_id_for_task_search,
               }, _b:binding)





            end


         rescue Cx_root=>lx_root
            handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

            handle_error(ix_exception:lx_root)


         end


      else
         begin
            @mo_adaptation_handler.retrieve_by_association(_i:{
               "in_bo_node_name" => in_bo_node_name,
               "in_association_name" => in_association_name,
               "in_node_ids" => in_node_ids,
               "in_fill_data" => in_fill_data,
               "in_filter_parameters" => in_filter_parameters,
               "in_filtered_attributes" => in_filtered_attributes,
               "in_requested_image" => in_requested_image,
               "in_edit_mode" => in_edit_mode,
               "in_requested_attributes" => in_requested_attributes,
            }, _e:{
               "out_links" => out_links,
               "out_data" => out_data,
               "out_messages" => lt_messages,
               "out_failed_source_node_ids" => out_failed_source_node_ids,
               "out_sync_notifications" => lt_sync_notifications,
            }, _b:binding)

            #*/      Use Message Handler (if provided)

            put_messages(io_message_handler:in_message_handler, it_messages:lt_messages)

            if in_buffer_sync_handler.isBOUND() && lines(lt_sync_notifications).isNotINITIAL()
               in_buffer_sync_handler.notify_buffer_syncs(_i:{
                  "in_sync_notifications" => lt_sync_notifications,
               }, _b:binding)





            end

            @mo_rnid_manager.sync_assoc(_i:{
               "iv_node_name" => in_bo_node_name,
               "iv_association_name" => in_association_name,
               "it_node_id" => in_node_ids,
               "it_data" => out_data,
               "it_link" => out_links,
               "is_filter_parameter" => in_filter_parameters,
               "it_filter_attribute" => in_filtered_attributes,
               "iv_requested_image" => in_requested_image,
            }, _b:binding)


         rescue Cx_root=>lx_root
            handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

            handle_error(ix_exception:lx_root)


         end


      end

      if in_fill_failed_source_node_ids == abap_false
         clear(id:out_failed_source_node_ids)



      end






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_ACCESS~RETRIEVE_ROOT_NODE_ID
   #     redefinition .
   #

   def if_esf_provider_access_i_retrieve_root_node_id(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lv_skipped = nil # char1.new

      lv_skipped = abap_false

      @mo_rnid_manager.rrnid(_i:{
         "iv_node_name" => in_bo_node_name,
         "it_node_id" => in_node_ids,
         "iv_requested_image" => in_requested_image,
      }, _e:{
         "et_link" => out_links,
         "ev_skipped" => lv_skipped,
      }, _b:binding)

      if lv_skipped == abap_true
         super.if_esf_provider_access_i_retrieve_root_node_id(_i:{
            "in_bo_node_name" => in_bo_node_name,
            "in_node_ids" => in_node_ids,
            "in_requested_image" => in_requested_image,
         }, _e:{
            "out_links" => out_links,
         }, _b:binding)





      end






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_INIT~INIT
   #     redefinition .
   #

   def if_esf_provider_init_i_init(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lo_lcp_facade = nil # if_esf_lcp_facade.new

      lv_task_bo_name = nil # string.new

      lv_task_bo_node_name = nil # string.new

      lx_esf_core_service = nil # cx_esf_core_service.new

      super.if_esf_provider_init_i_init(_i:{
         "in_provider_context" => in_provider_context,
         "in_bo_name" => in_bo_name,
      }, _b:binding)

      @mo_provider_context = in_provider_context

      begin
         lo_lcp_facade = in_provider_context.get_lcp_facade(_b:binding)


      rescue Cx_esf_core_service=>lx_esf_core_service
         handle_error(ix_exception:lx_esf_core_service)


      end
      cl_msgm_message_manager.get_instance(_i:{
         "iv_context" => in_bo_name,
         "ir_lcp_facade" => lo_lcp_facade,
      }, _b:binding)

      #*/Store BO Name & Change Handler

      @mv_bo_name = in_bo_name

      @mo_change_handler = in_provider_context.change_handler

      get_task_region_bo_details(_i:{
         "iv_eco_name" => in_bo_name,
      }, _e:{
         "ev_has_task_region" => @mv_has_task_region,
         "ev_eco_root_node_name" => @mv_bo_root_node_name,
         "ev_bo_name" => lv_task_bo_name,
         "ev_bo_node_name" => lv_task_bo_node_name,
      }, _b:binding)

      if @mv_has_task_region == abap_true
         if lv_task_bo_name.isINITIAL() || lv_task_bo_node_name.isINITIAL() || @mv_bo_root_node_name.isINITIAL()
            raise cx_fatal_exception.new




         else
            @mo_task_region_helper = Cl_coutl_task_region_helper::create_task_region_helper(in_bo_name:lv_task_bo_name, in_bo_node_name:lv_task_bo_node_name, in_lcp_facade:lo_lcp_facade)



         end




      end

      #*/Instantiate RNID Manager

      begin


      rescue Cx_esf_core_service=>lx_esf_core_service
         handle_error(ix_exception:lx_esf_core_service)


      end
      @mv_notify_any_error = abap_undefined






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_INTERACT_CTRL~CLOSE_SESSION
   #     redefinition .
   #

   def if_esf_provider_interact_ctrl_i_close_session(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      super.if_esf_provider_interact_ctrl_i_close_session(_i:{
         "session_hand_over" => session_hand_over,
      }, _b:binding)

      cl_msgm_message_manager.close_session(_b:binding)
      ( iv_session_handover = session_hand_over )






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_INTERACT_CTRL~DO_POST_PROCESSING
   #     redefinition .
   #

   def if_esf_provider_interact_ctrl_i_do_post_processing(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################




      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lv_skip_check = nil # sesf_boolean.new

      #* map messages necessary to catch messages raised during save

      #* if we keep it here individual calls to mo_adaptation_handler->map_messages are no longer needed

      #* call have to be done before super->if_esf_provider_interact_ctrl~do_post_processing

      #* so that errors propagated by handle_error( lx_bsa_runtime ) are displayed correctly

      begin
         @mo_adaptation_handler.map_messages(_i:{
            "out_messages" => lt_out_message,
         }, _e:{
            "in_messages" => "inout_messages",
         }, _b:binding)

         inout_messages = lt_out_message


      rescue Cx_bsa_runtime=>lx_bsa_runtime
         handle_error(lx_bsa_runtime)


      end
      super.if_esf_provider_interact_ctrl_i_do_post_processing(_b:binding)

      if ( in_overruling_code.isSUPPLIED() && in_overruling_code == If_esf_types::co_oc_in_ovs_phase )
         lv_skip_check = abap_true




      else
         lv_skip_check = abap_false



      end

      @mo_message_manager.map_messages(_i:{
         "iv_sub_context" => get_sub_context(_b:binding),
         "iv_skip_check" => lv_skip_check,
         "iv_check_incoming" => get_map_msgs_check_incoming(_b:binding),
      }, _b:binding)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_QUERY~QUERY
   #     redefinition .
   #

   def if_esf_provider_query_i_query(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      super.if_esf_provider_query_i_query(_i:{
         "in_bo_node_name" => in_bo_node_name,
         "in_query_name" => in_query_name,
         "in_selection_parameters" => in_selection_parameters,
         "in_query_options" => in_query_options,
         "in_authorization_context" => in_authorization_context,
         "in_message_handler" => in_message_handler,
         "in_fill_data" => in_fill_data,
         "in_filter_node_ids" => in_filter_node_ids,
         "in_requested_attributes" => in_requested_attributes,
      }, _e:{
         "out_node_ids" => out_node_ids,
         "out_data" => out_data,
         "out_query_info" => out_query_info,
      }, _b:binding)

      @mo_rnid_manager.sync_data(_i:{
         "iv_node_name" => in_bo_node_name,
         "it_node_id" => out_node_ids,
         "it_data" => out_data,
      }, _b:binding)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_TRANSACT_CTRL~ON_AFTER_SAVE_TRANSACTION
   #     redefinition .
   #

   def if_esf_provider_transact_ctrl_i_on_after_save_transaction(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      super.if_esf_provider_transact_ctrl_i_on_after_save_transaction(_i:{
         "in_rejected" => in_rejected,
      }, _b:binding)

      add_message_on_after_save_trx(iv_rejected:in_rejected)

      send_update_task_association(_b:binding)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_ACTION~EXECUTE_ACTION
   #     redefinition .

   def if_esf_provider_action_i_execute_action(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      if @mv_notify_any_error == abap_undefined
         @mv_notify_any_error = abap_true





      end

      @mv_notify_trans_error = abap_true

      super.if_esf_provider_action_i_execute_action(_i:{
         "in_bo_node_name" => in_bo_node_name,
         "in_action_name" => in_action_name,
         "in_node_ids" => in_node_ids,
         "in_action_parameters" => in_action_parameters,
         "in_referencing_node_elements" => in_referencing_node_elements,
         "in_change_handler" => in_change_handler,
         "in_message_handler" => in_message_handler,
      }, _b:binding)

      @mv_notify_any_error = abap_undefined

      @mv_notify_trans_error = abap_false

      @mo_rnid_manager.sync_changes(_i:{
         "io_change_handler" => in_change_handler,
      }, _b:binding)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods ADD_MESSAGE_ON_AFTER_SAVE_TRX
   #     importing
   #       !IV_REJECTED type SESF_BOOLEAN .
   #

   def add_message_on_after_save_trx(*_a,iv_rejected:nil,_i:nil,_e:nil,_b:nil)
      iv_rejected=nil
      if _a && _a.size>0
         iv_rejected=_a[0]
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lo_message = nil # cm_esi_t100_adapter.new

      ls_orig_loc = nil # cm_esi_root = ty_message_location.new

      ls_msg = nil # symsg.new

      ls_orig_loc.bo_name = @mv_bo_name

      if iv_rejected == abap_true
         ls_msg.msgno = '001'



         ls_msg.msgty = 'E'




      else
         ls_msg.msgno = '000'

         ls_msg.msgty = 'S'



      end

      ls_msg.msgid = 'MSGM_ON_SAVE_TRANS'

      lo_message = Cm_esi_t100_adapter::CREATE(symptom:space, lifetime:Cm_esi_root::co_lifetime_transition, origin_location:ls_orig_loc, symsg:ls_msg)

      @mo_message_manager.add_message(_i:{
         "io_message" => lo_message,
      }, _b:binding)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods GET_MAP_MSGS_CHECK_INCOMING
   #     returning
   #       value(RV_CHECK_INCOMMING) type SESF_BOOLEAN .
   #

   def get_map_msgs_check_incoming(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      rv_check_incomming = abap_false






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods GET_NODE_ID_FOR_TASK_REGION
   #     importing
   #       !IT_NODE_ID type SESF_BO_NODE_ID_TAB
   #     returning
   #       value(RT_NODE_ID) type SESF_BO_NODE_ID_TAB .
   #

   def get_node_id_for_task_region(*_a,it_node_id:nil,_i:nil,_e:nil,_b:nil)
      it_node_id=nil
      if _a && _a.size>0
         it_node_id=_a[0]
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      rt_node_id = it_node_id






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods GET_SUB_CONTEXT
   #     returning
   #       value(RV_SUB_CONTEXT) type IF_MSGM_MESSAGE_MANAGER=>TY_SUB_CONTEXT .
   #

   def get_sub_context(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      clear(id:rv_sub_context)





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods GET_TASK_REGION_BO_DETAILS
   #     importing
   #       !IV_ECO_NAME type STRING
   #     exporting
   #       !EV_HAS_TASK_REGION type SESF_BOOLEAN
   #       !EV_ECO_ROOT_NODE_NAME type STRING
   #       !EV_BO_NAME type STRING
   #       !EV_BO_NODE_NAME type STRING .
   #

   def get_task_region_bo_details(*_a,iv_eco_name:nil,_i:nil,_e:nil,_b:nil)
      iv_eco_name=nil
      if _a && _a.size>0
         iv_eco_name=_a[0]
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lo_association_descriptor = nil # if_esf_association_desc.new

      #"#EC NEEDED
      lo_bo_descriptor = nil # if_esf_bo_desc.new

      lo_root_node_descriptor = nil # if_esf_bo_node_desc.new

      lr_bsa_primary_node = nil # DATA.new

      lx_esf_metadata_error = nil # cx_esf_metadata_error.new

      ev_has_task_region = abap_false

      clear(id:ev_bo_name)
      clear(id:ev_bo_node_name)
      clear(id:ev_eco_root_node_name)
      begin
         lo_bo_descriptor = Cl_esf_descriptor_factory::get_bo_descriptor(in_bo_proxy_name:iv_eco_name)

         lo_root_node_descriptor = lo_bo_descriptor.get_root_bo_node_descriptor(_b:binding)

         #*/    Return Root Node Name

         ev_eco_root_node_name = lo_root_node_descriptor.get_proxy_name(_b:binding)


      rescue Cx_esf_metadata_error=>lx_esf_metadata_error
         handle_error(ix_exception:lx_esf_metadata_error)


      end
      begin
         lo_association_descriptor = lo_root_node_descriptor.get_association_descriptor(association_proxy_name:@gc_task_association_name)

         lr_bsa_primary_node = 'BSA_I_PRMRY_NODE'.new

         assign(to:ls_bsa_primary_node)
         abap("SELECT SINGLE * FROM ( 'BSA_I_PRMRY_NODE' ) INTO ls_bsa_primary_node WHERE bo_name = iv_eco_name AND bo_node_name = ev_eco_root_node_name")
         #"#EC CI_DYNTAB
         if sy.subrc.isINITIAL()
            assign(to:lv_prmry_bo_name)

            assign(to:lv_prmry_node_name)

            ev_has_task_region = abap_true



            ev_bo_name = lv_prmry_bo_name



            ev_bo_node_name = lv_prmry_node_name




         else
            assert(o:0 == 1)


         end


      rescue Cx_esf_metadata_error
         ev_has_task_region = abap_false

         ev_bo_name = space

         ev_bo_node_name = space


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods SEND_UPDATE_TASK_ASSOCIATION .
   #
   #

   def send_update_task_association(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lt_affected_association = nil # sesf_string_tab.new

      if @mv_has_task_region == abap_true
         abap("INSERT gc_task_association_name INTO TABLE lt_affected_association")


         loop(at:@mt_task_region_node_id){
            @mo_change_handler.notify_update(_i:{
               "in_bo_node_name" => @mv_bo_root_node_name,
               "in_bo_node_id" => lv_node_id,
               "in_attributes_changed" => abap_false,
               "in_properties_changed" => abap_false,
               "in_associations_changed" => abap_true,
               "in_affected_associations" => lt_affected_association,
            }, _b:binding)



         }



      end






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods PUT_MESSAGES_INTO_HANDLER
   #     redefinition .

   def put_messages_into_handler(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lo_message = nil # cm_esi_root.new

      lt_messages_manager = nil # cm_esi_root = tt_esi_root.new

      #"Messages for MessageManager
      lt_messages_handler = nil # cm_esi_root = tt_esi_root.new

      #"Messages for ESF Message Handler
      #*/Delegation at present not implemented

      #*/CALL METHOD SUPER->PUT_MESSAGES_INTO_HANDLER

      #*/  EXPORTING

      #*/    IN_MESSAGE_HANDLER = IN_MESSAGE_HANDLER

      #*/    IN_MESSAGES        = IN_MESSAGES.

      #* Shall Transition error messages be notified directly?

      #* Background: The ESI Contract requires that transition E messages

      #*             have to be notified directly in order to prevent

      #*             possible succeeding SAVE and/or EXECUTE_ACTION calls

      if @mv_notify_trans_error == abap_true || @mv_notify_any_error == abap_true
         loop(at:in_messages, into:lo_message){
            if lo_message.severity == Cm_esi_root::co_severity_error && lo_message.origin_location.bo_name == @mv_bo_name && ( @mv_notify_trans_error == abap_true && lo_message.lifetime == Cm_esi_root::co_lifetime_transition || @mv_notify_any_error == abap_true )
               append(from:lo_message, to:lt_messages_handler)


            else
               append(from:lo_message, to:lt_messages_manager)


            end


         }

         if lt_messages_handler.isNotINITIAL()
            super.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:lt_messages_handler)





         end

         #*   Put the rest into Message Manager


         if lt_messages_manager.isNotINITIAL()
            @mo_message_manager.add_messages(lt_messages_manager)





         end

         #* Put all messages into Message Manager



      else
         @mo_message_manager.add_messages(in_messages)



      end






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods PUT_MESSAGES
   #     importing
   #       !IO_MESSAGE_HANDLER type ref to IF_ESF_MESSAGE_HANDLER
   #       !IT_MESSAGES type CM_ESI_ROOT=>TT_ESI_ROOT
   #       !IV_IGNORE_WRONG_ORIG_LOCATION type SYBOOLEAN default ABAP_FALSE .

   def put_messages(*_a,io_message_handler:nil,it_messages:nil,iv_ignore_wrong_orig_location:nil,_i:nil,_e:nil,_b:nil)
      io_message_handler=it_messages=iv_ignore_wrong_orig_location=nil
      if _a && _a.size>0
         io_message_handler=_a[0]
         it_messages=_a[1] if _a.size>1
         iv_ignore_wrong_orig_location=_a[2] if _a.size>2
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lt_messages = nil # cm_esi_root = tt_esi_root.new

      lt_messages_handler = nil # cm_esi_root = tt_esi_root.new

      lt_messages_manager = nil # cm_esi_root = tt_esi_root.new

      lx_exception = nil # cx_static_check.new

      lo_message = nil # cm_esi_root.new


      check( it_messages.isNotINITIAL() )
      assert(o:io_message_handler.isBOUND())
      begin
         lt_messages = it_messages

         #*     handle dependent on location and lifetime

         ls_location.bo_name = @mv_bo_name

         ls_location.bo_node_name = @mv_bo_root_node_name

         loop(at:lt_messages){
            if lo_message.origin_location.bo_name != @mv_bo_name
               if iv_ignore_wrong_orig_location == abap_true
                  abap("DELETE lt_messages")



               else
                  if lo_message.lifetime == Cm_esi_root::co_lifetime_transition
                     clear(id:lo_message)

                     lo_message = lo_message.copy_with_new_location(new_origin_location:ls_location)



                     append(from:lo_message, to:lt_messages_handler)

                     abap("DELETE lt_messages")



                  else
                     append(from:lo_message, to:lt_messages_manager)
                     abap("DELETE lt_messages")


                  end



               end




            end


         }
         if lt_messages.isNotINITIAL()
            io_message_handler.add_messages(lt_messages)





         end

         if lt_messages_handler.isNotINITIAL()
            io_message_handler.add_messages(lt_messages_handler)





         end

         #*     add messages to manager as handler can not handle these

         if lt_messages_manager.isNotINITIAL()
            @mo_message_manager.add_messages(lt_messages_manager)





         end


      rescue Cx_esf_message_handler=>lx_exception
         raise cx_fatal_exception.new


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_a1s_service_provider_eco_i_add_mapped_messages(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################




      @mo_adaptation_handler.map_messages(_i:{
         "out_messages" => lt_message,
      }, _e:{
         "in_messages" => "it_message",
      }, _b:binding)

      @mo_message_manager.add_messages(lt_message)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_a1s_service_provider_eco_i_add_mapped_notifications(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################




      ls_mapped_notification = if_a1s_service_provider_eco_i_map_change_notifications(is_change_notification)

      Cl_bsa_service_provider_co::put_change_notifs_into_handler(in_change_notifications:ls_mapped_notification, in_change_handler:io_change_handler)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_a1s_service_provider_eco_i_get_bo_name(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      rv_bo_name = @mv_bo_name






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_a1s_service_provider_eco_i_get_bo_root_node_name(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      rv_bo_root_node_name = @mv_bo_root_node_name






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_a1s_service_provider_eco_i_map_change_notifications(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      @mo_adaptation_handler.map_change_notifications(_i:{
         "out_change_notifications" => rs_change_notification,
      }, _e:{
         "in_change_notifications" => "is_change_notification",
      }, _b:binding)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_a1s_service_provider_eco_i_map_put_messages_into_handler(*_a,_i:nil,_e:nil,_b:nil)


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lt_messages = nil # cm_esi_root = tt_esi_root.new

      lx_exception = nil # cx_static_check.new

      begin
         @mo_adaptation_handler.map_messages(_i:{
            "out_messages" => lt_messages,
         }, _e:{
            "in_messages" => "it_messages",
         }, _b:binding)

         put_messages(io_message_handler:io_message_handler, it_messages:lt_messages)


      rescue Cx_bsa_runtime=>lx_exception
         raise cx_fatal_exception.new


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   @mo_change_handler = nil # if_esf_change_handler.new
   @mo_message_manager = nil # if_msgm_message_manager.new
   @mo_rnid_manager = nil # cl_a1s_rnid_manager_eco.new
   @mv_notify_any_error = nil # sesf_boolean.new
   include If_msgm_message_manager
   @gc_task_association_name = 'TO_OPEN_TASK'
   def gc_task_association_name;'TO_OPEN_TASK';  end
   @mo_provider_context = nil # if_esf_provider_context.new
   @mo_task_region_helper = nil # if_coutl_task_region_helper.new
   @mt_task_region_node_id = nil # sesf_bo_node_id_tab.new
   @mv_bo_name = nil # string.new
   @mv_bo_root_node_name = nil # string.new
   @mv_has_task_region = nil # sesf_boolean.new
   @mv_notify_trans_error = nil # sesf_boolean.new

end
