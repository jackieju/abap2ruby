# Generated by Abap2Ruby(https://github.com/jackieju/abap2ruby)
class Cl_a1s_service_provider_eco < Cl_bsa_service_provider_co

   def if_esf_provider_access_i_check(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lt_messages = if_esf_types.ty_messages.new

      lt_node_ids = sesf_bo_node_id_tab.new

      lx_bsa_runtime = cx_bsa_runtime.new

      lx_root = cx_root.new

      @lt_node_ids = in_node_ids

      SORT lt_node_ids stable
      abap("DELETE ADJACENT DUPLICATES FROM lt_node_ids")
      begin
         mo_adaptation_handler.check(hash_to_params(params))

         put_messages(io_message_handler:in_message_handler, it_messages:@lt_messages, iv_ignore_wrong_orig_location:abap_true)

         #"XRG: ignore wrong (non ECO) origin location as otherwise we would break the lifetime handling mechanism or handler would dump

      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_modify(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @mv_notify_trans_error = abap_true

      super.if_esf_provider_access_i_modify(hash_to_params(params))

      @mv_notify_trans_error = abap_false

      mo_rnid_manager.sync_changes(hash_to_params(params))






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_retrieve(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lt_messages = if_esf_types.ty_messages.new

      lt_sync_notifications = if_esf_types.tt_sync_notifications.new

      #"#EC NEEDED
      lx_bsa_runtime = cx_bsa_runtime.new

      lx_root = cx_root.new

      begin
         mo_adaptation_handler.retrieve(hash_to_params(params))

         #*/    Use Message Handler (if provided)

         put_messages(io_message_handler:in_message_handler, it_messages:@lt_messages)

         if in_buffer_sync_handler .isBOUND() && lines(@lt_sync_notifications) .isNotINITIAL()
            in_buffer_sync_handler.notify_buffer_syncs(hash_to_params(params))





         end

         mo_rnid_manager.sync_data(hash_to_params(params))


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_retrieve_by_association(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lt_sync_notifications = if_esf_types.tt_sync_notifications.new

      #"#EC NEEDED
      lt_messages = if_esf_types.ty_messages.new

      lt_node_id_for_task_search = sesf_bo_node_id_tab.new

      lx_bsa_runtime = cx_bsa_runtime.new

      lx_root = cx_root.new

      lt_existing_node_id = sesf_bo_node_id_tab.new

      lt_failed_node_id = sesf_bo_node_id_tab.new

      lrt_out_data = data.new

      lt_requested_attributes = sesf_string_tab.new

      if mv_has_task_region == abap_true && in_association_name == gc_task_association_name && in_bo_node_name == mv_bo_root_node_name && in_bo_name == mv_bo_name
         begin
            @lt_existing_node_id = in_node_ids

            @lrt_out_data = mo_provider_context.get_lcp_facade().get_bo_node_table_container(in_bo_name:@mv_bo_name, in_bo_node_name:@mv_bo_root_node_name)

            assign(to:lt_out_data)
            abap("INSERT if_esf_types => co_node_id_proxy_name INTO TABLE lt_requested_attributes")
            mo_adaptation_handler.if_esf_lcp_i_retrieve(hash_to_params(params))

            out_failed_source_node_ids = @lt_failed_node_id

            loop(at:@lt_failed_node_id){
               abap("DELETE TABLE lt_existing_node_id FROM <ls_node_id>")

               #"#EC CI_STDSEQ

            }
            if lines(@lt_existing_node_id) > 0
               @mt_task_region_node_id = @lt_existing_node_id



               @lt_node_id_for_task_search = get_node_id_for_task_region(@lt_existing_node_id)



               mo_task_region_helper.retrieve_by_association(hash_to_params(params))





            end


         rescue cx_root=>lx_root
            handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

            handle_error(ix_exception:@lx_root)


         end


      else
         begin
            mo_adaptation_handler.retrieve_by_association(hash_to_params(params))

            #*/      Use Message Handler (if provided)

            put_messages(io_message_handler:in_message_handler, it_messages:@lt_messages)

            if in_buffer_sync_handler .isBOUND() && lines(@lt_sync_notifications) .isNotINITIAL()
               in_buffer_sync_handler.notify_buffer_syncs(hash_to_params(params))





            end

            mo_rnid_manager.sync_assoc(hash_to_params(params))


         rescue cx_root=>lx_root
            handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

            handle_error(ix_exception:@lx_root)


         end


      end

      if in_fill_failed_source_node_ids == abap_false
         clear(id:out_failed_source_node_ids)



      end






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_retrieve_root_node_id(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lv_skipped = char1.new

      @lv_skipped = abap_false

      mo_rnid_manager.rrnid(hash_to_params(params))

      if lv_skipped == abap_true
         super.if_esf_provider_access_i_retrieve_root_node_id(hash_to_params(params))





      end






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_init_i_init(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lo_lcp_facade = if_esf_lcp_facade.new

      lv_task_bo_name = string.new

      lv_task_bo_node_name = string.new

      lx_esf_core_service = cx_esf_core_service.new

      super.if_esf_provider_init_i_init(hash_to_params(params))

      @mo_provider_context = in_provider_context

      begin
         @lo_lcp_facade = in_provider_context.get_lcp_facade()


      rescue cx_esf_core_service=>lx_esf_core_service
         handle_error(ix_exception:@lx_esf_core_service)


      end
      cl_msgm_message_manager.get_instance(hash_to_params(params))

      #*/Store BO Name & Change Handler

      @mv_bo_name = in_bo_name

      @mo_change_handler = in_provider_context.change_handler

      get_task_region_bo_details(hash_to_params(params))

      if mv_has_task_region == abap_true
         if lv_task_bo_name .isINITIAL() || lv_task_bo_node_name .isINITIAL() || mv_bo_root_node_name .isINITIAL()
            raise cx_fatal_exception.new




         else
            @mo_task_region_helper = cl_coutl_task_region_helper.create_task_region_helper(in_bo_name:@lv_task_bo_name, in_bo_node_name:@lv_task_bo_node_name, in_lcp_facade:@lo_lcp_facade)



         end




      end

      #*/Instantiate RNID Manager

      begin


      rescue cx_esf_core_service=>lx_esf_core_service
         handle_error(ix_exception:@lx_esf_core_service)


      end
      @mv_notify_any_error = abap_undefined






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_interact_ctrl_i_close_session(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      super.if_esf_provider_interact_ctrl_i_close_session(hash_to_params(params))

      cl_msgm_message_manager.close_session(hash_to_params(params))
      ( iv_session_handover = session_hand_over )






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_interact_ctrl_i_do_post_processing(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################




      lx_bsa_runtime = cx_bsa_runtime.new

      lv_skip_check = sesf_boolean.new

      #* map messages necessary to catch messages raised during save

      #* if we keep it here individual calls to mo_adaptation_handler->map_messages are no longer needed

      #* call have to be done before super->if_esf_provider_interact_ctrl~do_post_processing

      #* so that errors propagated by handle_error( lx_bsa_runtime ) are displayed correctly

      begin
         mo_adaptation_handler.map_messages(_i:{
            "out_messages" => @lt_out_message,
         }, _e:{
            "in_messages" => inout_messages,
         })

         inout_messages = @lt_out_message


      rescue cx_bsa_runtime=>lx_bsa_runtime
         handle_error(@lx_bsa_runtime)


      end
      super.if_esf_provider_interact_ctrl_i_do_post_processing(hash_to_params(params))

      if ( in_overruling_code .isSUPPLIED() && in_overruling_code == if_esf_types.co_oc_in_ovs_phase )
         @lv_skip_check = abap_true




      else
         @lv_skip_check = abap_false



      end

      mo_message_manager.map_messages(hash_to_params(params))






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_query_i_query(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      super.if_esf_provider_query_i_query(hash_to_params(params))

      mo_rnid_manager.sync_data(hash_to_params(params))






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_transact_ctrl_i_on_after_save_transaction(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      super.if_esf_provider_transact_ctrl_i_on_after_save_transaction(hash_to_params(params))

      add_message_on_after_save_trx(iv_rejected:in_rejected)

      send_update_task_association()






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_action_i_execute_action(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      if mv_notify_any_error == abap_undefined
         @mv_notify_any_error = abap_true





      end

      @mv_notify_trans_error = abap_true

      super.if_esf_provider_action_i_execute_action(hash_to_params(params))

      @mv_notify_any_error = abap_undefined

      @mv_notify_trans_error = abap_false

      mo_rnid_manager.sync_changes(hash_to_params(params))






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def add_message_on_after_save_trx(iv_rejected:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lo_message = cm_esi_t100_adapter.new

      ls_orig_loc = cm_esi_root.ty_message_location.new

      ls_msg = symsg.new

      ls_orig_loc.bo_name = @mv_bo_name

      if iv_rejected == abap_true
         ls_msg.msgno = '001'



         ls_msg.msgty = 'E'




      else
         ls_msg.msgno = '000'

         ls_msg.msgty = 'S'



      end

      ls_msg.msgid = 'MSGM_ON_SAVE_TRANS'

      @lo_message = cm_esi_t100_adapter.CREATE(symptom:space, lifetime:cm_esi_root.co_lifetime_transition, origin_location:@ls_orig_loc, symsg:@ls_msg)

      mo_message_manager.add_message(hash_to_params(params))






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def get_map_msgs_check_incoming(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      rv_check_incomming = abap_false






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def get_node_id_for_task_region(it_node_id:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      rt_node_id = it_node_id






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def get_sub_context(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      clear(id:rv_sub_context)





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def get_task_region_bo_details(iv_eco_name:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lo_association_descriptor = if_esf_association_desc.new

      #"#EC NEEDED
      lo_bo_descriptor = if_esf_bo_desc.new

      lo_root_node_descriptor = if_esf_bo_node_desc.new

      lr_bsa_primary_node = DATA.new

      lx_esf_metadata_error = cx_esf_metadata_error.new

      ev_has_task_region = abap_false

      clear(id:ev_bo_name)
      clear(id:ev_bo_node_name)
      clear(id:ev_eco_root_node_name)
      begin
         @lo_bo_descriptor = cl_esf_descriptor_factory.get_bo_descriptor(in_bo_proxy_name:iv_eco_name)

         @lo_root_node_descriptor = lo_bo_descriptor.get_root_bo_node_descriptor()

         #*/    Return Root Node Name

         ev_eco_root_node_name = lo_root_node_descriptor.get_proxy_name()


      rescue cx_esf_metadata_error=>lx_esf_metadata_error
         handle_error(ix_exception:@lx_esf_metadata_error)


      end
      begin
         @lo_association_descriptor = lo_root_node_descriptor.get_association_descriptor(association_proxy_name:@gc_task_association_name)

         lr_bsa_primary_node = ( 'BSA_I_PRMRY_NODE' ).new

         assign(to:ls_bsa_primary_node)
         abap("SELECT SINGLE * FROM ( 'BSA_I_PRMRY_NODE' ) INTO <ls_bsa_primary_node> WHERE bo_name = iv_eco_name AND bo_node_name = ev_eco_root_node_name")
         #"#EC CI_DYNTAB
         if sy.subrc .isINITIAL()
            assign(to:lv_prmry_bo_name)

            assign(to:lv_prmry_node_name)

            ev_has_task_region = abap_true



            ev_bo_name = lv_prmry_bo_name



            ev_bo_node_name = lv_prmry_node_name




         else
            assert(o:0 == 1)


         end


      rescue cx_esf_metadata_error
         ev_has_task_region = abap_false

         ev_bo_name = space

         ev_bo_node_name = space


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def send_update_task_association(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lt_affected_association = sesf_string_tab.new

      if mv_has_task_region == abap_true
         abap("INSERT gc_task_association_name INTO TABLE lt_affected_association")


         loop(at:@mt_task_region_node_id){
            mo_change_handler.notify_update(hash_to_params(params))



         }



      end






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def put_messages_into_handler(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lo_message = cm_esi_root.new

      lt_messages_manager = cm_esi_root.tt_esi_root.new

      #"Messages for MessageManager
      lt_messages_handler = cm_esi_root.tt_esi_root.new

      #"Messages for ESF Message Handler
      #*/Delegation at present not implemented

      #*/CALL METHOD SUPER->PUT_MESSAGES_INTO_HANDLER

      #*/  EXPORTING

      #*/    IN_MESSAGE_HANDLER = IN_MESSAGE_HANDLER

      #*/    IN_MESSAGES        = IN_MESSAGES.

      #* Shall Transition error messages be notified directly?

      #* Background: The ESI Contract requires that transition E messages

      #*             have to be notified directly in order to prevent

      #*             possible succeeding SAVE and/or EXECUTE_ACTION calls

      if mv_notify_trans_error == abap_true || mv_notify_any_error == abap_true
         loop(at:in_messages, into:@lo_message){
            if lo_message.severity == cm_esi_root.co_severity_error && lo_message.origin_location.bo_name == mv_bo_name && ( mv_notify_trans_error == abap_true && lo_message.lifetime == cm_esi_root.co_lifetime_transition || mv_notify_any_error == abap_true )
               append(from:@lo_message, to:lt_messages_handler)


            else
               append(from:@lo_message, to:lt_messages_manager)


            end


         }

         if lt_messages_handler .isNotINITIAL()
            super.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:@lt_messages_handler)





         end

         #*   Put the rest into Message Manager


         if lt_messages_manager .isNotINITIAL()
            mo_message_manager.add_messages(@lt_messages_manager)





         end

         #* Put all messages into Message Manager



      else
         mo_message_manager.add_messages(in_messages)



      end






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def put_messages(iv_ignore_wrong_orig_location:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lt_messages = cm_esi_root.tt_esi_root.new

      lt_messages_handler = cm_esi_root.tt_esi_root.new

      lt_messages_manager = cm_esi_root.tt_esi_root.new

      lx_exception = cx_static_check.new

      lo_message = cm_esi_root.new


      check( it_messages .isNotINITIAL() )
      assert(o:io_message_handler .isBOUND())
      begin
         @lt_messages = it_messages

         #*     handle dependent on location and lifetime

         ls_location.bo_name = @mv_bo_name

         ls_location.bo_node_name = @mv_bo_root_node_name

         loop(at:@lt_messages){
            if lo_message.origin_location.bo_name != mv_bo_name
               if iv_ignore_wrong_orig_location == abap_true
                  abap("DELETE lt_messages")



               else
                  if lo_message.lifetime == cm_esi_root.co_lifetime_transition
                     clear(id:@lo_message)

                     @lo_message = lo_message.copy_with_new_location(new_origin_location:@ls_location)



                     append(from:@lo_message, to:lt_messages_handler)

                     abap("DELETE lt_messages")



                  else
                     append(from:@lo_message, to:lt_messages_manager)
                     abap("DELETE lt_messages")


                  end



               end




            end


         }
         if lt_messages .isNotINITIAL()
            io_message_handler.add_messages(@lt_messages)





         end

         if lt_messages_handler .isNotINITIAL()
            io_message_handler.add_messages(@lt_messages_handler)





         end

         #*     add messages to manager as handler can not handle these

         if lt_messages_manager .isNotINITIAL()
            mo_message_manager.add_messages(@lt_messages_manager)





         end


      rescue cx_esf_message_handler=>lx_exception
         raise cx_fatal_exception.new


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_a1s_service_provider_eco_i_add_mapped_messages(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################




      mo_adaptation_handler.map_messages(_i:{
         "out_messages" => @lt_message,
      }, _e:{
         "in_messages" => it_message,
      })

      mo_message_manager.add_messages(@lt_message)






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_a1s_service_provider_eco_i_add_mapped_notifications(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################




      @ls_mapped_notification = if_a1s_service_provider_eco_i_map_change_notifications(is_change_notification)

      cl_bsa_service_provider_co.put_change_notifs_into_handler(in_change_notifications:@ls_mapped_notification, in_change_handler:io_change_handler)






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_a1s_service_provider_eco_i_get_bo_name(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      rv_bo_name = @mv_bo_name






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_a1s_service_provider_eco_i_get_bo_root_node_name(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      rv_bo_root_node_name = @mv_bo_root_node_name






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_a1s_service_provider_eco_i_map_change_notifications(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      mo_adaptation_handler.map_change_notifications(_i:{
         "out_change_notifications" => rs_change_notification,
      }, _e:{
         "in_change_notifications" => is_change_notification,
      })






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_a1s_service_provider_eco_i_map_put_messages_into_handler(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lt_messages = cm_esi_root.tt_esi_root.new

      lx_exception = cx_static_check.new

      begin
         mo_adaptation_handler.map_messages(_i:{
            "out_messages" => @lt_messages,
         }, _e:{
            "in_messages" => it_messages,
         })

         put_messages(io_message_handler:io_message_handler, it_messages:@lt_messages)


      rescue cx_bsa_runtime=>lx_exception
         raise cx_fatal_exception.new


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end


end
