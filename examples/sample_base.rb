# Generated by Abap2Ruby(https://github.com/jackieju/abap2ruby)
require_relative "if_esf_provider_init.rb"
require_relative "if_sample_base.rb"

class Sample_base

   # methods IF_ESF_PROVIDER_ACCESS~MODIFY
   #     redefinition .
   #

   def if_esf_provider_access_i_modify(*_a,in_change_handler:nil,in_message_handler:nil,in_modifications:nil,_i:nil,_e:nil,_b:nil)

      in_change_handler=nil;in_message_handler=nil;in_modifications=nil;
      if _a && _a.size>0
         in_change_handler=_a[0]
         in_message_handler=_a[1] if _a.size>1
         in_modifications=_a[2] if _a.size>2
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      if @mv_do_retrieve_check == abap_true
         @mv_do_retrieve_check = abap_false





      end

      super_method(Sample_base, :if_esf_provider_access_i_modify).call(_i:{
         "in_change_handler" => in_change_handler,
         "in_message_handler" => in_message_handler,
      }, _b:binding)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_ACCESS~RETRIEVE
   #     redefinition .
   #
   #

   def if_esf_provider_access_i_retrieve(*_a,in_bo_node_name:nil,in_node_ids:nil,in_requested_image:If_esf_types::Co_image_transactional_buffer,in_edit_mode:nil,in_requested_attributes:nil,in_message_handler:nil,in_buffer_sync_handler:nil,_i:nil,_e:nil,_b:nil)
 p "e:#{_e.inspect}"
      in_bo_node_name=nil;in_node_ids=nil;in_requested_image=If_esf_types::Co_image_transactional_buffer;in_edit_mode=nil;in_requested_attributes=nil;in_message_handler=nil;in_buffer_sync_handler=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_ids=_a[1] if _a.size>1
         in_requested_image=_a[2] if _a.size>2
         in_edit_mode=_a[3] if _a.size>3
         in_requested_attributes=_a[4] if _a.size>4
         in_message_handler=_a[5] if _a.size>5
         in_buffer_sync_handler=_a[6] if _a.size>6
      end
      out_data=out_failed_node_ids=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lt_message = nil # cm_esi_root = tt_esi_root.new

      lx_esf_core_service = nil # cx_esf_core_service.new

      super_method(Sample_base, :if_esf_provider_access_i_retrieve).call(_i:{
         "in_bo_node_name" => in_bo_node_name,
         "in_node_ids" => in_node_ids,
         "in_requested_image" => in_requested_image,
         "in_edit_mode" => in_edit_mode,
         "in_requested_attributes" => in_requested_attributes,
         "in_message_handler" => in_message_handler,
         "in_buffer_sync_handler" => in_buffer_sync_handler,
      }, _e:{
         "out_data" => out_data,
         "out_failed_node_ids" => out_failed_node_ids,
      }, _b:binding)

      if @mv_do_retrieve_check == abap_true && in_requested_image == If_esf_types::Co_image_transactional_buffer && lines(out_failed_node_ids) != lines(in_node_ids)
         begin
            mo_adaptation_handler.check(_i:{
               "out_messages" => lt_message,
            }, _e:{
               "in_bo_node_name" => "in_bo_node_name",
               "in_node_ids" => "in_node_ids",
               "in_check_scope" => "If_esf_types::Co_check_scope_substructure",
            }, _b:binding)


         rescue Cx_esf_core_service=>lx_esf_core_service
            raise cx_fatal_exception.new


         end

         if lt_message.isNotINITIAL()
            mo_message_manager.add_messages(lt_message)





         end


         @mv_do_retrieve_check = abap_false





      end






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_INIT~INIT
   #     redefinition .

   def if_esf_provider_init_i_init(*_a,in_provider_context:nil,in_bo_name:nil,inout_preferred_trx_pattern:If_esf_provider_init::Co_tp_save_and_continue,_i:nil,_e:nil,_b:nil)

      in_provider_context=nil;in_bo_name=nil;inout_preferred_trx_pattern=If_esf_provider_init::Co_tp_save_and_continue;
      if _a && _a.size>0
         in_provider_context=_a[0]
         in_bo_name=_a[1] if _a.size>1
         inout_preferred_trx_pattern=_a[2] if _a.size>2
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      @mo_provider_context = in_provider_context






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods ADD_NODE_FOR_CALLBACK_RRNID
   #     importing
   #       !IV_BO_NODE_NAME type STRING .
   #

   def add_node_for_callback_rrnid(*_a,iv_bo_node_name:nil,_i:nil,_e:nil,_b:nil)

      iv_bo_node_name=nil;
      if _a && _a.size>0
         iv_bo_node_name=_a[0]
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      abap("insert iv_bo_node_name into TABLE mt_callback_bo_node_name")
      if mo_rnid_manager.isBOUND()
         mo_rnid_manager.exclude(iv_node_name:iv_bo_node_name)





      end






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods ADD_NODE_FOR_HEURISTIC_RRNID
   #     importing
   #       !IV_BO_NODE_NAME type STRING .
   #

   def add_node_for_heuristic_rrnid(*_a,iv_bo_node_name:nil,_i:nil,_e:nil,_b:nil)

      iv_bo_node_name=nil;
      if _a && _a.size>0
         iv_bo_node_name=_a[0]
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      abap("insert iv_bo_node_name into TABLE mt_heuristic_bo_node_name")
      if mo_rnid_manager.isBOUND()
         mo_rnid_manager.include(iv_node_name:iv_bo_node_name)





      end






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods ADD_NODE_FOR_DELEGATION_RRNID
   #     importing
   #       !IV_BO_NODE_NAME type STRING
   #       !IV_CORE_BO_NAME type STRING
   #       !IV_CORE_BO_NODE_NAME type STRING .
   #

   def add_node_for_delegation_rrnid(*_a,iv_bo_node_name:nil,iv_core_bo_name:nil,iv_core_bo_node_name:nil,_i:nil,_e:nil,_b:nil)

      iv_bo_node_name=nil;iv_core_bo_name=nil;iv_core_bo_node_name=nil;
      if _a && _a.size>0
         iv_bo_node_name=_a[0]
         iv_core_bo_name=_a[1] if _a.size>1
         iv_core_bo_node_name=_a[2] if _a.size>2
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      ls_lcp_bo_node_name = nil # ty_lcp_bo_node_name.new

      ls_lcp_bo_node_name.bo_node_name = iv_bo_node_name

      ls_lcp_bo_node_name.core_bo_name = iv_core_bo_name

      ls_lcp_bo_node_name.core_bo_node_name = iv_core_bo_node_name

      abap("INSERT ls_lcp_bo_node_name INTO TABLE mt_lcp_bo_node_name")
      if mo_rnid_manager.isBOUND()
         mo_rnid_manager.exclude(iv_node_name:iv_bo_node_name)





      end






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods CALLBACK_RRNID
   #     importing
   #       !IN_BO_NODE_NAME type STRING
   #       !IN_NODE_IDS type SESF_BO_NODE_ID_TAB
   #       !IN_REQUESTED_IMAGE type IF_ESF_TYPES=>TY_IMAGE default IF_ESF_TYPES=>CO_IMAGE_TRANSACTIONAL_BUFFER
   #     exporting
   #       !OUT_LINKS type SESF_ASSOCIATION_LINK_TAB
   #     raising
   #       CX_ESF_CORE_SERVICE .
   #

   def callback_rrnid(*_a,in_bo_node_name:nil,in_node_ids:nil,in_requested_image:If_esf_types::Co_image_transactional_buffer,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_node_ids=nil;in_requested_image=If_esf_types::Co_image_transactional_buffer;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_ids=_a[1] if _a.size>1
         in_requested_image=_a[2] if _a.size>2
      end
      out_links=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      assert(o:1 == 0)





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods DISABLE_RETRIEVE_CHECK .

   def disable_retrieve_check(*_a,_i:nil,_e:nil,_b:nil)


      if _a && _a.size>0
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      @mv_do_retrieve_check = abap_false






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods USE_CALLBACK_FOR_RRNID
   #     importing
   #       !IV_BO_NODE_NAME type STRING
   #     returning
   #       value(RV_RESULT) type BOOLEAN .
   #

   def use_callback_for_rrnid(*_a,iv_bo_node_name:nil,_i:nil,_e:nil,_b:nil)

      iv_bo_node_name=nil;
      if _a && _a.size>0
         iv_bo_node_name=_a[0]
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      read_table(id:@mt_callback_bo_node_name, from:iv_bo_node_name)
      if sy.subrc == 0
         rv_result = abap_true




      else
         rv_result = abap_false



      end






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods USE_DELEGATION_FOR_RRNID
   #     importing
   #       !IV_BO_NODE_NAME type STRING
   #     returning
   #       value(RV_RESULT) type BOOLEAN .
   #

   def use_delegation_for_rrnid(*_a,iv_bo_node_name:nil,_i:nil,_e:nil,_b:nil)

      iv_bo_node_name=nil;
      if _a && _a.size>0
         iv_bo_node_name=_a[0]
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      read_table(id:@mt_lcp_bo_node_name)
      if sy.subrc == 0
         rv_result = abap_true




      else
         rv_result = abap_false



      end






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods USE_HEURISTIC_FOR_RRNID
   #     importing
   #       !IV_BO_NODE_NAME type STRING
   #     returning
   #       value(RV_RESULT) type BOOLEAN .
   #

   def use_heuristic_for_rrnid(*_a,iv_bo_node_name:nil,_i:nil,_e:nil,_b:nil)

      iv_bo_node_name=nil;
      if _a && _a.size>0
         iv_bo_node_name=_a[0]
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      read_table(id:@mt_heuristic_bo_node_name, from:iv_bo_node_name)
      if sy.subrc == 0
         rv_result = abap_true




      else
         rv_result = abap_false



      end






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods HEURISTIC_RRNID
   #     importing
   #       !IN_BO_NODE_NAME type STRING
   #       !IN_NODE_IDS type SESF_BO_NODE_ID_TAB
   #       !IN_REQUESTED_IMAGE type IF_ESF_TYPES=>TY_IMAGE default IF_ESF_TYPES=>CO_IMAGE_TRANSACTIONAL_BUFFER
   #     exporting
   #       !OUT_LINKS type SESF_ASSOCIATION_LINK_TAB
   #     raising
   #       CX_ESF_CORE_SERVICE .
   #

   def heuristic_rrnid(*_a,in_bo_node_name:nil,in_node_ids:nil,in_requested_image:If_esf_types::Co_image_transactional_buffer,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_node_ids=nil;in_requested_image=If_esf_types::Co_image_transactional_buffer;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_ids=_a[1] if _a.size>1
         in_requested_image=_a[2] if _a.size>2
      end
      out_links=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lv_node_id = nil # sesf_bo_node_id.new

      lv_node_id_determined = nil # boolean.new

      ls_origin_location = nil # cm_esi_root = ty_message_location.new

      lo_message = nil # cm_sample_base.new


      lv_root_node_name = nil # string.new

      lv_bo_name = nil # string.new

      lt_out_failed_node_id = nil # sesf_bo_node_id_tab.new

      lrt_core_bo_out_data = nil # data.new

      lt_requested_attributes = nil # sesf_string_tab.new


      lv_root_node_name = if_a1s_service_provider_eco_i_get_bo_root_node_name(_b:binding)

      lv_bo_name = if_a1s_service_provider_eco_i_get_bo_name(_b:binding)

      if in_bo_node_name == lv_root_node_name
         lrt_core_bo_out_data = @mo_provider_context.get_lcp_facade(_b:binding).get_bo_node_table_container(in_bo_name:lv_bo_name, in_bo_node_name:lv_root_node_name)



         assign(to:lt_core_bo_out_data)

         abap("INSERT if_esf_types => co_node_id_proxy_name INTO TABLE lt_requested_attributes")


         mo_adaptation_handler.if_esf_lcp_i_retrieve(_i:{
            "in_bo_node_name" => in_bo_node_name,
            "in_node_ids" => in_node_ids,
            "in_edit_mode" => If_esf_types::Co_read_only,
            "in_requested_image" => in_requested_image,
            "in_requested_attributes" => lt_requested_attributes,
         }, _e:{
            "out_failed_node_ids" => lt_out_failed_node_id,
            "out_data" => lt_core_bo_out_data,
         }, _b:binding)



         if lines(lt_out_failed_node_id) == 0
            lt_out_links = if_sample_base_i_source_to_target_mapping(in_node_ids)





         end



      else
         mo_adaptation_handler.get_first_retrved_root_node_id(_i:{
            "ev_first_ret_data_root_node_id" => lv_node_id,
            "ev_first_root_id_determined" => lv_node_id_determined,
         }, _b:binding)

         if lv_node_id_determined == abap_false || ( lv_node_id.isINITIAL() && lv_node_id_determined == abap_true )
            ls_origin_location.bo_name = lv_bo_name





            mo_message_manager.add_message(lo_message)




         else
            if if_sample_base_i_check_root_node_existence(iv_node_id:lv_node_id, iv_requested_image:in_requested_image) == abap_true
               loop(at:in_node_ids){
                  ls_link.source_node_id = ls_node_id



                  ls_link.target_node_id = lv_node_id



                  append(from:ls_link, to:lt_out_links)

               }



            end



         end



      end

      out_links = lt_out_links






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods DELEGATION_RRNID
   #     importing
   #       !IN_BO_NODE_NAME type STRING
   #       !IN_NODE_IDS type SESF_BO_NODE_ID_TAB
   #       !IN_REQUESTED_IMAGE type IF_ESF_TYPES=>TY_IMAGE default IF_ESF_TYPES=>CO_IMAGE_TRANSACTIONAL_BUFFER
   #     exporting
   #       !OUT_LINKS type SESF_ASSOCIATION_LINK_TAB
   #     raising
   #       CX_ESF_CORE_SERVICE .

   def delegation_rrnid(*_a,in_bo_node_name:nil,in_node_ids:nil,in_requested_image:If_esf_types::Co_image_transactional_buffer,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_node_ids=nil;in_requested_image=If_esf_types::Co_image_transactional_buffer;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_ids=_a[1] if _a.size>1
         in_requested_image=_a[2] if _a.size>2
      end
      out_links=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lo_lcp = nil # if_esf_lcp.new

      read_table(id:@mt_lcp_bo_node_name)
      assert(o:ls_lcp_bo_node_name.isASSIGNED())
      lo_lcp = mo_adaptation_handler.get_lcp(ls_lcp_bo_node_name.core_bo_name)

      lo_lcp.retrieve_root_node_id(_i:{
         "in_bo_node_name" => ls_lcp_bo_node_name.core_bo_node_name,
         "in_node_ids" => in_node_ids,
         "in_requested_image" => in_requested_image,
      }, _e:{
         "out_links" => out_links,
      }, _b:binding)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_sample_base_i_check_root_node_existence(*_a,iv_node_id:nil,iv_requested_image:nil,_i:nil,_e:nil,_b:nil)

      iv_node_id=nil;iv_requested_image=nil;
      if _a && _a.size>0
         iv_node_id=_a[0]
         iv_requested_image=_a[1] if _a.size>1
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lt_node_id = nil # sesf_bo_node_id_tab.new

      lt_out_links = nil # sesf_association_link_tab.new

      abap("INSERT iv_node_id INTO TABLE lt_node_id")
      if_esf_provider_access_i_retrieve_root_node_id(_i:{
         "in_bo_node_name" => if_a1s_service_provider_eco_i_get_bo_root_node_name(_b:binding),
         "in_node_ids" => lt_node_id,
         "in_requested_image" => iv_requested_image,
      }, _e:{
         "out_links" => lt_out_links,
      }, _b:binding)

      if lines(lt_out_links) > 0
         rv_exists = abap_true




      else
         rv_exists = abap_false



      end






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_sample_base_i_get_last_executed_action(*_a,_i:nil,_e:nil,_b:nil)


      if _a && _a.size>0
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      rs_execute_action_parameter = @ms_execute_action_parameter






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_sample_base_i_raise_stop_save_message(*_a,io_message_handler:nil,_i:nil,_e:nil,_b:nil)

      io_message_handler=nil;
      if _a && _a.size>0
         io_message_handler=_a[0]
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lo_ex_message = nil # cx_esf_message_handler.new

      lo_message = nil # cm_esi_t100_adapter.new

      ls_msg = nil # symsg.new

      ls_orig_loc = nil # cm_esi_root = ty_message_location.new

      lt_out_messages = nil # cm_esi_root = tt_esi_root.new

      ls_orig_loc.bo_name = if_a1s_service_provider_eco_i_get_bo_name(_b:binding)

      ls_msg.msgno = '103'

      ls_msg.msgty = 'E'

      ls_msg.msgid = 'A1FIA_ACCOUNTING'

      lo_message = Cm_esi_t100_adapter::Create(symptom:Cl_esi_message_symptom_code::Co_bo_inconsistency, lifetime:Cm_esi_root::Co_lifetime_transition, origin_location:ls_orig_loc, symsg:ls_msg)

      append(from:lo_message, to:lt_out_messages)
      begin
         io_message_handler.add_messages(_i:{
            "in_messages" => lt_out_messages,
         }, _b:binding)


      rescue Cx_esf_message_handler=>lo_ex_message
         raise cx_fatal_exception.new


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_sample_base_i_source_to_target_mapping(*_a,it_node_id:nil,_i:nil,_e:nil,_b:nil)

      it_node_id=nil;
      if _a && _a.size>0
         it_node_id=_a[0]
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################




      loop(at:it_node_id, into:ls_link.source_node_id){
         ls_link.target_node_id = ls_link.source_node_id



         append(from:ls_link, to:rt_out_link)

      }





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_access_i_retrieve_root_node_id(*_a,in_bo_node_name:nil,in_node_ids:nil,in_requested_image:If_esf_types::Co_image_transactional_buffer,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_node_ids=nil;in_requested_image=If_esf_types::Co_image_transactional_buffer;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_ids=_a[1] if _a.size>1
         in_requested_image=_a[2] if _a.size>2
      end
      out_links=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      begin
         if mo_rnid_manager.mv_skip_rnid_manager == abap_true
            if use_heuristic_for_rrnid(in_bo_node_name) == abap_true
               heuristic_rrnid(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => "in_bo_node_name",
                  "in_node_ids" => "in_node_ids",
                  "in_requested_image" => "in_requested_image",
               }, _b:binding)




            elsif use_delegation_for_rrnid(in_bo_node_name) == abap_true
               delegation_rrnid(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => "in_bo_node_name",
                  "in_node_ids" => "in_node_ids",
                  "in_requested_image" => "in_requested_image",
               }, _b:binding)


            elsif use_callback_for_rrnid(in_bo_node_name) == abap_true
               callback_rrnid(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => "in_bo_node_name",
                  "in_node_ids" => "in_node_ids",
                  "in_requested_image" => "in_requested_image",
               }, _b:binding)


            else
               mo_adaptation_handler.retrieve_root_node_id(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => "in_bo_node_name",
                  "in_node_ids" => "in_node_ids",
                  "in_requested_image" => "in_requested_image",
               }, _b:binding)



            end

            #*-----------END of OLD implementation ----------*



         else
            if mo_rnid_manager.is_skipped(iv_node_name:in_bo_node_name).isINITIAL()
               super_method(Sample_base, :if_esf_provider_access_i_retrieve_root_node_id).call




            elsif use_heuristic_for_rrnid(in_bo_node_name) == abap_true
               heuristic_rrnid(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => "in_bo_node_name",
                  "in_node_ids" => "in_node_ids",
                  "in_requested_image" => "in_requested_image",
               }, _b:binding)


            elsif use_delegation_for_rrnid(in_bo_node_name) == abap_true
               delegation_rrnid(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => "in_bo_node_name",
                  "in_node_ids" => "in_node_ids",
                  "in_requested_image" => "in_requested_image",
               }, _b:binding)


            elsif use_callback_for_rrnid(in_bo_node_name) == abap_true
               callback_rrnid(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => "in_bo_node_name",
                  "in_node_ids" => "in_node_ids",
                  "in_requested_image" => "in_requested_image",
               }, _b:binding)


            else
               super_method(Sample_base, :if_esf_provider_access_i_retrieve_root_node_id).call



            end



         end


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_action_i_execute_action(*_a,in_bo_node_name:nil,in_action_name:nil,in_node_ids:nil,in_action_parameters:nil,in_referencing_node_elements:nil,in_change_handler:nil,in_message_handler:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_action_name=nil;in_node_ids=nil;in_action_parameters=nil;in_referencing_node_elements=nil;in_change_handler=nil;in_message_handler=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_action_name=_a[1] if _a.size>1
         in_node_ids=_a[2] if _a.size>2
         in_action_parameters=_a[3] if _a.size>3
         in_referencing_node_elements=_a[4] if _a.size>4
         in_change_handler=_a[5] if _a.size>5
         in_message_handler=_a[6] if _a.size>6
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      if @mv_do_retrieve_check == abap_true
         @mv_do_retrieve_check = abap_false





      end

      @ms_execute_action_parameter.bo_node_name = in_bo_node_name

      @ms_execute_action_parameter.action_name = in_action_name

      @ms_execute_action_parameter.referencing_node_elements = in_referencing_node_elements

      if ! in_action_parameters.isINITIAL()


         assign(to:lv_action_parameters)

         lv_action_parameters = in_action_parameters





      end

      super_method(Sample_base, :if_esf_provider_action_i_execute_action).call(_i:{
         "in_bo_node_name" => in_bo_node_name,
         "in_action_name" => in_action_name,
         "in_node_ids" => in_node_ids,
         "in_action_parameters" => in_action_parameters,
         "in_referencing_node_elements" => in_referencing_node_elements,
         "in_change_handler" => in_change_handler,
         "in_message_handler" => in_message_handler,
      }, _b:binding)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_transact_ctrl_i_on_after_save_transaction(*_a,in_rejected:nil,inout_messages:nil,_i:nil,_e:nil,_b:nil)

      in_rejected=nil;inout_messages=nil;
      if _a && _a.size>0
         in_rejected=_a[0]
         inout_messages=_a[1] if _a.size>1
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      super_method(Sample_base, :if_esf_provider_transact_ctrl_i_on_after_save_transaction).call(_i:{
         "in_rejected" => in_rejected,
      }, _b:binding)

      #* remove last action for next save cycle

      clear(id:@ms_execute_action_parameter)





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   include If_esf_provider_init
   include If_sample_base
   @mo_provider_context = nil # if_esf_provider_context.new
   @ms_execute_action_parameter = nil # if_sample_base = ty_execute_action_parameter.new
   @mt_lcp_bo_node_name = nil # tt_lcp_bo_node_name.new
   @mt_callback_bo_node_name = nil # tt_heuristic_bo_node_name.new
   @mt_heuristic_bo_node_name = nil # tt_heuristic_bo_node_name.new
   @mv_do_retrieve_check = nil # sesf_boolean.new

end
