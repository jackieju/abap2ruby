# Generated by Abap2Ruby(https://github.com/jackieju/abap2ruby)
class Cl_a1fia_common_eco < Cl_a1s_service_provider_eco

   def if_esf_provider_access_i_modify(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      if mv_do_retrieve_check == abap_true
         @mv_do_retrieve_check = abap_false





      end

      super.if_esf_provider_access_i_modify(hash_to_params(params))






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_retrieve(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lt_message = cm_esi_root.tt_esi_root.new

      lx_esf_core_service = cx_esf_core_service.new

      super.if_esf_provider_access_i_retrieve(hash_to_params(params))

      if mv_do_retrieve_check == abap_true && in_requested_image == if_esf_types.co_image_transactional_buffer && lines(out_failed_node_ids) != lines(in_node_ids)
         begin
            mo_adaptation_handler.check(_i:{
               "out_messages" => @lt_message,
            }, _e:{
               "in_bo_node_name" => in_bo_node_name,
               "in_node_ids" => in_node_ids,
               "in_check_scope" => if_esf_types.co_check_scope_substructure,
            })


         rescue cx_esf_core_service=>lx_esf_core_service
            raise cx_fatal_exception.new


         end

         if lt_message .isNotINITIAL()
            mo_message_manager.add_messages(@lt_message)





         end


         @mv_do_retrieve_check = abap_false





      end






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_retrieve_root_node_id(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lx_bsa_runtime = cx_bsa_runtime.new

      lx_root = cx_root.new

      begin
         if mo_rnid_manager.mv_skip_rnid_manager == abap_true
            if use_heuristic_for_rrnid(in_bo_node_name) == abap_true
               heuristic_rrnid(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => in_bo_node_name,
                  "in_node_ids" => in_node_ids,
                  "in_requested_image" => in_requested_image,
               })




            elsif use_delegation_for_rrnid(in_bo_node_name) == abap_true
               delegation_rrnid(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => in_bo_node_name,
                  "in_node_ids" => in_node_ids,
                  "in_requested_image" => in_requested_image,
               })


            elsif use_callback_for_rrnid(in_bo_node_name) == abap_true
               callback_rrnid(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => in_bo_node_name,
                  "in_node_ids" => in_node_ids,
                  "in_requested_image" => in_requested_image,
               })


            else
               mo_adaptation_handler.retrieve_root_node_id(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => in_bo_node_name,
                  "in_node_ids" => in_node_ids,
                  "in_requested_image" => in_requested_image,
               })



            end

            #*-----------END of OLD implementation ----------*



         else
            if mo_rnid_manager.is_skipped(iv_node_name:in_bo_node_name) .isINITIAL()
               super.if_esf_provider_access_i_retrieve_root_node_id(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => in_bo_node_name,
                  "in_node_ids" => in_node_ids,
                  "in_requested_image" => in_requested_image,
               })




            elsif use_heuristic_for_rrnid(in_bo_node_name) == abap_true
               heuristic_rrnid(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => in_bo_node_name,
                  "in_node_ids" => in_node_ids,
                  "in_requested_image" => in_requested_image,
               })


            elsif use_delegation_for_rrnid(in_bo_node_name) == abap_true
               delegation_rrnid(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => in_bo_node_name,
                  "in_node_ids" => in_node_ids,
                  "in_requested_image" => in_requested_image,
               })


            elsif use_callback_for_rrnid(in_bo_node_name) == abap_true
               callback_rrnid(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => in_bo_node_name,
                  "in_node_ids" => in_node_ids,
                  "in_requested_image" => in_requested_image,
               })


            else
               super.if_esf_provider_access_i_retrieve_root_node_id(_i:{
                  "out_links" => out_links,
               }, _e:{
                  "in_bo_node_name" => in_bo_node_name,
                  "in_node_ids" => in_node_ids,
                  "in_requested_image" => in_requested_image,
               })



            end



         end


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_action_i_execute_action(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      if mv_do_retrieve_check == abap_true
         @mv_do_retrieve_check = abap_false





      end

      ms_execute_action_parameter.bo_node_name = in_bo_node_name

      ms_execute_action_parameter.action_name = in_action_name

      ms_execute_action_parameter.referencing_node_elements = in_referencing_node_elements

      if ! in_action_parameters .isINITIAL()


         assign(to:lv_action_parameters)

         lv_action_parameters = in_action_parameters





      end

      super.if_esf_provider_action_i_execute_action(hash_to_params(params))






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_init_i_init(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      super.if_esf_provider_init_i_init(_e:{
         "in_provider_context" => in_provider_context,
         "in_bo_name" => in_bo_name,
      }, _c:{
         "inout_preferred_trx_pattern" => inout_preferred_trx_pattern,
      })

      @mo_provider_context = in_provider_context






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_transact_ctrl_i_on_after_save_transaction(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      super.if_esf_provider_transact_ctrl_i_on_after_save_transaction(hash_to_params(params))

      #* remove last action for next save cycle

      clear(id:@ms_execute_action_parameter)





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def add_node_for_callback_rrnid(iv_bo_node_name:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      abap("insert iv_bo_node_name into TABLE mt_callback_bo_node_name")
      if mo_rnid_manager .isBOUND()
         mo_rnid_manager.exclude(iv_node_name:iv_bo_node_name)





      end






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def add_node_for_heuristic_rrnid(iv_bo_node_name:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      abap("insert iv_bo_node_name into TABLE mt_heuristic_bo_node_name")
      if mo_rnid_manager .isBOUND()
         mo_rnid_manager.include(iv_node_name:iv_bo_node_name)





      end






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def add_node_for_delegation_rrnid(iv_core_bo_node_name:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      ls_lcp_bo_node_name = ty_lcp_bo_node_name.new

      ls_lcp_bo_node_name.bo_node_name = iv_bo_node_name

      ls_lcp_bo_node_name.core_bo_name = iv_core_bo_name

      ls_lcp_bo_node_name.core_bo_node_name = iv_core_bo_node_name

      abap("INSERT ls_lcp_bo_node_name INTO TABLE mt_lcp_bo_node_name")
      if mo_rnid_manager .isBOUND()
         mo_rnid_manager.exclude(iv_node_name:iv_bo_node_name)





      end






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def callback_rrnid(in_requested_image:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      assert(o:1 == 0)





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def disable_retrieve_check(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @mv_do_retrieve_check = abap_false






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def use_callback_for_rrnid(iv_bo_node_name:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      read_table(id:mt_callback_bo_node_name, from:iv_bo_node_name)
      if sy.subrc == 0
         rv_result = abap_true




      else
         rv_result = abap_false



      end






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def use_delegation_for_rrnid(iv_bo_node_name:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      read_table(id:mt_lcp_bo_node_name)
      if sy.subrc == 0
         rv_result = abap_true




      else
         rv_result = abap_false



      end






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def use_heuristic_for_rrnid(iv_bo_node_name:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      read_table(id:mt_heuristic_bo_node_name, from:iv_bo_node_name)
      if sy.subrc == 0
         rv_result = abap_true




      else
         rv_result = abap_false



      end






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def heuristic_rrnid(in_requested_image:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lv_node_id = sesf_bo_node_id.new

      lv_node_id_determined = boolean.new

      ls_origin_location = cm_esi_root.ty_message_location.new

      lo_message = cm_a1fia_common_eco.new


      lv_root_node_name = string.new

      lv_bo_name = string.new

      lt_out_failed_node_id = sesf_bo_node_id_tab.new

      lrt_core_bo_out_data = data.new

      lt_requested_attributes = sesf_string_tab.new


      @lv_root_node_name = if_a1s_service_provider_eco_i_get_bo_root_node_name()

      @lv_bo_name = if_a1s_service_provider_eco_i_get_bo_name()

      if in_bo_node_name == lv_root_node_name
         @lrt_core_bo_out_data = mo_provider_context.get_lcp_facade().get_bo_node_table_container(in_bo_name:@lv_bo_name, in_bo_node_name:@lv_root_node_name)



         assign(to:lt_core_bo_out_data)

         abap("INSERT if_esf_types => co_node_id_proxy_name INTO TABLE lt_requested_attributes")


         mo_adaptation_handler.if_esf_lcp_i_retrieve(hash_to_params(params))



         if lines(@lt_out_failed_node_id) == 0
            @lt_out_links = if_a1fia_common_eco_i_source_to_target_mapping(in_node_ids)





         end



      else
         mo_adaptation_handler.get_first_retrved_root_node_id(_i:{
            "ev_first_ret_data_root_node_id" => @lv_node_id,
            "ev_first_root_id_determined" => @lv_node_id_determined,
         })

         if lv_node_id_determined == abap_false || ( lv_node_id .isINITIAL() && lv_node_id_determined == abap_true )
            ls_origin_location.bo_name = @lv_bo_name





            mo_message_manager.add_message(@lo_message)




         else
            if if_a1fia_common_eco_i_check_root_node_existence(iv_node_id:@lv_node_id, iv_requested_image:in_requested_image) == abap_true
               loop(at:in_node_ids){
                  ls_link.source_node_id = ls_node_id



                  ls_link.target_node_id = @lv_node_id



                  append(from:@ls_link, to:lt_out_links)

               }



            end



         end



      end

      out_links = @lt_out_links






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def delegation_rrnid(in_requested_image:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lo_lcp = if_esf_lcp.new

      read_table(id:mt_lcp_bo_node_name)
      assert(o:ls_lcp_bo_node_name .isASSIGNED())
      @lo_lcp = mo_adaptation_handler.get_lcp(ls_lcp_bo_node_name.core_bo_name)

      lo_lcp.retrieve_root_node_id(hash_to_params(params))






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_a1fia_common_eco_i_check_root_node_existence(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lt_node_id = sesf_bo_node_id_tab.new

      lt_out_links = sesf_association_link_tab.new

      abap("INSERT iv_node_id INTO TABLE lt_node_id")
      if_esf_provider_access_i_retrieve_root_node_id(hash_to_params(params))

      if lines(@lt_out_links) > 0
         rv_exists = abap_true




      else
         rv_exists = abap_false



      end






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_a1fia_common_eco_i_get_last_executed_action(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      rs_execute_action_parameter = @ms_execute_action_parameter






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_a1fia_common_eco_i_raise_stop_save_message(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lo_ex_message = cx_esf_message_handler.new

      lo_message = cm_esi_t100_adapter.new

      ls_msg = symsg.new

      ls_orig_loc = cm_esi_root.ty_message_location.new

      lt_out_messages = cm_esi_root.tt_esi_root.new

      ls_orig_loc.bo_name = if_a1s_service_provider_eco_i_get_bo_name()

      ls_msg.msgno = '103'

      ls_msg.msgty = 'E'

      ls_msg.msgid = 'A1FIA_ACCOUNTING'

      @lo_message = cm_esi_t100_adapter.create(symptom:cl_esi_message_symptom_code.co_bo_inconsistency, lifetime:cm_esi_root.co_lifetime_transition, origin_location:@ls_orig_loc, symsg:@ls_msg)

      append(from:@lo_message, to:lt_out_messages)
      begin
         io_message_handler.add_messages(hash_to_params(params))


      rescue cx_esf_message_handler=>lo_ex_message
         raise cx_fatal_exception.new


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_a1fia_common_eco_i_source_to_target_mapping(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################




      loop(at:it_node_id, into:ls_link.source_node_id){
         ls_link.target_node_id = ls_link.source_node_id



         append(from:@ls_link, to:rt_out_link)

      }





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end


end
