# Generated by Abap2Ruby(https://github.com/jackieju/abap2ruby)
require_relative "sample_base.rb"
require_relative "if_sample.rb"
require_relative "abap.rb"

class Sample < Sample_base

   # methods MODIFY_CORE_BO_FROM_ECO_ROOT
   #     importing
   #       !IT_CHANGED_ATTRIBUTES type SESF_STRING_TAB
   #       !IS_ECO_ROOT type IF_SAMPLE=>TY_ROOT
   #       !IO_CHANGE_HANDLER type ref to IF_ESF_CHANGE_HANDLER
   #       !IO_MESSAGE_HANDLER type ref to IF_ESF_MESSAGE_HANDLER .
   #
   #

   def modify_core_bo_from_eco_root(*_a,it_changed_attributes:nil,is_eco_root:nil,io_change_handler:nil,io_message_handler:nil,_i:nil,_e:nil,_b:nil)


      raise "Not implemented"

   end
   # methods IF_ESF_PROVIDER_ACCESS~CHECK
   #     redefinition .
   #

   def if_esf_provider_access_i_check(*_a,in_bo_node_name:nil,in_node_ids:nil,in_check_scope:nil,in_message_handler:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_node_ids=nil;in_check_scope=nil;in_message_handler=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_ids=_a[1] if _a.size>1
         in_check_scope=_a[2] if _a.size>2
         in_message_handler=_a[3] if _a.size>3
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lv_core_bo_node_name = nil # string.new

      lo_message = nil # cm_esi_root.new

      lr_attribute_map = nil # ty_attribute_map.new

      lt_node_id = nil # sesf_bo_node_id_tab.new

      lt_core_message = nil # cm_esi_root = tt_esi_root.new

      lt_core_message_aggregated = nil # cm_esi_root = tt_esi_root.new

      lx_esf_core_service = nil # cx_esf_core_service.new

      lx_esf_message_handler = nil # cx_esf_message_handler.new

      lx_a1fia_aar_create_qaf_eco = nil # cx_a1fia_aar_create_qaf_eco.new

      if @mv_eco_root_node_id.isINITIAL()
         return



      end

      begin
         lo_node_desc = @mo_eco_descriptor.get_bo_node_descriptor(bo_node_proxy_name:in_bo_node_name)
         lv_is_node_upd_enabled = lo_node_desc.get_property_value(property_name:If_esf_desc::Co_property_update_enabled)
         lv_is_upd_enabled_final = lo_node_desc.is_property_value_final(property_name:If_esf_desc::Co_property_update_enabled)

      rescue Cx_esf_metadata_error=>lx_esf_metadata_error
         raise cx_fatal_exception.new


      end
      if ( lv_is_node_upd_enabled == abap_false && lv_is_upd_enabled_final == abap_true )
         return



      end

      if in_bo_node_name != If_sample::Co_bo_node.root
         super_method(Sample, :if_esf_provider_access_i_check).call



         return



      end

      begin
         if @mt_attribute_map.isINITIAL()
            init_buffers(_b:binding)





         end

         loop(at:@mt_run_specific_node, into:lv_core_bo_node_name){
            read_table(id:@mt_attribute_map)

            if sy.subrc != 0
               raise cx_a1fia_aar_create_qaf_eco.new





            end


            if lr_attribute_map.core_bo_node_id.isINITIAL()
               next



            end


            clear(id:lt_node_id)

            clear(id:lt_core_message)

            append(from:lr_attribute_map.core_bo_node_id, to:lt_node_id)

            begin
               @mo_lcp_bo.check(_i:{
                  "out_messages" => lt_core_message,
               }, _e:{
                  "in_bo_node_name" => "lv_core_bo_node_name",
                  "in_node_ids" => "lt_node_id",
                  "in_check_scope" => "in_check_scope",
               }, _b:binding)

               #"#EC CI_LCP_LOOP  "No single BO node is being checked-on more than once

            rescue Cx_esf_core_service=>lx_esf_core_service
               raise cx_fatal_exception.new


            end

            append(from:lines, to:lt_core_message_aggregated)

         }

      rescue Cx_a1fia_aar_create_qaf_eco=>lx_a1fia_aar_create_qaf_eco
         Cl_a1fia_aar_util::Create_message(_i:{
            "eo_message" => lo_message,
         }, _e:{
            "iv_message_class" => "'A1FIA_AAR_CREATE_QAF_ECO'",
            "iv_message_number" => "'018'",
            "iv_severity" => "Cm_esi_root::Co_severity_error",
            "iv_lifetime" => "Cm_esi_root::Co_lifetime_transition",
         }, _b:binding)

         begin
            in_message_handler.add_message(lo_message)


         rescue Cx_esf_message_handler=>lx_esf_message_handler
            raise cx_fatal_exception.new


         end

      end
      add_mapped_messages_int(it_message:lt_core_message_aggregated, io_message_handler:in_message_handler)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_ACCESS~MODIFY
   #     redefinition .
   #

   def if_esf_provider_access_i_modify(*_a,in_change_handler:nil,in_message_handler:nil,in_modifications:nil,_i:nil,_e:nil,_b:nil)

      in_change_handler=nil;in_message_handler=nil;in_modifications=nil;
      if _a && _a.size>0
         in_change_handler=_a[0]
         in_message_handler=_a[1] if _a.size>1
         in_modifications=_a[2] if _a.size>2
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lr_modification = nil # If_esf_provider_access::Ty_modifications.new

      lx_a1fia_aar_create_qaf_eco = nil # cx_a1fia_aar_create_qaf_eco.new

      lo_message = nil # cm_esi_root.new

      lx_esf_message_handler = nil # cx_esf_message_handler.new

      lt_changed_attributes = nil # sesf_string_tab.new

      lt_sub_node_modify = nil # if_esf_provider_access = tt_modifications.new

      lt_modification = nil # if_esf_provider_access = tt_modifications.new


      lt_modification = in_modifications

      loop(at:lt_modification){
         append(from:lr_modification.*, to:lt_sub_node_modify)

         abap("DELETE lt_modification")


      }
      read_table(id:lt_modification, index:1)
      if sy.subrc == 0 && lr_modification.bo_node_name == If_fia_acc_adjustment_run::Co_bo_node.root
         assert(o:lr_modification.change_mode == If_esf_provider_access::Co_change_mode_update)

         begin
            if @mt_attribute_map.isINITIAL()
               init_buffers(_b:binding)





            end

            if @mv_eco_root_node_id.isINITIAL()
               raise cx_a1fia_aar_create_qaf_eco.new





            end

            assign(to:ls_eco_root)
            assert(o:sy.subrc == 0)
            ls_eco_root.node_id = @mv_eco_root_node_id

            abap("DELETE lr_modification.changed_attributes WHERE table_line CP '*SCHEME*ID'")
            check_and_fill_sob_comp(ir_root_modification:lr_modification, io_message_handler:in_message_handler)

            handle_dedicated_attr_modific(_c:{
               "cs_root" => ls_eco_root,
               "ct_changed_attr" => lr_modification.changed_attributes,
            }, _b:binding)

            #"Create or update the core BO nodes
            modify_core_bo_from_eco_root(_e:{
               "it_changed_attributes" => "lr_modification.changed_attributes",
               "is_eco_root" => "ls_eco_root",
               "io_change_handler" => "in_change_handler",
               "io_message_handler" => "in_message_handler",
            }, _b:binding)


         rescue Cx_a1fia_aar_create_qaf_eco=>lx_a1fia_aar_create_qaf_eco
            Cl_a1fia_aar_util::Create_message(_i:{
               "eo_message" => lo_message,
            }, _e:{
               "iv_message_class" => "'A1FIA_AAR_CREATE_QAF_ECO'",
               "iv_message_number" => "'018'",
               "iv_severity" => "Cm_esi_root::Co_severity_error",
               "iv_lifetime" => "Cm_esi_root::Co_lifetime_transition",
            }, _b:binding)

            begin
               in_message_handler.add_message(lo_message)


            rescue Cx_esf_message_handler=>lx_esf_message_handler
               raise cx_fatal_exception.new


            end

         end



      end

      if lt_sub_node_modify.isNotINITIAL()
         super_method(Sample, :if_esf_provider_access_i_modify).call





      end






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_ACCESS~RETRIEVE
   #     redefinition .
   #

   def if_esf_provider_access_i_retrieve(*_a,in_bo_node_name:nil,in_node_ids:nil,in_requested_image:If_esf_types::Co_image_transactional_buffer,in_edit_mode:nil,in_requested_attributes:nil,in_message_handler:nil,in_buffer_sync_handler:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_node_ids=nil;in_requested_image=If_esf_types::Co_image_transactional_buffer;in_edit_mode=nil;in_requested_attributes=nil;in_message_handler=nil;in_buffer_sync_handler=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_ids=_a[1] if _a.size>1
         in_requested_image=_a[2] if _a.size>2
         in_edit_mode=_a[3] if _a.size>3
         in_requested_attributes=_a[4] if _a.size>4
         in_message_handler=_a[5] if _a.size>5
         in_buffer_sync_handler=_a[6] if _a.size>6
      end
      out_data=out_failed_node_ids=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lt_requested_core_attr = nil # sesf_string_tab.new

      lt_eco_attr_for_cur_core_node = nil # sesf_string_tab.new

      lv_core_bo_node_id = nil # sesf_bo_node_id.new

      lv_eco_attr = nil # string.new

      lt_node_id = nil # sesf_string_tab.new

      lv_core_bo_node_name = nil # string.new

      lv_core_bo_table_type = nil # string.new

      lr_table = nil # data.new

      lx_esf_core_service = nil # cx_esf_core_service.new

      lx_a1fia_aar_create_qaf_eco = nil # cx_a1fia_aar_create_qaf_eco.new

      lo_message = nil # cm_esi_root.new

      lv_get_all_attributes = nil # sesf_boolean.new

      lr_attribute_map = nil # ty_attribute_map.new

      lt_requested_attributes = nil # sesf_string_tab.new

      lt_eco_req_attr = nil # sesf_string_tab.new

      lv_request_has_valid_node_id = nil # sesf_boolean.new

      if @mv_has_sync_notifications == abap_true
         clear(id:lt_node_id)

         append(from:@mv_eco_root_node_id, to:lt_node_id)

         lv_core_bo_table_type = 'IF_FIA_ACC_ADJUSTMENT_RUN=>TT_ROOT'



         lr_table = lv_core_bo_table_type.new


         assign(to:lt_core_bo_data)

         begin
            @mo_lcp_bo.retrieve(_i:{
               "out_data" => lt_core_bo_data,
            }, _e:{
               "in_bo_node_name" => "If_fia_acc_adjustment_run::Co_bo_node.root",
               "in_node_ids" => "lt_node_id",
               "in_requested_image" => "If_esf_types::Co_image_current_data",
            }, _b:binding)


         rescue Cx_esf_core_service=>lx_esf_core_service
            raise cx_fatal_exception.new


         end

         clear(id:@mv_has_sync_notifications)



      end

      case in_bo_node_name
      when If_sample::Co_bo_node.root
         begin
            if @mt_attribute_map.isINITIAL()
               init_buffers(_b:binding)





            end

            out_failed_node_ids = in_node_ids

            lv_request_has_valid_node_id = abap_false

            if @mv_eco_root_node_id.isINITIAL()
               read_table(id:in_node_ids, into:mv_eco_root_node_id, index:1)

               if root_node_id_exists(@mv_eco_root_node_id) == abap_false
                  clear(id:@mv_eco_root_node_id)



               end




            end

            if @mv_eco_root_node_id.isNotINITIAL()
               abap("DELETE out_failed_node_ids WHERE table_line = mv_eco_root_node_id")


               if sy.subrc == 0
                  lv_request_has_valid_node_id = abap_true





               end




            end

            if lv_request_has_valid_node_id == abap_true
               append(to:out_data)

               if in_requested_attributes.isNotINITIAL()
                  lt_eco_req_attr = in_requested_attributes



                  append(from:If_sample::Co_attr.root.acl_company_uuid.content, to:lt_eco_req_attr)

                  get_root_maped_attr_for_dedica(_i:{
                     "et_mapped_req_attributes" => lt_requested_attributes,
                  }, _e:{
                     "it_requested_attributes" => "lt_eco_req_attr",
                  }, _b:binding)





               end

               #*             For every node of the core BO trigger an LCP only if it is already created and the attribute is requested now


               loop(at:@mt_run_specific_node, into:lv_core_bo_node_name){
                  clear(id:lt_requested_core_attr)

                  clear(id:lt_eco_attr_for_cur_core_node)

                  clear(id:lv_core_bo_node_id)

                  loop(at:@mt_attribute_map){
                     if lt_requested_attributes.isNotINITIAL()
                        read_table(id:lt_requested_attributes)

                        if sy.subrc != 0
                           next



                        end




                     end


                     append(from:lr_attribute_map.core_bo_attr_name, to:lt_requested_core_attr)

                     append(from:lr_attribute_map.eco_attr_name, to:lt_eco_attr_for_cur_core_node)

                     lv_core_bo_node_id = lr_attribute_map.core_bo_node_id



                  }

                  if lt_requested_core_attr.isINITIAL()
                     next



                  end


                  concatenate(ar:['if_fia_acc_adjustment_run=>tt_',lv_core_bo_node_name], into:lv_core_bo_table_type)

                  lr_table = lv_core_bo_table_type.new


                  assign(to:lt_core_bo_data)

                  clear(id:lt_node_id)

                  append(from:lv_core_bo_node_id, to:lt_node_id)

                  begin
                     @mo_lcp_bo.retrieve(_i:{
                        "out_data" => lt_core_bo_data,
                     }, _e:{
                        "in_bo_node_name" => "lv_core_bo_node_name",
                        "in_node_ids" => "lt_node_id",
                        "in_edit_mode" => "in_edit_mode",
                        "in_requested_attributes" => "lt_requested_core_attr",
                     }, _b:binding)

                     #"#EC CI_LCP_LOOP  "No single BO node is being retrieved on more than once

                  rescue Cx_esf_core_service=>lx_esf_core_service
                     raise cx_fatal_exception.new


                  end

                  read_table(id:lt_core_bo_data, index:1)

                  if sy.subrc != 0
                     raise cx_fatal_exception.new





                  end


                  loop(at:lt_eco_attr_for_cur_core_node, into:lv_eco_attr){
                     read_table(id:@mt_attribute_map)

                     unassign(lv_eco_attr_val)

                     unassign(lv_core_attr_val)

                     assign(to:lv_eco_attr_val)

                     assign(to:lv_core_attr_val)

                     lv_eco_attr_val = lv_core_attr_val



                  }

                  free(lt_core_bo_data)

                  unassign(lt_core_bo_data)

               }

               ls_eco_root_data.node_id = @mv_eco_root_node_id



               set_root_dedicated_attributes(_e:{
                  "it_requested_attributes" => "lt_eco_req_attr",
               }, _c:{
                  "cs_eco_root" => ls_eco_root_data,
               }, _b:binding)


               #"Buffer root structure for use in associations

               if lines(lt_requested_attributes) > 0
                  loop(at:lt_requested_attributes, into:lv_eco_attr){
                     assign(to:lv_eco_attr_val)

                     assign(to:lv_eco_attr_val_buffer)

                     lv_eco_attr_val_buffer = lv_eco_attr_val



                  }


               else
                  @ms_readonly_eco_root = ls_eco_root_data



               end



            else
               clear(id:out_data)


            end

            #"IF out_failed_node_ids IS INITIAL.

         rescue Cx_a1fia_aar_create_qaf_eco=>lx_a1fia_aar_create_qaf_eco
            clear(id:out_data)
            append(from:lines, to:out_failed_node_ids)
            Cl_a1fia_aar_util::Create_message(_i:{
               "eo_message" => lo_message,
            }, _e:{
               "iv_message_class" => "'A1FIA_AAR_CREATE_QAF_ECO'",
               "iv_message_number" => "'018'",
               "iv_severity" => "Cm_esi_root::Co_severity_error",
               "iv_lifetime" => "Cm_esi_root::Co_lifetime_transition",
            }, _b:binding)

            mo_message_manager.add_message(lo_message)


         end
      else
          
         super_method(Sample, :if_esf_provider_access_i_retrieve).call(_i:{
            "in_bo_node_name" => in_bo_node_name,
            "in_node_ids" => in_node_ids,
            "in_requested_image" => in_requested_image,
            "in_edit_mode" => in_edit_mode,
            "in_requested_attributes" => in_requested_attributes,
            "in_message_handler" => in_message_handler,
            "in_buffer_sync_handler" => in_buffer_sync_handler,
         }, _e:{
            "out_data" => "out_data",
            "out_failed_node_ids" => "out_failed_node_ids",
         }, _b:binding)

         begin
            lv_parent_node_name = @mo_eco_descriptor.get_bo_node_descriptor(bo_node_proxy_name:in_bo_node_name).get_parent_bo_node_descriptor(_b:binding).get_proxy_name(_b:binding)

         rescue Cx_esf_metadata_error=>lx_esf_metadata
            raise cx_fatal_exception.new


         end
         if lv_parent_node_name == If_sample::Co_bo_node.root
            loop(at:out_data){
               assign(to:lv_parent_node_id)

               lv_parent_node_id = @mv_eco_root_node_id



            }



         end

      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_INIT~INIT
   #     redefinition .
   #

   def if_esf_provider_init_i_init(*_a,in_provider_context:nil,in_bo_name:nil,inout_preferred_trx_pattern:If_esf_provider_init::Co_tp_save_and_continue,_i:nil,_e:nil,_b:nil)

      in_provider_context=nil;in_bo_name=nil;inout_preferred_trx_pattern=If_esf_provider_init::Co_tp_save_and_continue;
      if _a && _a.size>0
         in_provider_context=_a[0]
         in_bo_name=_a[1] if _a.size>1
         inout_preferred_trx_pattern=_a[2] if _a.size>2
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      super_method(Sample, :if_esf_provider_init_i_init).call(_i:{
         "in_provider_context" => in_provider_context,
         "in_bo_name" => in_bo_name,
      }, _b:binding)

      #"Get LCP facade
      @mo_lcp_facade = in_provider_context.get_lcp_facade(_b:binding)

      begin
         @mo_eco_descriptor = @mo_lcp_facade.get_bo_descriptor(in_bo_proxy_name:If_sample::Co_bo_name)


      rescue Cx_esf_core_service=>lx_esf_core_service
         raise cx_fatal_exception.new


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods IF_ESF_PROVIDER_INTERACT_CTRL~DO_POST_PROCESSING
   #     redefinition .

   def if_esf_provider_interact_ctrl_i_do_post_processing(*_a,in_overruling_code:nil,inout_messages:nil,_i:nil,_e:nil,_b:nil)

      in_overruling_code=nil;inout_messages=nil;
      if _a && _a.size>0
         in_overruling_code=_a[0]
         inout_messages=_a[1] if _a.size>1
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      super_method(Sample, :if_esf_provider_interact_ctrl_i_do_post_processing).call(_i:{
         "in_overruling_code" => in_overruling_code,
      }, _b:binding)

      Cl_a1fia_aar_util::Chk_for_fy_vrnt_msg_n_add_info(_c:{
         "ct_message" => inout_messages,
      }, _b:binding)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # methods GET_SUB_CONTEXT
   #     redefinition .

   def get_sub_context(*_a,_i:nil,_e:nil,_b:nil)


      if _a && _a.size>0
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      rv_sub_context = @ms_readonly_eco_root.mdro_type_code






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   include If_sample
   @mo_sob_lcp = nil # if_esf_lcp.new
   @gc_bpvt_code_dir_projects = '91'
   def gc_bpvt_code_dir_projects;'91';  end
   @gc_bpvt_code_ovh_projects = '90'
   def gc_bpvt_code_ovh_projects;'90';  end
   @mv_bgjob_scheduled_node_id = nil # sesf_bo_node_id.new
   @mo_eco_descriptor = nil # if_esf_bo_desc.new
   @gc_bpvt_code_grf_projects = '546'
   def gc_bpvt_code_grf_projects;'546';  end
   include If_sample
   @mc_activate_action_enabled = nil # sesf_boolean.new
   @mc_execute_action_enabled = nil # sesf_boolean.new
   @mo_lcp_bo = nil # if_esf_lcp.new
   @mo_mdro_schedule_immediately = nil # cl_ap_mdro_sched_immed_wait.new
   @mo_task_region_helper = nil # if_coutl_task_region_helper.new
   @ms_readonly_eco_root = nil # if_sample = ty_root.new
   @mt_attribute_map = nil # tt_attribute_map.new
   @mt_eco_root_attributes = nil # string.new
   @mt_run_specific_node = nil # sesf_string_tab.new
   @ms_action_parameters = nil # a1fia_run_schedule_directly_ac.new
   @mv_call_after_save = nil # string.new
   @mv_eco_root_node_id = nil # sesf_bo_node_id.new
   @mo_lcp_facade = nil # if_esf_lcp_facade.new
   @mt_dedicated_attributes = nil # sesf_string_tab.new
   @mv_has_sync_notifications = nil # sesf_boolean.new

end
