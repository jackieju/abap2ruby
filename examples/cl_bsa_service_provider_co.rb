# Generated by Abap2Ruby(https://github.com/jackieju/abap2ruby)
class Cl_bsa_service_provider_co

   def put_change_notifs_into_handler(in_change_handler:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lx_esf_change_handler = cx_esf_change_handler.new

      lx_esf_sync_handler = cx_esf_sync_handler.new

      loop(at:in_change_notifications.create_notifications){
         begin
            in_change_handler.notify_create(hash_to_params(params))


         rescue cx_esf_change_handler=>lx_esf_change_handler

         end

      }
      loop(at:in_change_notifications.suc_create_notifications){
         begin
            in_change_handler.notify_create(hash_to_params(params))


         rescue cx_esf_change_handler=>lx_esf_change_handler

         end

      }
      loop(at:in_change_notifications.failed_create_notifications){
         begin
            in_change_handler.notify_failed_create(hash_to_params(params))


         rescue cx_esf_change_handler=>lx_esf_change_handler

         end

      }
      loop(at:in_change_notifications.update_notifications){
         begin
            in_change_handler.notify_update(hash_to_params(params))


         rescue cx_esf_change_handler=>lx_esf_change_handler

         end

      }
      loop(at:in_change_notifications.delete_notifications){
         begin
            in_change_handler.notify_delete(hash_to_params(params))


         rescue cx_esf_change_handler=>lx_esf_change_handler

         end

      }
      begin
         in_change_handler.notify_buffer_syncs(hash_to_params(params))


      rescue cx_esf_sync_handler=>lx_esf_sync_handler
         raise cx_fatal_exception.new


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def put_messages_into_handler(in_messages:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lx_exception = cx_root.new

      lo_message = cm_esi_root.new

      lo_mapped_message = cm_esi_root.new

      lt_message = cm_esi_root.tt_esi_root.new

      ls_origin_location = cm_esi_root.ty_message_location.new

      begin
         loop(at:in_messages, into:@lo_message){
            return
         }
         if sy.subrc == 0
            loop(at:in_messages, into:@lo_message){
               if @lo_message.origin_location.bo_name != in_message_handler.bo_name
                  @ls_origin_location.bo_name = in_message_handler.bo_name


                  #"change lifetime to transition - no other chance, because state is not allowed
                  #"without location

                  @lo_mapped_message = @lo_message.copy_with_new_location(new_origin_location:@ls_origin_location, new_message_lifetime:cm_esi_root.co_lifetime_transition)



                  append(from:@lo_mapped_message, to:@lt_message)


               else
                  append(from:@lo_message, to:@lt_message)


               end


            }

            in_message_handler.add_messages(in_messages:@lt_message)




         else
            in_message_handler.add_messages(in_messages:in_messages)



         end


      rescue cx_esf_message_handler=>lx_exception
         raise cx_fatal_exception.new


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def handle_error(ix_exception:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      assert(o:ix_exception .isBOUND())
      raise cx_bsa_runtime_dynamic.new






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def put_sync_notifs_into_handler(in_sync_handler:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      in_sync_handler.notify_buffer_syncs(in_sync_notifications)






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def handle_error_adaptation_hdlr(ix_exception:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      raise cx_bsa_runtime_dynamic.new






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def append_pre_exceptions_to_msgs(io_exception:nil,_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lr_t100_message = cm_esi_t100.new

      lr_cast_exception = cx_root.new

      #**********************************************************************

      #" check if a previous exception exists or not
      if io_exception .isBOUND()
         begin
            @lr_t100_message = io_exception

            #" append the previous message
            append(from:@lr_t100_message, to:ct_messages)
            me.append_pre_exceptions_to_msgs(_e:{
               "io_exception" => io_exception.previous,
            }, _c:{
               "ct_messages" => ct_messages,
            })


         rescue cx_sy_conversion_no_number,cx_sy_conversion_overflow,cx_sy_move_cast_error=>lr_cast_exception
            me.append_pre_exceptions_to_msgs(_e:{
               "io_exception" => io_exception.previous,
            }, _c:{
               "ct_messages" => ct_messages,
            })


         end



      end






      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_check(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      lx_bsa_runtime = cx_bsa_runtime.new

      lx_root = cx_root.new

      lt_messages = cm_esi_root.tt_esi_root.new

      begin
         @mo_adaptation_handler.check(_i:{
            "out_messages" => @lt_messages,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_node_ids" => in_node_ids,
            "in_check_scope" => in_check_scope,
         })

         me.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:@lt_messages)


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_check_and_determine(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      @lt_messages = cm_esi_root.tt_esi_root.new

      ls_change_notifs = if_esf_types.ty_change_notifications.new

      begin
         @mo_adaptation_handler.check_and_determine(_i:{
            "out_messages" => @lt_messages,
            "out_change_notifications" => @ls_change_notifs,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_node_ids" => in_node_ids,
            "in_check_scope" => in_check_scope,
         })

         me.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:@lt_messages)

         me.put_change_notifs_into_handler(in_change_notifications:@ls_change_notifs, in_change_handler:in_change_handler)


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_convert_keys(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      begin
         @mo_adaptation_handler.convert_keys(_i:{
            "out_target_keys" => out_target_keys,
            "out_failed" => out_failed,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_source_key_name" => in_source_key_name,
            "in_target_key_name" => in_target_key_name,
            "in_source_keys" => in_source_keys,
         })


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_convert_key_to_node_id(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      begin
         @mo_adaptation_handler.convert_key_to_node_id(_i:{
            "out_key_mapping" => out_key_mapping,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_key_name" => in_key_name,
            "in_keys" => in_keys,
            "in_requested_image" => in_requested_image,
         })


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_modify(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      @lt_messages = cm_esi_root.tt_esi_root.new

      @ls_change_notifs = if_esf_types.ty_change_notifications.new

      begin
         @mo_adaptation_handler.modify(_i:{
            "out_messages" => @lt_messages,
            "out_change_notifications" => @ls_change_notifs,
         }, _e:{
            "in_modifications" => in_modifications,
         })

         me.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:@lt_messages)

         me.put_change_notifs_into_handler(in_change_notifications:@ls_change_notifs, in_change_handler:in_change_handler)


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_retrieve(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      @lt_messages = cm_esi_root.tt_esi_root.new

      @ls_change_notifs = if_esf_types.ty_change_notifications.new

      if in_edit_mode != if_esf_types.co_read_only
         assert(o:in_buffer_sync_handler .isBOUND())



      end

      begin
         @mo_adaptation_handler.retrieve(_i:{
            "out_data" => out_data,
            "out_failed_node_ids" => out_failed_node_ids,
            "out_messages" => @lt_messages,
            "out_sync_notifications" => @ls_change_notifs.sync_notifications,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_node_ids" => in_node_ids,
            "in_requested_image" => in_requested_image,
            "in_edit_mode" => in_edit_mode,
            "in_requested_attributes" => in_requested_attributes,
         })

         me.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:@lt_messages)

         if in_buffer_sync_handler .isBOUND()
            me.put_sync_notifs_into_handler(in_sync_handler:in_buffer_sync_handler, in_sync_notifications:@ls_change_notifs.sync_notifications)





         end


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_retrieve_by_association(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      @lt_messages = cm_esi_root.tt_esi_root.new

      @ls_change_notifs = if_esf_types.ty_change_notifications.new

      if in_edit_mode != if_esf_types.co_read_only
         assert(o:in_buffer_sync_handler .isBOUND())



      end

      begin
         @mo_adaptation_handler.retrieve_by_association(_i:{
            "out_links" => out_links,
            "out_data" => out_data,
            "out_failed_source_node_ids" => out_failed_source_node_ids,
            "out_messages" => @lt_messages,
            "out_sync_notifications" => @ls_change_notifs.sync_notifications,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_association_name" => in_association_name,
            "in_node_ids" => in_node_ids,
            "in_fill_data" => in_fill_data,
            "in_filter_parameters" => in_filter_parameters,
            "in_filtered_attributes" => in_filtered_attributes,
            "in_requested_image" => in_requested_image,
            "in_edit_mode" => in_edit_mode,
            "in_requested_attributes" => in_requested_attributes,
         })

         me.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:@lt_messages)

         if in_buffer_sync_handler .isBOUND()
            me.put_sync_notifs_into_handler(in_sync_handler:in_buffer_sync_handler, in_sync_notifications:@ls_change_notifs.sync_notifications)





         end


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_retrieve_default_node_values(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      ls_properties = if_esf_types.ty_properties.new

      assert(o:in_property_handler .isBOUND())
      begin
         @mo_adaptation_handler.retrieve_default_node_values(_i:{
            "out_data" => out_data,
            "out_properties" => @ls_properties,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_node_id_handles" => in_node_id_handles,
            "in_association_name" => in_association_name,
            "in_association_filter_struct" => in_association_filter_struct,
            "in_association_filter_attribs" => in_association_filter_attribs,
            "in_source_bo_node_name" => in_source_bo_node_name,
            "in_source_node_id" => in_source_node_id,
            "in_source_node_id_is_handle" => in_source_node_id_is_handle,
         })

         in_property_handler.set_properties(_e:{
            "in_properties" => @ls_properties,
         })


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_retrieve_properties(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      @ls_properties = if_esf_types.ty_properties.new

      begin
         @mo_adaptation_handler.retrieve_properties(_i:{
            "out_properties" => @ls_properties,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_node_ids" => in_node_ids,
            "in_property_scope" => in_property_scope,
         })

         in_property_handler.set_properties(_e:{
            "in_properties" => @ls_properties,
         })


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_access_i_retrieve_root_node_id(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      begin
         @mo_adaptation_handler.retrieve_root_node_id(_i:{
            "out_links" => out_links,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_node_ids" => in_node_ids,
            "in_requested_image" => in_requested_image,
         })


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_action_i_execute_action(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      @lt_messages = cm_esi_root.tt_esi_root.new

      @ls_change_notifs = if_esf_types.ty_change_notifications.new

      begin
         @mo_adaptation_handler.execute_action(_i:{
            "out_messages" => @lt_messages,
            "out_change_notifications" => @ls_change_notifs,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_action_name" => in_action_name,
            "in_node_ids" => in_node_ids,
            "in_action_parameters" => in_action_parameters,
            "in_referencing_node_elements" => in_referencing_node_elements,
         })

         me.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:@lt_messages)

         me.put_change_notifs_into_handler(in_change_notifications:@ls_change_notifs, in_change_handler:in_change_handler)


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_action_i_retrieve_default_action_param(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      begin
         @mo_adaptation_handler.retrieve_default_action_param(_i:{
            "out_action_parameters" => out_action_parameters,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_action_name" => in_action_name,
            "in_node_ids" => in_node_ids,
         })


      rescue cx_root=>lx_root
         handle_error(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_init_i_init(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      begin
         @mo_adaptation_handler = cl_bsa_factory.get_adaptation_handler_for_co(in_bo_name:in_bo_name, in_provider_context:in_provider_context)


      rescue cx_bsa_runtime=>lx_bsa_runtime
         handle_error(ix_exception:@lx_bsa_runtime)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_interact_ctrl_i_close_session(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################








      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_interact_ctrl_i_do_post_processing(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      clear(id:@mt_exceptions)





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_interact_ctrl_i_do_pre_processing(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################








      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_query_i_query(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      @lt_messages = cm_esi_root.tt_esi_root.new

      begin
         @mo_adaptation_handler.if_esf_lcp_i_query(_i:{
            "out_node_ids" => out_node_ids,
            "out_data" => out_data,
            "out_query_info" => out_query_info,
            "out_messages" => @lt_messages,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_query_name" => in_query_name,
            "in_selection_parameters" => in_selection_parameters,
            "in_query_options" => in_query_options,
            "in_requested_attributes" => in_requested_attributes,
            "in_authorization_context" => in_authorization_context,
            "in_fill_data" => in_fill_data,
            "in_filter_node_ids" => in_filter_node_ids,
         })

         me.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:@lt_messages)


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_query_i_retrieve_default_query_param(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      begin
         @mo_adaptation_handler.retrieve_default_query_param(_i:{
            "out_selection_parameters" => out_selection_parameters,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_query_name" => in_query_name,
         })


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_subscription_i_on_bo_changed(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################








      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_transact_ctrl_i_on_after_check_transaction(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################








      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_transact_ctrl_i_on_after_cleanup_transaction(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################








      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_transact_ctrl_i_on_after_save_transaction(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################








      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_transact_ctrl_i_on_before_check_transaction(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################








      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_transact_ctrl_i_on_before_cleanup_transaction(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################








      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_transact_ctrl_i_on_before_save_transaction(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################








      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_value_set_i_retrieve_action_code_values(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      #**********************************************************************

      begin
         @mo_adaptation_handler.retrieve_action_code_values(_i:{
            "out_code_values" => out_code_values,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_node_ids" => in_node_ids,
            "in_action_name" => in_action_name,
            "in_attribute_name" => in_attribute_name,
            "in_context_parameters" => in_context_parameters,
            "in_context_attributes" => in_context_attributes,
         })


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_value_set_i_retrieve_action_value_set(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      #**********************************************************************

      begin
         @mo_adaptation_handler.retrieve_action_value_set(_i:{
            "out_value_set_node_ids" => out_value_set_node_ids,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_action_name" => in_action_name,
            "in_node_ids" => in_node_ids,
            "in_attribute_name" => in_attribute_name,
            "in_selection_parameters" => in_selection_parameters,
            "in_query_options" => in_query_options,
            "in_authorization_context" => in_authorization_context,
         })


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_value_set_i_retrieve_code_values(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      #**********************************************************************

      begin
         @mo_adaptation_handler.retrieve_code_values(_i:{
            "out_code_values" => out_code_values,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_node_id" => in_node_id,
            "in_node_id_is_handle" => in_node_id_is_handle,
            "in_attribute_name" => in_attribute_name,
            "in_context_parameters" => in_context_parameters,
            "in_context_attributes" => in_context_attributes,
         })


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_value_set_i_retrieve_query_code_values(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      #**********************************************************************

      begin
         @mo_adaptation_handler.retrieve_query_code_values(_i:{
            "out_code_values" => out_code_values,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_query_name" => in_query_name,
            "in_attribute_name" => in_attribute_name,
            "in_context_parameters" => in_context_parameters,
            "in_context_attributes" => in_context_attributes,
         })


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_value_set_i_retrieve_query_value_set(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      #**********************************************************************

      begin
         @mo_adaptation_handler.retrieve_query_value_set(_i:{
            "out_value_set_node_ids" => out_value_set_node_ids,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_query_name" => in_query_name,
            "in_attribute_name" => in_attribute_name,
            "in_selection_parameters" => in_selection_parameters,
            "in_query_options" => in_query_options,
            "in_authorization_context" => in_authorization_context,
         })


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end
   def if_esf_provider_value_set_i_retrieve_value_set(_i:nil,_e:nil)
      ###################################
      # setup importing parameter
      _i.each{|k,v| eval("#{k} = #{v}")} if _i
      ###################################



      @lx_bsa_runtime = cx_bsa_runtime.new

      @lx_root = cx_root.new

      #**********************************************************************

      begin
         @mo_adaptation_handler.retrieve_value_set(_i:{
            "out_value_set_node_ids" => out_value_set_node_ids,
         }, _e:{
            "in_bo_node_name" => in_bo_node_name,
            "in_node_id" => in_node_id,
            "in_node_id_is_handle" => in_node_id_is_handle,
            "in_selection_parameters" => in_selection_parameters,
            "in_query_options" => in_query_options,
            "in_authorization_context" => in_authorization_context,
            "in_attribute_name" => in_attribute_name,
         })


      rescue cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:@lx_bsa_runtime)

         handle_error(ix_exception:@lx_root)


      end





      ###################################
      # setup exporting
      _exp = {}
      _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      return {:exp=>_exp}
      ###################################


   end


end
