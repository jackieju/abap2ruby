# Generated by Abap2Ruby(https://github.com/jackieju/abap2ruby)
require_relative "if_esf_provider_access.rb"
require_relative "if_esf_provider_action.rb"
require_relative "if_esf_provider_init.rb"
require_relative "if_esf_provider_query.rb"
require_relative "if_esf_provider_subscription.rb"
require_relative "if_bsa_callback_handler.rb"
require_relative "if_esf_provider_value_set.rb"
require_relative "if_esf_provider_interact_ctrl.rb"
require_relative "if_esf_provider_transact_ctrl.rb"
require_relative "if_esf_types.rb"

class Cl_bsa_service_provider_co

   # CLASS-METHODS put_change_notifs_into_handler
   #       IMPORTING
   #         !in_change_notifications TYPE if_esf_types=>ty_change_notifications
   #         !in_change_handler TYPE REF TO if_esf_change_handler .
   #

   def self.put_change_notifs_into_handler(*_a,in_change_notifications:nil,in_change_handler:nil,_i:nil,_e:nil,_b:nil)

      in_change_notifications=nil;in_change_handler=nil;
      if _a && _a.size>0
         in_change_notifications=_a[0]
         in_change_handler=_a[1] if _a.size>1
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_esf_change_handler = nil # cx_esf_change_handler.new

      lx_esf_sync_handler = nil # cx_esf_sync_handler.new

      loop(at:in_change_notifications.create_notifications){
         begin
            in_change_handler.notify_create(_i:{
               "in_bo_node_name" => fs_create_notif.bo_node_name,
               "in_bo_node_id" => fs_create_notif.node_id,
            }, _b:binding)


         rescue Cx_esf_change_handler=>lx_esf_change_handler

         end

      }
      loop(at:in_change_notifications.suc_create_notifications){
         begin
            in_change_handler.notify_create(_i:{
               "in_bo_node_name" => fs_suc_create_notif.bo_node_name,
               "in_bo_node_id" => fs_suc_create_notif.node_id,
               "in_create_key_handle" => fs_suc_create_notif.node_id_handle,
            }, _b:binding)


         rescue Cx_esf_change_handler=>lx_esf_change_handler

         end

      }
      loop(at:in_change_notifications.failed_create_notifications){
         begin
            in_change_handler.notify_failed_create(_i:{
               "in_bo_node_name" => fs_failed_create_notif.bo_node_name,
               "in_create_key_handle" => fs_failed_create_notif.node_id_handle,
            }, _b:binding)


         rescue Cx_esf_change_handler=>lx_esf_change_handler

         end

      }
      loop(at:in_change_notifications.update_notifications){
         begin
            in_change_handler.notify_update(_i:{
               "in_bo_node_name" => fs_update_notif.bo_node_name,
               "in_bo_node_id" => fs_update_notif.node_id,
               "in_attributes_changed" => fs_update_notif.attributes_changed,
               "in_properties_changed" => fs_update_notif.properties_changed,
               "in_associations_changed" => fs_update_notif.associations_changed,
               "in_affected_associations" => fs_update_notif.affected_associations,
               "in_property_change_scope" => fs_update_notif.property_scope,
            }, _b:binding)


         rescue Cx_esf_change_handler=>lx_esf_change_handler

         end

      }
      loop(at:in_change_notifications.delete_notifications){
         begin
            in_change_handler.notify_delete(_i:{
               "in_bo_node_name" => fs_delete_notif.bo_node_name,
               "in_bo_node_id" => fs_delete_notif.node_id,
            }, _b:binding)


         rescue Cx_esf_change_handler=>lx_esf_change_handler

         end

      }
      begin
         in_change_handler.notify_buffer_syncs(_i:{
            "in_sync_notifications" => in_change_notifications.sync_notifications,
         }, _b:binding)


      rescue Cx_esf_sync_handler=>lx_esf_sync_handler
         raise cx_fatal_exception.new


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # METHODS put_messages_into_handler
   #       IMPORTING
   #         !in_message_handler TYPE REF TO if_esf_message_handler
   #         !in_messages TYPE cm_esi_root=>tt_esi_root .
   #

   def put_messages_into_handler(*_a,in_message_handler:nil,in_messages:nil,_i:nil,_e:nil,_b:nil)

      in_message_handler=nil;in_messages=nil;
      if _a && _a.size>0
         in_message_handler=_a[0]
         in_messages=_a[1] if _a.size>1
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_exception = nil # cx_root.new

      lo_message = nil # cm_esi_root.new

      lo_mapped_message = nil # cm_esi_root.new

      lt_message = nil # cm_esi_root = tt_esi_root.new

      ls_origin_location = nil # cm_esi_root = ty_message_location.new

      begin
         loop(at:in_messages, into:lo_message){
            return
         }
         if sy.subrc == 0
            loop(at:in_messages, into:lo_message){
               if lo_message.origin_location.bo_name != in_message_handler.bo_name
                  ls_origin_location.bo_name = in_message_handler.bo_name


                  #"change lifetime to transition - no other chance, because state is not allowed"without location

                  lo_mapped_message = lo_message.copy_with_new_location(new_origin_location:ls_origin_location, new_message_lifetime:Cm_esi_root::Co_lifetime_transition)



                  append(from:lo_mapped_message, to:lt_message)


               else
                  append(from:lo_message, to:lt_message)


               end


            }

            in_message_handler.add_messages(in_messages:lt_message)




         else
            in_message_handler.add_messages(in_messages:in_messages)



         end


      rescue Cx_esf_message_handler=>lx_exception
         raise cx_fatal_exception.new


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # METHODS handle_error
   #       IMPORTING
   #         !ix_exception TYPE REF TO cx_root .
   #

   def handle_error(*_a,ix_exception:nil,_i:nil,_e:nil,_b:nil)

      ix_exception=nil;
      if _a && _a.size>0
         ix_exception=_a[0]
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      assert(o:ix_exception.isBOUND())
      raise cx_bsa_runtime_dynamic.new






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # METHODS put_sync_notifs_into_handler
   #       IMPORTING
   #         !in_sync_notifications TYPE if_esf_types=>tt_sync_notifications
   #         !in_sync_handler TYPE REF TO if_esf_buffer_sync_handler .
   #

   def put_sync_notifs_into_handler(*_a,in_sync_notifications:nil,in_sync_handler:nil,_i:nil,_e:nil,_b:nil)

      in_sync_notifications=nil;in_sync_handler=nil;
      if _a && _a.size>0
         in_sync_notifications=_a[0]
         in_sync_handler=_a[1] if _a.size>1
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      in_sync_handler.notify_buffer_syncs(in_sync_notifications)






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # METHODS handle_error_adaptation_hdlr
   #       IMPORTING
   #         !ix_exception TYPE REF TO cx_root .
   #

   def handle_error_adaptation_hdlr(*_a,ix_exception:nil,_i:nil,_e:nil,_b:nil)

      ix_exception=nil;
      if _a && _a.size>0
         ix_exception=_a[0]
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      raise cx_bsa_runtime_dynamic.new






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end
   # METHODS append_pre_exceptions_to_msgs
   #       IMPORTING
   #         !io_exception TYPE REF TO cx_root
   #       CHANGING
   #         !ct_messages TYPE cm_esi_root=>tt_esi_root .

   def append_pre_exceptions_to_msgs(*_a,io_exception:nil,ct_messages:nil,_i:nil,_e:nil,_b:nil)

      io_exception=nil;ct_messages=nil;
      if _a && _a.size>0
         io_exception=_a[0]
         ct_messages=_a[1] if _a.size>1
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lr_t100_message = nil # cm_esi_t100.new

      lr_cast_exception = nil # cx_root.new

      #**********************************************************************
      #" check if a previous exception exists or not
      if io_exception.isBOUND()
         begin
            lr_t100_message = io_exception

            #" append the previous message
            append(from:lr_t100_message, to:ct_messages)
            me.append_pre_exceptions_to_msgs(_e:{
               "io_exception" => "io_exception.previous",
            }, _c:{
               "ct_messages" => ct_messages,
            }, _b:binding)


         rescue Cx_sy_conversion_no_number,Cx_sy_conversion_overflow,Cx_sy_move_cast_error=>lr_cast_exception
            me.append_pre_exceptions_to_msgs(_e:{
               "io_exception" => "io_exception.previous",
            }, _c:{
               "ct_messages" => ct_messages,
            }, _b:binding)


         end



      end






      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_access_i_check(*_a,in_bo_node_name:nil,in_node_ids:nil,in_check_scope:nil,in_message_handler:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_node_ids=nil;in_check_scope=nil;in_message_handler=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_ids=_a[1] if _a.size>1
         in_check_scope=_a[2] if _a.size>2
         in_message_handler=_a[3] if _a.size>3
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      lt_messages = nil # cm_esi_root = tt_esi_root.new

      begin
         @mo_adaptation_handler.check(_i:{
            "out_messages" => lt_messages,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_node_ids" => "in_node_ids",
            "in_check_scope" => "in_check_scope",
         }, _b:binding)

         me.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:lt_messages)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_access_i_check_and_determine(*_a,in_bo_node_name:nil,in_node_ids:nil,in_check_scope:nil,in_message_handler:nil,in_change_handler:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_node_ids=nil;in_check_scope=nil;in_message_handler=nil;in_change_handler=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_ids=_a[1] if _a.size>1
         in_check_scope=_a[2] if _a.size>2
         in_message_handler=_a[3] if _a.size>3
         in_change_handler=_a[4] if _a.size>4
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      lt_messages = nil # cm_esi_root = tt_esi_root.new

      ls_change_notifs = nil # if_esf_types = ty_change_notifications.new

      begin
         @mo_adaptation_handler.check_and_determine(_i:{
            "out_messages" => lt_messages,
            "out_change_notifications" => ls_change_notifs,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_node_ids" => "in_node_ids",
            "in_check_scope" => "in_check_scope",
         }, _b:binding)

         me.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:lt_messages)

         me.put_change_notifs_into_handler(in_change_notifications:ls_change_notifs, in_change_handler:in_change_handler)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_access_i_convert_keys(*_a,in_bo_node_name:nil,in_source_key_name:nil,in_target_key_name:nil,in_source_keys:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_source_key_name=nil;in_target_key_name=nil;in_source_keys=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_source_key_name=_a[1] if _a.size>1
         in_target_key_name=_a[2] if _a.size>2
         in_source_keys=_a[3] if _a.size>3
      end
      out_target_keys=out_failed=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      begin
         @mo_adaptation_handler.convert_keys(_i:{
            "out_target_keys" => out_target_keys,
            "out_failed" => out_failed,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_source_key_name" => "in_source_key_name",
            "in_target_key_name" => "in_target_key_name",
            "in_source_keys" => "in_source_keys",
         }, _b:binding)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_access_i_convert_key_to_node_id(*_a,in_bo_node_name:nil,in_key_name:nil,in_keys:nil,in_requested_image:If_esf_types::Co_image_transactional_buffer,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_key_name=nil;in_keys=nil;in_requested_image=If_esf_types::Co_image_transactional_buffer;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_key_name=_a[1] if _a.size>1
         in_keys=_a[2] if _a.size>2
         in_requested_image=_a[3] if _a.size>3
      end
      out_key_mapping=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      begin
         @mo_adaptation_handler.convert_key_to_node_id(_i:{
            "out_key_mapping" => out_key_mapping,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_key_name" => "in_key_name",
            "in_keys" => "in_keys",
            "in_requested_image" => "in_requested_image",
         }, _b:binding)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_access_i_modify(*_a,in_change_handler:nil,in_message_handler:nil,in_modifications:nil,_i:nil,_e:nil,_b:nil)

      in_change_handler=nil;in_message_handler=nil;in_modifications=nil;
      if _a && _a.size>0
         in_change_handler=_a[0]
         in_message_handler=_a[1] if _a.size>1
         in_modifications=_a[2] if _a.size>2
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      lt_messages = nil # cm_esi_root = tt_esi_root.new

      ls_change_notifs = nil # if_esf_types = ty_change_notifications.new

      begin
         @mo_adaptation_handler.modify(_i:{
            "out_messages" => lt_messages,
            "out_change_notifications" => ls_change_notifs,
         }, _e:{
            "in_modifications" => "in_modifications",
         }, _b:binding)

         me.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:lt_messages)

         me.put_change_notifs_into_handler(in_change_notifications:ls_change_notifs, in_change_handler:in_change_handler)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_access_i_retrieve(*_a,in_bo_node_name:nil,in_node_ids:nil,in_requested_image:If_esf_types::Co_image_transactional_buffer,in_edit_mode:nil,in_requested_attributes:nil,in_message_handler:nil,in_buffer_sync_handler:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_node_ids=nil;in_requested_image=If_esf_types::Co_image_transactional_buffer;in_edit_mode=nil;in_requested_attributes=nil;in_message_handler=nil;in_buffer_sync_handler=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_ids=_a[1] if _a.size>1
         in_requested_image=_a[2] if _a.size>2
         in_edit_mode=_a[3] if _a.size>3
         in_requested_attributes=_a[4] if _a.size>4
         in_message_handler=_a[5] if _a.size>5
         in_buffer_sync_handler=_a[6] if _a.size>6
      end
      out_data=out_failed_node_ids=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      lt_messages = nil # cm_esi_root = tt_esi_root.new

      ls_change_notifs = nil # if_esf_types = ty_change_notifications.new

      if in_edit_mode != If_esf_types::Co_read_only
         assert(o:in_buffer_sync_handler.isBOUND())



      end

      begin
         @mo_adaptation_handler.retrieve(_i:{
            "out_data" => out_data,
            "out_failed_node_ids" => out_failed_node_ids,
            "out_messages" => lt_messages,
            "out_sync_notifications" => ls_change_notifs.sync_notifications,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_node_ids" => "in_node_ids",
            "in_requested_image" => "in_requested_image",
            "in_edit_mode" => "in_edit_mode",
            "in_requested_attributes" => "in_requested_attributes",
         }, _b:binding)

         me.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:lt_messages)

         if in_buffer_sync_handler.isBOUND()
            me.put_sync_notifs_into_handler(in_sync_handler:in_buffer_sync_handler, in_sync_notifications:ls_change_notifs.sync_notifications)





         end


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_access_i_retrieve_by_association(*_a,in_bo_name:nil,in_bo_node_name:nil,in_association_name:nil,in_node_ids:nil,in_fill_data:nil,in_fill_failed_source_node_ids:abap_true,in_filter_parameters:nil,in_filtered_attributes:nil,in_requested_image:If_esf_types::Co_image_transactional_buffer,in_edit_mode:nil,in_requested_attributes:nil,in_message_handler:nil,in_buffer_sync_handler:nil,_i:nil,_e:nil,_b:nil)

      in_bo_name=nil;in_bo_node_name=nil;in_association_name=nil;in_node_ids=nil;in_fill_data=nil;in_fill_failed_source_node_ids=abap_true;in_filter_parameters=nil;in_filtered_attributes=nil;in_requested_image=If_esf_types::Co_image_transactional_buffer;in_edit_mode=nil;in_requested_attributes=nil;in_message_handler=nil;in_buffer_sync_handler=nil;
      if _a && _a.size>0
         in_bo_name=_a[0]
         in_bo_node_name=_a[1] if _a.size>1
         in_association_name=_a[2] if _a.size>2
         in_node_ids=_a[3] if _a.size>3
         in_fill_data=_a[4] if _a.size>4
         in_fill_failed_source_node_ids=_a[5] if _a.size>5
         in_filter_parameters=_a[6] if _a.size>6
         in_filtered_attributes=_a[7] if _a.size>7
         in_requested_image=_a[8] if _a.size>8
         in_edit_mode=_a[9] if _a.size>9
         in_requested_attributes=_a[10] if _a.size>10
         in_message_handler=_a[11] if _a.size>11
         in_buffer_sync_handler=_a[12] if _a.size>12
      end
      out_links=out_data=out_failed_source_node_ids=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      lt_messages = nil # cm_esi_root = tt_esi_root.new

      ls_change_notifs = nil # if_esf_types = ty_change_notifications.new

      if in_edit_mode != If_esf_types::Co_read_only
         assert(o:in_buffer_sync_handler.isBOUND())



      end

      begin
         @mo_adaptation_handler.retrieve_by_association(_i:{
            "out_links" => out_links,
            "out_data" => out_data,
            "out_failed_source_node_ids" => out_failed_source_node_ids,
            "out_messages" => lt_messages,
            "out_sync_notifications" => ls_change_notifs.sync_notifications,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_association_name" => "in_association_name",
            "in_node_ids" => "in_node_ids",
            "in_fill_data" => "in_fill_data",
            "in_filter_parameters" => "in_filter_parameters",
            "in_filtered_attributes" => "in_filtered_attributes",
            "in_requested_image" => "in_requested_image",
            "in_edit_mode" => "in_edit_mode",
            "in_requested_attributes" => "in_requested_attributes",
         }, _b:binding)

         me.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:lt_messages)

         if in_buffer_sync_handler.isBOUND()
            me.put_sync_notifs_into_handler(in_sync_handler:in_buffer_sync_handler, in_sync_notifications:ls_change_notifs.sync_notifications)





         end


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_access_i_retrieve_default_node_values(*_a,in_bo_node_name:nil,in_node_id_handles:nil,in_association_name:nil,in_association_filter_struct:nil,in_association_filter_attribs:nil,in_source_bo_node_name:nil,in_source_node_id:nil,in_source_node_id_is_handle:nil,in_property_handler:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_node_id_handles=nil;in_association_name=nil;in_association_filter_struct=nil;in_association_filter_attribs=nil;in_source_bo_node_name=nil;in_source_node_id=nil;in_source_node_id_is_handle=nil;in_property_handler=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_id_handles=_a[1] if _a.size>1
         in_association_name=_a[2] if _a.size>2
         in_association_filter_struct=_a[3] if _a.size>3
         in_association_filter_attribs=_a[4] if _a.size>4
         in_source_bo_node_name=_a[5] if _a.size>5
         in_source_node_id=_a[6] if _a.size>6
         in_source_node_id_is_handle=_a[7] if _a.size>7
         in_property_handler=_a[8] if _a.size>8
      end
      out_data=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      ls_properties = nil # if_esf_types = ty_properties.new

      assert(o:in_property_handler.isBOUND())
      begin
         @mo_adaptation_handler.retrieve_default_node_values(_i:{
            "out_data" => out_data,
            "out_properties" => ls_properties,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_node_id_handles" => "in_node_id_handles",
            "in_association_name" => "in_association_name",
            "in_association_filter_struct" => "in_association_filter_struct",
            "in_association_filter_attribs" => "in_association_filter_attribs",
            "in_source_bo_node_name" => "in_source_bo_node_name",
            "in_source_node_id" => "in_source_node_id",
            "in_source_node_id_is_handle" => "in_source_node_id_is_handle",
         }, _b:binding)

         in_property_handler.set_properties(_e:{
            "in_properties" => "ls_properties",
         }, _b:binding)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_access_i_retrieve_properties(*_a,in_bo_node_name:nil,in_node_ids:nil,in_property_handler:nil,in_property_scope:If_esf_types::Co_property_scope_default,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_node_ids=nil;in_property_handler=nil;in_property_scope=If_esf_types::Co_property_scope_default;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_ids=_a[1] if _a.size>1
         in_property_handler=_a[2] if _a.size>2
         in_property_scope=_a[3] if _a.size>3
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      ls_properties = nil # if_esf_types = ty_properties.new

      begin
         @mo_adaptation_handler.retrieve_properties(_i:{
            "out_properties" => ls_properties,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_node_ids" => "in_node_ids",
            "in_property_scope" => "in_property_scope",
         }, _b:binding)

         in_property_handler.set_properties(_e:{
            "in_properties" => "ls_properties",
         }, _b:binding)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_access_i_retrieve_root_node_id(*_a,in_bo_node_name:nil,in_node_ids:nil,in_requested_image:If_esf_types::Co_image_transactional_buffer,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_node_ids=nil;in_requested_image=If_esf_types::Co_image_transactional_buffer;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_ids=_a[1] if _a.size>1
         in_requested_image=_a[2] if _a.size>2
      end
      out_links=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      begin
         @mo_adaptation_handler.retrieve_root_node_id(_i:{
            "out_links" => out_links,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_node_ids" => "in_node_ids",
            "in_requested_image" => "in_requested_image",
         }, _b:binding)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_action_i_execute_action(*_a,in_bo_node_name:nil,in_action_name:nil,in_node_ids:nil,in_action_parameters:nil,in_referencing_node_elements:nil,in_change_handler:nil,in_message_handler:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_action_name=nil;in_node_ids=nil;in_action_parameters=nil;in_referencing_node_elements=nil;in_change_handler=nil;in_message_handler=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_action_name=_a[1] if _a.size>1
         in_node_ids=_a[2] if _a.size>2
         in_action_parameters=_a[3] if _a.size>3
         in_referencing_node_elements=_a[4] if _a.size>4
         in_change_handler=_a[5] if _a.size>5
         in_message_handler=_a[6] if _a.size>6
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      lt_messages = nil # cm_esi_root = tt_esi_root.new

      ls_change_notifs = nil # if_esf_types = ty_change_notifications.new

      begin
         @mo_adaptation_handler.execute_action(_i:{
            "out_messages" => lt_messages,
            "out_change_notifications" => ls_change_notifs,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_action_name" => "in_action_name",
            "in_node_ids" => "in_node_ids",
            "in_action_parameters" => "in_action_parameters",
            "in_referencing_node_elements" => "in_referencing_node_elements",
         }, _b:binding)

         me.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:lt_messages)

         me.put_change_notifs_into_handler(in_change_notifications:ls_change_notifs, in_change_handler:in_change_handler)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_action_i_retrieve_default_action_param(*_a,in_bo_node_name:nil,in_action_name:nil,in_node_ids:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_action_name=nil;in_node_ids=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_action_name=_a[1] if _a.size>1
         in_node_ids=_a[2] if _a.size>2
      end
      out_action_parameters=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      begin
         @mo_adaptation_handler.retrieve_default_action_param(_i:{
            "out_action_parameters" => out_action_parameters,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_action_name" => "in_action_name",
            "in_node_ids" => "in_node_ids",
         }, _b:binding)


      rescue Cx_root=>lx_root
         handle_error(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_init_i_init(*_a,in_provider_context:nil,in_bo_name:nil,inout_preferred_trx_pattern:If_esf_provider_init::Co_tp_save_and_continue,_i:nil,_e:nil,_b:nil)

      in_provider_context=nil;in_bo_name=nil;inout_preferred_trx_pattern=If_esf_provider_init::Co_tp_save_and_continue;
      if _a && _a.size>0
         in_provider_context=_a[0]
         in_bo_name=_a[1] if _a.size>1
         inout_preferred_trx_pattern=_a[2] if _a.size>2
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      begin
         @mo_adaptation_handler = Cl_bsa_factory::Get_adaptation_handler_for_co(in_bo_name:in_bo_name, in_provider_context:in_provider_context)


      rescue Cx_bsa_runtime=>lx_bsa_runtime
         handle_error(ix_exception:lx_bsa_runtime)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_interact_ctrl_i_close_session(*_a,session_hand_over:nil,_i:nil,_e:nil,_b:nil)

      session_hand_over=nil;
      if _a && _a.size>0
         session_hand_over=_a[0]
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################








      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_interact_ctrl_i_do_post_processing(*_a,in_overruling_code:nil,inout_messages:nil,_i:nil,_e:nil,_b:nil)

      in_overruling_code=nil;inout_messages=nil;
      if _a && _a.size>0
         in_overruling_code=_a[0]
         inout_messages=_a[1] if _a.size>1
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      clear(id:@mt_exceptions)





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_interact_ctrl_i_do_pre_processing(*_a,_i:nil,_e:nil,_b:nil)


      if _a && _a.size>0
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################








      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_query_i_query(*_a,in_bo_node_name:nil,in_query_name:nil,in_selection_parameters:nil,in_query_options:nil,in_authorization_context:nil,in_message_handler:nil,in_fill_data:space,in_filter_node_ids:nil,in_requested_attributes:nil,in_execute_over_sql:space,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_query_name=nil;in_selection_parameters=nil;in_query_options=nil;in_authorization_context=nil;in_message_handler=nil;in_fill_data=space;in_filter_node_ids=nil;in_requested_attributes=nil;in_execute_over_sql=space;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_query_name=_a[1] if _a.size>1
         in_selection_parameters=_a[2] if _a.size>2
         in_query_options=_a[3] if _a.size>3
         in_authorization_context=_a[4] if _a.size>4
         in_message_handler=_a[5] if _a.size>5
         in_fill_data=_a[6] if _a.size>6
         in_filter_node_ids=_a[7] if _a.size>7
         in_requested_attributes=_a[8] if _a.size>8
         in_execute_over_sql=_a[9] if _a.size>9
      end
      out_node_ids=out_data=out_query_info=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      lt_messages = nil # cm_esi_root = tt_esi_root.new

      begin
         @mo_adaptation_handler.if_esf_lcp_i_query(_i:{
            "out_node_ids" => out_node_ids,
            "out_data" => out_data,
            "out_query_info" => out_query_info,
            "out_messages" => lt_messages,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_query_name" => "in_query_name",
            "in_selection_parameters" => "in_selection_parameters",
            "in_query_options" => "in_query_options",
            "in_requested_attributes" => "in_requested_attributes",
            "in_authorization_context" => "in_authorization_context",
            "in_fill_data" => "in_fill_data",
            "in_filter_node_ids" => "in_filter_node_ids",
         }, _b:binding)

         me.put_messages_into_handler(in_message_handler:in_message_handler, in_messages:lt_messages)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_query_i_retrieve_default_query_param(*_a,in_bo_node_name:nil,in_query_name:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_query_name=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_query_name=_a[1] if _a.size>1
      end
      out_selection_parameters=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      begin
         @mo_adaptation_handler.retrieve_default_query_param(_i:{
            "out_selection_parameters" => out_selection_parameters,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_query_name" => "in_query_name",
         }, _b:binding)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_subscription_i_on_bo_changed(*_a,in_publisher_bo_name:nil,in_bo_changes:nil,in_change_handler:nil,_i:nil,_e:nil,_b:nil)

      in_publisher_bo_name=nil;in_bo_changes=nil;in_change_handler=nil;
      if _a && _a.size>0
         in_publisher_bo_name=_a[0]
         in_bo_changes=_a[1] if _a.size>1
         in_change_handler=_a[2] if _a.size>2
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################








      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_transact_ctrl_i_on_after_check_transaction(*_a,in_rejected:nil,inout_messages:nil,_i:nil,_e:nil,_b:nil)

      in_rejected=nil;inout_messages=nil;
      if _a && _a.size>0
         in_rejected=_a[0]
         inout_messages=_a[1] if _a.size>1
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################








      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_transact_ctrl_i_on_after_cleanup_transaction(*_a,inout_messages:nil,_i:nil,_e:nil,_b:nil)

      inout_messages=nil;
      if _a && _a.size>0
         inout_messages=_a[0]
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################








      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_transact_ctrl_i_on_after_save_transaction(*_a,in_rejected:nil,inout_messages:nil,_i:nil,_e:nil,_b:nil)

      in_rejected=nil;inout_messages=nil;
      if _a && _a.size>0
         in_rejected=_a[0]
         inout_messages=_a[1] if _a.size>1
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################








      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_transact_ctrl_i_on_before_check_transaction(*_a,_i:nil,_e:nil,_b:nil)


      if _a && _a.size>0
      end
      out_rejected=out_messages=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################








      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_transact_ctrl_i_on_before_cleanup_transaction(*_a,_i:nil,_e:nil,_b:nil)


      if _a && _a.size>0
      end
      out_rejected=out_messages=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################








      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_transact_ctrl_i_on_before_save_transaction(*_a,_i:nil,_e:nil,_b:nil)


      if _a && _a.size>0
      end
      out_rejected=out_messages=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################








      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_value_set_i_retrieve_action_code_values(*_a,in_bo_node_name:nil,in_action_name:nil,in_node_ids:nil,in_attribute_name:nil,in_context_parameters:nil,in_context_attributes:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_action_name=nil;in_node_ids=nil;in_attribute_name=nil;in_context_parameters=nil;in_context_attributes=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_action_name=_a[1] if _a.size>1
         in_node_ids=_a[2] if _a.size>2
         in_attribute_name=_a[3] if _a.size>3
         in_context_parameters=_a[4] if _a.size>4
         in_context_attributes=_a[5] if _a.size>5
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      #**********************************************************************

      begin
         @mo_adaptation_handler.retrieve_action_code_values(_i:{
            "out_code_values" => out_code_values,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_node_ids" => "in_node_ids",
            "in_action_name" => "in_action_name",
            "in_attribute_name" => "in_attribute_name",
            "in_context_parameters" => "in_context_parameters",
            "in_context_attributes" => "in_context_attributes",
         }, _b:binding)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_value_set_i_retrieve_action_value_set(*_a,in_bo_node_name:nil,in_action_name:nil,in_node_ids:nil,in_attribute_name:nil,in_selection_parameters:nil,in_query_options:nil,in_authorization_context:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_action_name=nil;in_node_ids=nil;in_attribute_name=nil;in_selection_parameters=nil;in_query_options=nil;in_authorization_context=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_action_name=_a[1] if _a.size>1
         in_node_ids=_a[2] if _a.size>2
         in_attribute_name=_a[3] if _a.size>3
         in_selection_parameters=_a[4] if _a.size>4
         in_query_options=_a[5] if _a.size>5
         in_authorization_context=_a[6] if _a.size>6
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      #**********************************************************************

      begin
         @mo_adaptation_handler.retrieve_action_value_set(_i:{
            "out_value_set_node_ids" => out_value_set_node_ids,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_action_name" => "in_action_name",
            "in_node_ids" => "in_node_ids",
            "in_attribute_name" => "in_attribute_name",
            "in_selection_parameters" => "in_selection_parameters",
            "in_query_options" => "in_query_options",
            "in_authorization_context" => "in_authorization_context",
         }, _b:binding)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_value_set_i_retrieve_code_values(*_a,in_bo_node_name:nil,in_node_id:nil,in_node_id_is_handle:nil,in_attribute_name:nil,in_context_parameters:nil,in_context_attributes:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_node_id=nil;in_node_id_is_handle=nil;in_attribute_name=nil;in_context_parameters=nil;in_context_attributes=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_id=_a[1] if _a.size>1
         in_node_id_is_handle=_a[2] if _a.size>2
         in_attribute_name=_a[3] if _a.size>3
         in_context_parameters=_a[4] if _a.size>4
         in_context_attributes=_a[5] if _a.size>5
      end
      out_code_values=nil;


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      #**********************************************************************

      begin
         @mo_adaptation_handler.retrieve_code_values(_i:{
            "out_code_values" => out_code_values,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_node_id" => "in_node_id",
            "in_node_id_is_handle" => "in_node_id_is_handle",
            "in_attribute_name" => "in_attribute_name",
            "in_context_parameters" => "in_context_parameters",
            "in_context_attributes" => "in_context_attributes",
         }, _b:binding)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_value_set_i_retrieve_query_code_values(*_a,in_bo_node_name:nil,in_query_name:nil,in_attribute_name:nil,in_context_parameters:nil,in_context_attributes:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_query_name=nil;in_attribute_name=nil;in_context_parameters=nil;in_context_attributes=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_query_name=_a[1] if _a.size>1
         in_attribute_name=_a[2] if _a.size>2
         in_context_parameters=_a[3] if _a.size>3
         in_context_attributes=_a[4] if _a.size>4
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      #**********************************************************************

      begin
         @mo_adaptation_handler.retrieve_query_code_values(_i:{
            "out_code_values" => out_code_values,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_query_name" => "in_query_name",
            "in_attribute_name" => "in_attribute_name",
            "in_context_parameters" => "in_context_parameters",
            "in_context_attributes" => "in_context_attributes",
         }, _b:binding)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_value_set_i_retrieve_query_value_set(*_a,in_bo_node_name:nil,in_query_name:nil,in_attribute_name:nil,in_selection_parameters:nil,in_query_options:nil,in_authorization_context:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_query_name=nil;in_attribute_name=nil;in_selection_parameters=nil;in_query_options=nil;in_authorization_context=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_query_name=_a[1] if _a.size>1
         in_attribute_name=_a[2] if _a.size>2
         in_selection_parameters=_a[3] if _a.size>3
         in_query_options=_a[4] if _a.size>4
         in_authorization_context=_a[5] if _a.size>5
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      #**********************************************************************

      begin
         @mo_adaptation_handler.retrieve_query_value_set(_i:{
            "out_value_set_node_ids" => out_value_set_node_ids,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_query_name" => "in_query_name",
            "in_attribute_name" => "in_attribute_name",
            "in_selection_parameters" => "in_selection_parameters",
            "in_query_options" => "in_query_options",
            "in_authorization_context" => "in_authorization_context",
         }, _b:binding)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   def if_esf_provider_value_set_i_retrieve_value_set(*_a,in_bo_node_name:nil,in_node_id:nil,in_node_id_is_handle:nil,in_attribute_name:nil,in_selection_parameters:nil,in_query_options:nil,in_authorization_context:nil,_i:nil,_e:nil,_b:nil)

      in_bo_node_name=nil;in_node_id=nil;in_node_id_is_handle=nil;in_attribute_name=nil;in_selection_parameters=nil;in_query_options=nil;in_authorization_context=nil;
      if _a && _a.size>0
         in_bo_node_name=_a[0]
         in_node_id=_a[1] if _a.size>1
         in_node_id_is_handle=_a[2] if _a.size>2
         in_attribute_name=_a[3] if _a.size>3
         in_selection_parameters=_a[4] if _a.size>4
         in_query_options=_a[5] if _a.size>5
         in_authorization_context=_a[6] if _a.size>6
      end


      ###################################
      # setup importing parameter
      #   _i.each{|k,v| eval("#{k} = #{v}")} if _i
      #  _i.each{|k,v| v = "\"#{v}\"" if v.is_a?(String);eval("#{k} = #{v}")} if _i
      #var(_i) if _i
      var(_i) if _i;var(_e) if _e;_i.each{|k,v|eval("#{k}=v");varset(k, v)} if _i
      _e.each{|k,v|v=_b.local_variable_get(v.to_sym);eval("#{k}=v");varset(k, v)} if _e
      ###################################



      lx_bsa_runtime = nil # cx_bsa_runtime.new

      lx_root = nil # cx_root.new

      #**********************************************************************

      begin
         @mo_adaptation_handler.retrieve_value_set(_i:{
            "out_value_set_node_ids" => out_value_set_node_ids,
         }, _e:{
            "in_bo_node_name" => "in_bo_node_name",
            "in_node_id" => "in_node_id",
            "in_node_id_is_handle" => "in_node_id_is_handle",
            "in_selection_parameters" => "in_selection_parameters",
            "in_query_options" => "in_query_options",
            "in_authorization_context" => "in_authorization_context",
            "in_attribute_name" => "in_attribute_name",
         }, _b:binding)


      rescue Cx_root=>lx_root
         handle_error_adaptation_hdlr(ix_exception:lx_bsa_runtime)

         handle_error(ix_exception:lx_root)


      end





      ###################################
      # setup exporting
      #_exp = {}
      # _e.each{|k,v| eval("_exp['#{v}'] = #{k}")} if _e

      #return {:exp=>_exp}
      _e.each{|k,v|_b.local_variable_set(v.to_sym, eval("#{k}"))} if _e && _b
      ###################################


   end

   include If_esf_provider_access
   include If_esf_provider_action
   include If_esf_provider_init
   include If_esf_provider_query
   include If_esf_provider_subscription
   include If_bsa_callback_handler
   include If_esf_provider_value_set
   include If_esf_provider_interact_ctrl
   include If_esf_provider_transact_ctrl
   module Co_error_behavior
      module_function
      @dump = 0
      def dump;0;  end
      @fatal_exception = 1
      def fatal_exception;1;  end
      @dynamic_exception = 2
      def dynamic_exception;2;  end
      @message = 3
      def message;3;  end
   end
   include If_esf_types
   @mt_exceptions = nil # tt_exceptions.new
   @mo_adaptation_handler = nil # if_bsa_adaptation_handler.new
   @mv_error_behavior = nil # ty_error_behavior.new
   @mv_error_behavior_adap_hdlr = nil # ty_error_behavior.new
   include If_esf_types

end
